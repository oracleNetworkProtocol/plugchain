swagger: 2.0.0
info:
  title: Plug Chain Hub - gRPC Gateway docs
  description: A REST interface for state queries, legacy transactions
  version: main
paths:
  /ethermint/evm/v1/account/{address}:
    get:
      summary: Account queries an Ethereum account.
      operationId: Account
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              balance:
                type: string
                description: balance is the balance of the EVM denomination.
              code_hash:
                type: string
                description: code hash is the hex-formatted code bytes from the EOA.
              nonce:
                type: string
                format: uint64
                description: nonce is the account's sequence number.
            description: >-
              QueryAccountResponse is the response type for the Query/Account
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: address
          description: address is the ethereum hex address to query the account for.
          in: path
          required: true
          type: string
      tags:
        - Query
  /ethermint/evm/v1/balances/{address}:
    get:
      summary: |-
        Balance queries the balance of a the EVM denomination for a single
        EthAccount.
      operationId: Balance
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              balance:
                type: string
                description: balance is the balance of the EVM denomination.
            description: >-
              QueryBalanceResponse is the response type for the Query/Balance
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: address
          description: address is the ethereum hex address to query the balance for.
          in: path
          required: true
          type: string
      tags:
        - Query
  /ethermint/evm/v1/codes/{address}:
    get:
      summary: Code queries the balance of all coins for a single account.
      operationId: Code
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              code:
                type: string
                format: byte
                description: code represents the code bytes from an ethereum address.
            description: |-
              QueryCodeResponse is the response type for the Query/Code RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: address
          description: address is the ethereum hex address to query the code for.
          in: path
          required: true
          type: string
      tags:
        - Query
  /ethermint/evm/v1/cosmos_account/{address}:
    get:
      summary: CosmosAccount queries an Ethereum account's Cosmos Address.
      operationId: CosmosAccount
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              cosmos_address:
                type: string
                description: cosmos_address is the cosmos address of the account.
              sequence:
                type: string
                format: uint64
                description: sequence is the account's sequence number.
              account_number:
                type: string
                format: uint64
                title: account_number is the account numbert
            description: >-
              QueryCosmosAccountResponse is the response type for the
              Query/CosmosAccount

              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: address
          description: address is the ethereum hex address to query the account for.
          in: path
          required: true
          type: string
      tags:
        - Query
  /ethermint/evm/v1/estimate_gas:
    get:
      summary: EstimateGas implements the `eth_estimateGas` rpc api
      operationId: EstimateGas
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              gas:
                type: string
                format: uint64
                title: the estimated gas
            title: EstimateGasResponse defines EstimateGas response
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: args
          description: same json format as the json rpc api.
          in: query
          required: false
          type: string
          format: byte
        - name: gas_cap
          description: the default gas cap to be used.
          in: query
          required: false
          type: string
          format: uint64
      tags:
        - Query
  /ethermint/evm/v1/eth_call:
    get:
      summary: EthCall implements the `eth_call` rpc api
      operationId: EthCall
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              hash:
                type: string
                title: >-
                  ethereum transaction hash in hex format. This hash differs
                  from the

                  Tendermint sha256 hash of the transaction bytes. See

                  https://github.com/tendermint/tendermint/issues/6539 for
                  reference
              logs:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: string
                      title: address of the contract that generated the event
                    topics:
                      type: array
                      items:
                        type: string
                      description: list of topics provided by the contract.
                    data:
                      type: string
                      format: byte
                      title: supplied by the contract, usually ABI-encoded
                    block_number:
                      type: string
                      format: uint64
                      title: block in which the transaction was included
                    tx_hash:
                      type: string
                      title: hash of the transaction
                    tx_index:
                      type: string
                      format: uint64
                      title: index of the transaction in the block
                    block_hash:
                      type: string
                      title: hash of the block in which the transaction was included
                    index:
                      type: string
                      format: uint64
                      title: index of the log in the block
                    removed:
                      type: boolean
                      description: >-
                        The Removed field is true if this log was reverted due
                        to a chain

                        reorganisation. You must pay attention to this field if
                        you receive logs

                        through a filter query.
                  description: >-
                    Log represents an protobuf compatible Ethereum Log that
                    defines a contract

                    log event. These events are generated by the LOG opcode and
                    stored/indexed by

                    the node.
                description: >-
                  logs contains the transaction hash and the proto-compatible
                  ethereum

                  logs.
              ret:
                type: string
                format: byte
                title: >-
                  returned data from evm function (result or data supplied with
                  revert

                  opcode)
              vm_error:
                type: string
                title: vm error is the error returned by vm execution
              gas_used:
                type: string
                format: uint64
                title: gas consumed by the transaction
            description: MsgEthereumTxResponse defines the Msg/EthereumTx response type.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: args
          description: same json format as the json rpc api.
          in: query
          required: false
          type: string
          format: byte
        - name: gas_cap
          description: the default gas cap to be used.
          in: query
          required: false
          type: string
          format: uint64
      tags:
        - Query
  /ethermint/evm/v1/params:
    get:
      summary: Params queries the parameters of x/evm module.
      operationId: EvmParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params define the evm module parameters.
                type: object
                properties:
                  evm_denom:
                    type: string
                    description: >-
                      evm denom represents the token denomination used to run
                      the EVM state

                      transitions.
                  enable_create:
                    type: boolean
                    title: >-
                      enable create toggles state transitions that use the
                      vm.Create function
                  enable_call:
                    type: boolean
                    title: >-
                      enable call toggles state transitions that use the vm.Call
                      function
                  extra_eips:
                    type: array
                    items:
                      type: string
                      format: int64
                    title: extra eips defines the additional EIPs for the vm.Config
                  chain_config:
                    title: >-
                      chain config defines the EVM chain configuration
                      parameters
                    type: object
                    properties:
                      homestead_block:
                        type: string
                        title: >-
                          Homestead switch block (nil no fork, 0 = already
                          homestead)
                      dao_fork_block:
                        type: string
                        title: TheDAO hard-fork switch block (nil no fork)
                      dao_fork_support:
                        type: boolean
                        title: >-
                          Whether the nodes supports or opposes the DAO
                          hard-fork
                      eip150_block:
                        type: string
                        title: >-
                          EIP150 implements the Gas price changes

                          (https://github.com/ethereum/EIPs/issues/150) EIP150
                          HF block (nil no fork)
                      eip150_hash:
                        type: string
                        title: >-
                          EIP150 HF hash (needed for header only clients as only
                          gas pricing changed)
                      eip155_block:
                        type: string
                        title: EIP155Block HF block
                      eip158_block:
                        type: string
                        title: EIP158 HF block
                      byzantium_block:
                        type: string
                        title: >-
                          Byzantium switch block (nil no fork, 0 = already on
                          byzantium)
                      constantinople_block:
                        type: string
                        title: >-
                          Constantinople switch block (nil no fork, 0 = already
                          activated)
                      petersburg_block:
                        type: string
                        title: Petersburg switch block (nil same as Constantinople)
                      istanbul_block:
                        type: string
                        title: >-
                          Istanbul switch block (nil no fork, 0 = already on
                          istanbul)
                      muir_glacier_block:
                        type: string
                        title: >-
                          Eip-2384 (bomb delay) switch block (nil no fork, 0 =
                          already activated)
                      berlin_block:
                        type: string
                        title: >-
                          Berlin switch block (nil = no fork, 0 = already on
                          berlin)
                      london_block:
                        type: string
                        title: >-
                          London switch block (nil = no fork, 0 = already on
                          london)
                    description: >-
                      ChainConfig defines the Ethereum ChainConfig parameters
                      using *sdk.Int values

                      instead of *big.Int.
                title: Params defines the EVM module parameters
            description: >-
              QueryParamsResponse defines the response type for querying x/evm
              parameters.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  /ethermint/evm/v1/storage/{address}/{key}:
    get:
      summary: Storage queries the balance of all coins for a single account.
      operationId: Storage
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              value:
                type: string
                description: >-
                  key defines the storage state value hash associated with the
                  given key.
            description: >-
              QueryStorageResponse is the response type for the Query/Storage
              RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: address
          description: >-
            / address is the ethereum hex address to query the storage state
            for.
          in: path
          required: true
          type: string
        - name: key
          description: key defines the key of the storage state
          in: path
          required: true
          type: string
      tags:
        - Query
  /ethermint/evm/v1/trace_block:
    get:
      summary: >-
        TraceBlock implements the `debug_traceBlockByNumber` and
        `debug_traceBlockByHash` rpc api
      operationId: TraceBlock
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              data:
                type: string
                format: byte
            title: QueryTraceBlockResponse defines TraceBlock response
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: trace_config.tracer
          description: custom javascript tracer.
          in: query
          required: false
          type: string
        - name: trace_config.timeout
          description: >-
            overrides the default timeout of 5 seconds for JavaScript-based
            tracing

            calls.
          in: query
          required: false
          type: string
        - name: trace_config.reexec
          description: number of blocks the tracer is willing to go back.
          in: query
          required: false
          type: string
          format: uint64
        - name: trace_config.disable_stack
          description: disable stack capture.
          in: query
          required: false
          type: boolean
        - name: trace_config.disable_storage
          description: disable storage capture.
          in: query
          required: false
          type: boolean
        - name: trace_config.debug
          description: print output during capture end.
          in: query
          required: false
          type: boolean
        - name: trace_config.limit
          description: maximum length of output, but zero means unlimited.
          in: query
          required: false
          type: integer
          format: int32
        - name: trace_config.overrides.homestead_block
          description: Homestead switch block (nil no fork, 0 = already homestead).
          in: query
          required: false
          type: string
        - name: trace_config.overrides.dao_fork_block
          description: TheDAO hard-fork switch block (nil no fork).
          in: query
          required: false
          type: string
        - name: trace_config.overrides.dao_fork_support
          description: Whether the nodes supports or opposes the DAO hard-fork.
          in: query
          required: false
          type: boolean
        - name: trace_config.overrides.eip150_block
          description: >-
            EIP150 implements the Gas price changes

            (https://github.com/ethereum/EIPs/issues/150) EIP150 HF block (nil
            no fork).
          in: query
          required: false
          type: string
        - name: trace_config.overrides.eip150_hash
          description: >-
            EIP150 HF hash (needed for header only clients as only gas pricing
            changed).
          in: query
          required: false
          type: string
        - name: trace_config.overrides.eip155_block
          description: EIP155Block HF block.
          in: query
          required: false
          type: string
        - name: trace_config.overrides.eip158_block
          description: EIP158 HF block.
          in: query
          required: false
          type: string
        - name: trace_config.overrides.byzantium_block
          description: Byzantium switch block (nil no fork, 0 = already on byzantium).
          in: query
          required: false
          type: string
        - name: trace_config.overrides.constantinople_block
          description: Constantinople switch block (nil no fork, 0 = already activated).
          in: query
          required: false
          type: string
        - name: trace_config.overrides.petersburg_block
          description: Petersburg switch block (nil same as Constantinople).
          in: query
          required: false
          type: string
        - name: trace_config.overrides.istanbul_block
          description: Istanbul switch block (nil no fork, 0 = already on istanbul).
          in: query
          required: false
          type: string
        - name: trace_config.overrides.muir_glacier_block
          description: >-
            Eip-2384 (bomb delay) switch block (nil no fork, 0 = already
            activated).
          in: query
          required: false
          type: string
        - name: trace_config.overrides.berlin_block
          description: Berlin switch block (nil = no fork, 0 = already on berlin).
          in: query
          required: false
          type: string
        - name: trace_config.overrides.london_block
          description: London switch block (nil = no fork, 0 = already on london).
          in: query
          required: false
          type: string
        - name: trace_config.enable_memory
          description: enable memory capture.
          in: query
          required: false
          type: boolean
        - name: trace_config.enable_return_data
          description: enable return data capture.
          in: query
          required: false
          type: boolean
        - name: block_number
          description: block number.
          in: query
          required: false
          type: string
          format: int64
        - name: block_hash
          description: block hex hash.
          in: query
          required: false
          type: string
        - name: block_time
          description: block time.
          in: query
          required: false
          type: string
          format: date-time
      tags:
        - Query
  /ethermint/evm/v1/trace_tx:
    get:
      summary: TraceTx implements the `debug_traceTransaction` rpc api
      operationId: TraceTx
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              data:
                type: string
                format: byte
                title: response serialized in bytes
            title: QueryTraceTxResponse defines TraceTx response
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: msg.data.type_url
          description: >-
            A URL/resource name that uniquely identifies the type of the
            serialized

            protocol buffer message. This string must contain at least

            one "/" character. The last segment of the URL's path must represent

            the fully qualified name of the type (as in

            `path/google.protobuf.Duration`). The name should be in a canonical
            form

            (e.g., leading "." is not accepted).


            In practice, teams usually precompile into the binary all types that
            they

            expect it to use in the context of Any. However, for URLs which use
            the

            scheme `http`, `https`, or no scheme, one can optionally set up a
            type

            server that maps type URLs to message definitions as follows:


            * If no scheme is provided, `https` is assumed.

            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
              value in binary format, or produce an error.
            * Applications are allowed to cache lookup results based on the
              URL, or have them precompiled into a binary to avoid any
              lookup. Therefore, binary compatibility needs to be preserved
              on changes to types. (Use versioned type names to manage
              breaking changes.)

            Note: this functionality is not currently available in the official

            protobuf release, and it is not used for type URLs beginning with

            type.googleapis.com.


            Schemes other than `http`, `https` (or the empty scheme) might be

            used with implementation specific semantics.
          in: query
          required: false
          type: string
        - name: msg.data.value
          description: >-
            Must be a valid serialized protocol buffer of the above specified
            type.
          in: query
          required: false
          type: string
          format: byte
        - name: msg.size
          description: encoded storage size of the transaction.
          in: query
          required: false
          type: number
          format: double
        - name: msg.hash
          description: transaction hash in hex format.
          in: query
          required: false
          type: string
        - name: msg.from
          description: |-
            ethereum signer address in hex format. This address value is checked
            against the address derived from the signature (V, R, S) using the
            secp256k1 elliptic curve.
          in: query
          required: false
          type: string
        - name: tx_index
          description: transaction index.
          in: query
          required: false
          type: string
          format: uint64
        - name: trace_config.tracer
          description: custom javascript tracer.
          in: query
          required: false
          type: string
        - name: trace_config.timeout
          description: >-
            overrides the default timeout of 5 seconds for JavaScript-based
            tracing

            calls.
          in: query
          required: false
          type: string
        - name: trace_config.reexec
          description: number of blocks the tracer is willing to go back.
          in: query
          required: false
          type: string
          format: uint64
        - name: trace_config.disable_stack
          description: disable stack capture.
          in: query
          required: false
          type: boolean
        - name: trace_config.disable_storage
          description: disable storage capture.
          in: query
          required: false
          type: boolean
        - name: trace_config.debug
          description: print output during capture end.
          in: query
          required: false
          type: boolean
        - name: trace_config.limit
          description: maximum length of output, but zero means unlimited.
          in: query
          required: false
          type: integer
          format: int32
        - name: trace_config.overrides.homestead_block
          description: Homestead switch block (nil no fork, 0 = already homestead).
          in: query
          required: false
          type: string
        - name: trace_config.overrides.dao_fork_block
          description: TheDAO hard-fork switch block (nil no fork).
          in: query
          required: false
          type: string
        - name: trace_config.overrides.dao_fork_support
          description: Whether the nodes supports or opposes the DAO hard-fork.
          in: query
          required: false
          type: boolean
        - name: trace_config.overrides.eip150_block
          description: >-
            EIP150 implements the Gas price changes

            (https://github.com/ethereum/EIPs/issues/150) EIP150 HF block (nil
            no fork).
          in: query
          required: false
          type: string
        - name: trace_config.overrides.eip150_hash
          description: >-
            EIP150 HF hash (needed for header only clients as only gas pricing
            changed).
          in: query
          required: false
          type: string
        - name: trace_config.overrides.eip155_block
          description: EIP155Block HF block.
          in: query
          required: false
          type: string
        - name: trace_config.overrides.eip158_block
          description: EIP158 HF block.
          in: query
          required: false
          type: string
        - name: trace_config.overrides.byzantium_block
          description: Byzantium switch block (nil no fork, 0 = already on byzantium).
          in: query
          required: false
          type: string
        - name: trace_config.overrides.constantinople_block
          description: Constantinople switch block (nil no fork, 0 = already activated).
          in: query
          required: false
          type: string
        - name: trace_config.overrides.petersburg_block
          description: Petersburg switch block (nil same as Constantinople).
          in: query
          required: false
          type: string
        - name: trace_config.overrides.istanbul_block
          description: Istanbul switch block (nil no fork, 0 = already on istanbul).
          in: query
          required: false
          type: string
        - name: trace_config.overrides.muir_glacier_block
          description: >-
            Eip-2384 (bomb delay) switch block (nil no fork, 0 = already
            activated).
          in: query
          required: false
          type: string
        - name: trace_config.overrides.berlin_block
          description: Berlin switch block (nil = no fork, 0 = already on berlin).
          in: query
          required: false
          type: string
        - name: trace_config.overrides.london_block
          description: London switch block (nil = no fork, 0 = already on london).
          in: query
          required: false
          type: string
        - name: trace_config.enable_memory
          description: enable memory capture.
          in: query
          required: false
          type: boolean
        - name: trace_config.enable_return_data
          description: enable return data capture.
          in: query
          required: false
          type: boolean
        - name: block_number
          description: block number of requested transaction.
          in: query
          required: false
          type: string
          format: int64
        - name: block_hash
          description: block hex hash of requested transaction.
          in: query
          required: false
          type: string
        - name: block_time
          description: block time of requested transaction.
          in: query
          required: false
          type: string
          format: date-time
      tags:
        - Query
  /ethermint/evm/v1/validator_account/{cons_address}:
    get:
      summary: >-
        ValidatorAccount queries an Ethereum account's from a validator
        consensus

        Address.
      operationId: ValidatorAccount
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              account_address:
                type: string
                description: >-
                  account_address is the cosmos address of the account in bech32
                  format.
              sequence:
                type: string
                format: uint64
                description: sequence is the account's sequence number.
              account_number:
                type: string
                format: uint64
                title: account_number is the account number
            description: |-
              QueryValidatorAccountResponse is the response type for the
              Query/ValidatorAccount RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: cons_address
          description: cons_address is the validator cons address to query the account for.
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/auth/v1beta1/accounts:
    get:
      summary: Accounts returns all the existing accounts
      description: 'Since: cosmos-sdk 0.43'
      operationId: Accounts
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              accounts:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                title: accounts are the existing accounts
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryAccountsResponse is the response type for the Query/Accounts
              RPC method.


              Since: cosmos-sdk 0.43
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmos/auth/v1beta1/accounts/{address}:
    get:
      summary: Account returns account details based on address.
      operationId: AuthAccount
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              account:
                type: object
                properties:
                  type_url:
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                  value:
                    type: string
                    format: byte
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := ptypes.MarshalAny(foo)
                       ...
                       foo := &pb.Foo{}
                       if err := ptypes.UnmarshalAny(any, foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
            description: >-
              QueryAccountResponse is the response type for the Query/Account
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: address
          description: address defines the address to query for.
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/auth/v1beta1/params:
    get:
      summary: Params queries all parameters.
      operationId: AuthParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params defines the parameters of the module.
                type: object
                properties:
                  max_memo_characters:
                    type: string
                    format: uint64
                  tx_sig_limit:
                    type: string
                    format: uint64
                  tx_size_cost_per_byte:
                    type: string
                    format: uint64
                  sig_verify_cost_ed25519:
                    type: string
                    format: uint64
                  sig_verify_cost_secp256k1:
                    type: string
                    format: uint64
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  /cosmos/bank/v1beta1/balances/{address}:
    get:
      summary: AllBalances queries the balance of all coins for a single account.
      operationId: AllBalances
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              balances:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                description: balances is the balances of all the coins.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryAllBalancesResponse is the response type for the
              Query/AllBalances RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: address
          description: address is the address to query balances for.
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmos/bank/v1beta1/balances/{address}/by_denom:
    get:
      summary: Balance queries the balance of a single coin for a single account.
      operationId: BankBalance
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              balance:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
            description: >-
              QueryBalanceResponse is the response type for the Query/Balance
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: address
          description: address is the address to query balances for.
          in: path
          required: true
          type: string
        - name: denom
          description: denom is the coin denom to query balances for.
          in: query
          required: false
          type: string
      tags:
        - Query
  /cosmos/bank/v1beta1/denoms_metadata:
    get:
      summary: >-
        DenomsMetadata queries the client metadata for all registered coin
        denominations.
      operationId: DenomsMetadata
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              metadatas:
                type: array
                items:
                  type: object
                  properties:
                    description:
                      type: string
                    denom_units:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                            description: >-
                              denom represents the string name of the given
                              denom unit (e.g uplugcn).
                          exponent:
                            type: integer
                            format: int64
                            description: >-
                              exponent represents power of 10 exponent that one
                              must

                              raise the base_denom to in order to equal the
                              given DenomUnit's denom

                              1 denom = 1^exponent base_denom

                              (e.g. with a base_denom of uplugcn, one can create a
                              DenomUnit of 'plugcn' with

                              exponent = 6, thus: 1 plugcn = 10^6 uplugcn).
                          aliases:
                            type: array
                            items:
                              type: string
                            title: >-
                              aliases is a list of string aliases for the given
                              denom
                        description: |-
                          DenomUnit represents a struct that describes a given
                          denomination unit of the basic token.
                      title: >-
                        denom_units represents the list of DenomUnit's for a
                        given coin
                    base:
                      type: string
                      description: >-
                        base represents the base denom (should be the DenomUnit
                        with exponent = 0).
                    display:
                      type: string
                      description: |-
                        display indicates the suggested denom that should be
                        displayed in clients.
                    name:
                      type: string
                      description: 'Since: cosmos-sdk 0.43'
                      title: 'name defines the name of the token (eg: Cosmos Atom)'
                    symbol:
                      type: string
                      description: >-
                        symbol is the token symbol usually shown on exchanges
                        (eg: ATOM). This can

                        be the same as the display.


                        Since: cosmos-sdk 0.43
                  description: |-
                    Metadata represents a struct that describes
                    a basic token.
                description: >-
                  metadata provides the client information for all the
                  registered tokens.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryDenomsMetadataResponse is the response type for the
              Query/DenomsMetadata RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmos/bank/v1beta1/denoms_metadata/{denom}:
    get:
      summary: DenomsMetadata queries the client metadata of a given coin denomination.
      operationId: DenomMetadata
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              metadata:
                type: object
                properties:
                  description:
                    type: string
                  denom_units:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                          description: >-
                            denom represents the string name of the given denom
                            unit (e.g uplugcn).
                        exponent:
                          type: integer
                          format: int64
                          description: >-
                            exponent represents power of 10 exponent that one
                            must

                            raise the base_denom to in order to equal the given
                            DenomUnit's denom

                            1 denom = 1^exponent base_denom

                            (e.g. with a base_denom of uplugcn, one can create a
                            DenomUnit of 'plugcn' with

                            exponent = 6, thus: 1 plugcn = 10^6 uplugcn).
                        aliases:
                          type: array
                          items:
                            type: string
                          title: >-
                            aliases is a list of string aliases for the given
                            denom
                      description: |-
                        DenomUnit represents a struct that describes a given
                        denomination unit of the basic token.
                    title: >-
                      denom_units represents the list of DenomUnit's for a given
                      coin
                  base:
                    type: string
                    description: >-
                      base represents the base denom (should be the DenomUnit
                      with exponent = 0).
                  display:
                    type: string
                    description: |-
                      display indicates the suggested denom that should be
                      displayed in clients.
                  name:
                    type: string
                    description: 'Since: cosmos-sdk 0.43'
                    title: 'name defines the name of the token (eg: Cosmos Atom)'
                  symbol:
                    type: string
                    description: >-
                      symbol is the token symbol usually shown on exchanges (eg:
                      ATOM). This can

                      be the same as the display.


                      Since: cosmos-sdk 0.43
                description: |-
                  Metadata represents a struct that describes
                  a basic token.
            description: >-
              QueryDenomMetadataResponse is the response type for the
              Query/DenomMetadata RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: denom
          description: denom is the coin denom to query the metadata for.
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/bank/v1beta1/params:
    get:
      summary: Params queries the parameters of x/bank module.
      operationId: BankParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                type: object
                properties:
                  send_enabled:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        enabled:
                          type: boolean
                      description: >-
                        SendEnabled maps coin denom to a send_enabled status
                        (whether a denom is

                        sendable).
                  default_send_enabled:
                    type: boolean
                description: Params defines the parameters for the bank module.
            description: >-
              QueryParamsResponse defines the response type for querying x/bank
              parameters.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /cosmos/bank/v1beta1/supply:
    get:
      summary: TotalSupply queries the total supply of all coins.
      operationId: TotalSupply
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              supply:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                title: supply is the supply of the coins
              pagination:
                description: |-
                  pagination defines the pagination in the response.

                  Since: cosmos-sdk 0.43
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            title: >-
              QueryTotalSupplyResponse is the response type for the
              Query/TotalSupply RPC

              method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmos/bank/v1beta1/supply/{denom}:
    get:
      summary: SupplyOf queries the supply of a single coin.
      operationId: SupplyOf
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              amount:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
            description: >-
              QuerySupplyOfResponse is the response type for the Query/SupplyOf
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: denom
          description: denom is the coin denom to query balances for.
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/distribution/v1beta1/community_pool:
    get:
      summary: CommunityPool queries the community pool coins.
      operationId: CommunityPool
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              pool:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    DecCoin defines a token with a denomination and a decimal
                    amount.


                    NOTE: The amount field is an Dec which implements the custom
                    method

                    signatures required by gogoproto.
                description: pool defines community pool's coins.
            description: >-
              QueryCommunityPoolResponse is the response type for the
              Query/CommunityPool

              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /cosmos/distribution/v1beta1/delegators/{delegator_address}/rewards:
    get:
      summary: |-
        DelegationTotalRewards queries the total rewards accrued by a each
        validator.
      operationId: DelegationTotalRewards
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              rewards:
                type: array
                items:
                  type: object
                  properties:
                    validator_address:
                      type: string
                    reward:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          DecCoin defines a token with a denomination and a
                          decimal amount.


                          NOTE: The amount field is an Dec which implements the
                          custom method

                          signatures required by gogoproto.
                  description: |-
                    DelegationDelegatorReward represents the properties
                    of a delegator's delegation reward.
                description: rewards defines all the rewards accrued by a delegator.
              total:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    DecCoin defines a token with a denomination and a decimal
                    amount.


                    NOTE: The amount field is an Dec which implements the custom
                    method

                    signatures required by gogoproto.
                description: total defines the sum of all the rewards.
            description: |-
              QueryDelegationTotalRewardsResponse is the response type for the
              Query/DelegationTotalRewards RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: delegator_address
          description: delegator_address defines the delegator address to query for.
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/distribution/v1beta1/delegators/{delegator_address}/rewards/{validator_address}:
    get:
      summary: DelegationRewards queries the total rewards accrued by a delegation.
      operationId: DelegationRewards
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              rewards:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    DecCoin defines a token with a denomination and a decimal
                    amount.


                    NOTE: The amount field is an Dec which implements the custom
                    method

                    signatures required by gogoproto.
                description: rewards defines the rewards accrued by a delegation.
            description: |-
              QueryDelegationRewardsResponse is the response type for the
              Query/DelegationRewards RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: delegator_address
          description: delegator_address defines the delegator address to query for.
          in: path
          required: true
          type: string
        - name: validator_address
          description: validator_address defines the validator address to query for.
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/distribution/v1beta1/delegators/{delegator_address}/validators:
    get:
      summary: DelegatorValidators queries the validators of a delegator.
      operationId: DistDelegatorValidators
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              validators:
                type: array
                items:
                  type: string
                description: >-
                  validators defines the validators a delegator is delegating
                  for.
            description: |-
              QueryDelegatorValidatorsResponse is the response type for the
              Query/DelegatorValidators RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: delegator_address
          description: delegator_address defines the delegator address to query for.
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/distribution/v1beta1/delegators/{delegator_address}/withdraw_address:
    get:
      summary: DelegatorWithdrawAddress queries withdraw address of a delegator.
      operationId: DelegatorWithdrawAddress
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              withdraw_address:
                type: string
                description: withdraw_address defines the delegator address to query for.
            description: |-
              QueryDelegatorWithdrawAddressResponse is the response type for the
              Query/DelegatorWithdrawAddress RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: delegator_address
          description: delegator_address defines the delegator address to query for.
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/distribution/v1beta1/params:
    get:
      summary: Params queries params of the distribution module.
      operationId: DistributionParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params defines the parameters of the module.
                type: object
                properties:
                  community_tax:
                    type: string
                  base_proposer_reward:
                    type: string
                  bonus_proposer_reward:
                    type: string
                  withdraw_addr_enabled:
                    type: boolean
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /cosmos/distribution/v1beta1/validators/{validator_address}/commission:
    get:
      summary: ValidatorCommission queries accumulated commission for a validator.
      operationId: ValidatorCommission
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              commission:
                description: commission defines the commision the validator received.
                type: object
                properties:
                  commission:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        DecCoin defines a token with a denomination and a
                        decimal amount.


                        NOTE: The amount field is an Dec which implements the
                        custom method

                        signatures required by gogoproto.
            title: |-
              QueryValidatorCommissionResponse is the response type for the
              Query/ValidatorCommission RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: validator_address
          description: validator_address defines the validator address to query for.
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/distribution/v1beta1/validators/{validator_address}/outstanding_rewards:
    get:
      summary: ValidatorOutstandingRewards queries rewards of a validator address.
      operationId: ValidatorOutstandingRewards
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              rewards:
                type: object
                properties:
                  rewards:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        DecCoin defines a token with a denomination and a
                        decimal amount.


                        NOTE: The amount field is an Dec which implements the
                        custom method

                        signatures required by gogoproto.
                description: >-
                  ValidatorOutstandingRewards represents outstanding
                  (un-withdrawn) rewards

                  for a validator inexpensive to track, allows simple sanity
                  checks.
            description: >-
              QueryValidatorOutstandingRewardsResponse is the response type for
              the

              Query/ValidatorOutstandingRewards RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: validator_address
          description: validator_address defines the validator address to query for.
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/distribution/v1beta1/validators/{validator_address}/slashes:
    get:
      summary: ValidatorSlashes queries slash events of a validator.
      operationId: ValidatorSlashes
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              slashes:
                type: array
                items:
                  type: object
                  properties:
                    validator_period:
                      type: string
                      format: uint64
                    fraction:
                      type: string
                  description: >-
                    ValidatorSlashEvent represents a validator slash event.

                    Height is implicit within the store key.

                    This is needed to calculate appropriate amount of staking
                    tokens

                    for delegations which are withdrawn after a slash has
                    occurred.
                description: slashes defines the slashes the validator received.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: |-
              QueryValidatorSlashesResponse is the response type for the
              Query/ValidatorSlashes RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: validator_address
          description: validator_address defines the validator address to query for.
          in: path
          required: true
          type: string
        - name: starting_height
          description: >-
            starting_height defines the optional starting height to query the
            slashes.
          in: query
          required: false
          type: string
          format: uint64
        - name: ending_height
          description: >-
            starting_height defines the optional ending height to query the
            slashes.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmos/evidence/v1beta1/evidence:
    get:
      summary: AllEvidence queries all evidence.
      operationId: AllEvidence
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              evidence:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                description: evidence returns all evidences.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryAllEvidenceResponse is the response type for the
              Query/AllEvidence RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmos/evidence/v1beta1/evidence/{evidence_hash}:
    get:
      summary: Evidence queries evidence based on evidence hash.
      operationId: Evidence
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              evidence:
                type: object
                properties:
                  type_url:
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                  value:
                    type: string
                    format: byte
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := ptypes.MarshalAny(foo)
                       ...
                       foo := &pb.Foo{}
                       if err := ptypes.UnmarshalAny(any, foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
            description: >-
              QueryEvidenceResponse is the response type for the Query/Evidence
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: evidence_hash
          description: evidence_hash defines the hash of the requested evidence.
          in: path
          required: true
          type: string
          format: byte
      tags:
        - Query
  /cosmos/gov/v1beta1/params/{params_type}:
    get:
      summary: Params queries all parameters of the gov module.
      operationId: GovParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              voting_params:
                description: voting_params defines the parameters related to voting.
                type: object
                properties:
                  voting_period:
                    type: string
                    description: Length of the voting period.
              deposit_params:
                description: deposit_params defines the parameters related to deposit.
                type: object
                properties:
                  min_deposit:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                    description: Minimum deposit for a proposal to enter voting period.
                  max_deposit_period:
                    type: string
                    description: >-
                      Maximum period for Atom holders to deposit on a proposal.
                      Initial value: 2
                       months.
              tally_params:
                description: tally_params defines the parameters related to tally.
                type: object
                properties:
                  quorum:
                    type: string
                    format: byte
                    description: >-
                      Minimum percentage of total stake needed to vote for a
                      result to be
                       considered valid.
                  threshold:
                    type: string
                    format: byte
                    description: >-
                      Minimum proportion of Yes votes for proposal to pass.
                      Default value: 0.5.
                  veto_threshold:
                    type: string
                    format: byte
                    description: >-
                      Minimum value of Veto votes to Total votes ratio for
                      proposal to be
                       vetoed. Default value: 1/3.
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: params_type
          description: >-
            params_type defines which parameters to query for, can be one of
            "voting",

            "tallying" or "deposit".
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/gov/v1beta1/proposals:
    get:
      summary: Proposals queries all proposals based on given status.
      operationId: Proposals
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              proposals:
                type: array
                items:
                  type: object
                  properties:
                    proposal_id:
                      type: string
                      format: uint64
                    content:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                    status:
                      type: string
                      enum:
                        - PROPOSAL_STATUS_UNSPECIFIED
                        - PROPOSAL_STATUS_DEPOSIT_PERIOD
                        - PROPOSAL_STATUS_VOTING_PERIOD
                        - PROPOSAL_STATUS_PASSED
                        - PROPOSAL_STATUS_REJECTED
                        - PROPOSAL_STATUS_FAILED
                      default: PROPOSAL_STATUS_UNSPECIFIED
                      description: >-
                        ProposalStatus enumerates the valid statuses of a
                        proposal.

                         - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.
                         - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
                        period.
                         - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
                        period.
                         - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
                        passed.
                         - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
                        been rejected.
                         - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
                        failed.
                    final_tally_result:
                      type: object
                      properties:
                        'yes':
                          type: string
                        abstain:
                          type: string
                        'no':
                          type: string
                        no_with_veto:
                          type: string
                      description: >-
                        TallyResult defines a standard tally for a governance
                        proposal.
                    submit_time:
                      type: string
                      format: date-time
                    deposit_end_time:
                      type: string
                      format: date-time
                    total_deposit:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                    voting_start_time:
                      type: string
                      format: date-time
                    voting_end_time:
                      type: string
                      format: date-time
                  description: >-
                    Proposal defines the core field members of a governance
                    proposal.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryProposalsResponse is the response type for the
              Query/Proposals RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: proposal_status
          description: |-
            proposal_status defines the status of the proposals.

             - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.
             - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
            period.
             - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
            period.
             - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
            passed.
             - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
            been rejected.
             - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
            failed.
          in: query
          required: false
          type: string
          enum:
            - PROPOSAL_STATUS_UNSPECIFIED
            - PROPOSAL_STATUS_DEPOSIT_PERIOD
            - PROPOSAL_STATUS_VOTING_PERIOD
            - PROPOSAL_STATUS_PASSED
            - PROPOSAL_STATUS_REJECTED
            - PROPOSAL_STATUS_FAILED
          default: PROPOSAL_STATUS_UNSPECIFIED
        - name: voter
          description: voter defines the voter address for the proposals.
          in: query
          required: false
          type: string
        - name: depositor
          description: depositor defines the deposit addresses from the proposals.
          in: query
          required: false
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmos/gov/v1beta1/proposals/{proposal_id}:
    get:
      summary: Proposal queries proposal details based on ProposalID.
      operationId: Proposal
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              proposal:
                type: object
                properties:
                  proposal_id:
                    type: string
                    format: uint64
                  content:
                    type: object
                    properties:
                      type_url:
                        type: string
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                      value:
                        type: string
                        format: byte
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := ptypes.MarshalAny(foo)
                           ...
                           foo := &pb.Foo{}
                           if err := ptypes.UnmarshalAny(any, foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".



                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                  status:
                    type: string
                    enum:
                      - PROPOSAL_STATUS_UNSPECIFIED
                      - PROPOSAL_STATUS_DEPOSIT_PERIOD
                      - PROPOSAL_STATUS_VOTING_PERIOD
                      - PROPOSAL_STATUS_PASSED
                      - PROPOSAL_STATUS_REJECTED
                      - PROPOSAL_STATUS_FAILED
                    default: PROPOSAL_STATUS_UNSPECIFIED
                    description: >-
                      ProposalStatus enumerates the valid statuses of a
                      proposal.

                       - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.
                       - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
                      period.
                       - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
                      period.
                       - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
                      passed.
                       - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
                      been rejected.
                       - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
                      failed.
                  final_tally_result:
                    type: object
                    properties:
                      'yes':
                        type: string
                      abstain:
                        type: string
                      'no':
                        type: string
                      no_with_veto:
                        type: string
                    description: >-
                      TallyResult defines a standard tally for a governance
                      proposal.
                  submit_time:
                    type: string
                    format: date-time
                  deposit_end_time:
                    type: string
                    format: date-time
                  total_deposit:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                  voting_start_time:
                    type: string
                    format: date-time
                  voting_end_time:
                    type: string
                    format: date-time
                description: >-
                  Proposal defines the core field members of a governance
                  proposal.
            description: >-
              QueryProposalResponse is the response type for the Query/Proposal
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: proposal_id
          description: proposal_id defines the unique id of the proposal.
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  /cosmos/gov/v1beta1/proposals/{proposal_id}/deposits:
    get:
      summary: Deposits queries all deposits of a single proposal.
      operationId: Deposits
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              deposits:
                type: array
                items:
                  type: object
                  properties:
                    proposal_id:
                      type: string
                      format: uint64
                    depositor:
                      type: string
                    amount:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                  description: >-
                    Deposit defines an amount deposited by an account address to
                    an active

                    proposal.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryDepositsResponse is the response type for the Query/Deposits
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: proposal_id
          description: proposal_id defines the unique id of the proposal.
          in: path
          required: true
          type: string
          format: uint64
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmos/gov/v1beta1/proposals/{proposal_id}/deposits/{depositor}:
    get:
      summary: >-
        Deposit queries single deposit information based proposalID,
        depositAddr.
      operationId: Deposit
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              deposit:
                type: object
                properties:
                  proposal_id:
                    type: string
                    format: uint64
                  depositor:
                    type: string
                  amount:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                description: >-
                  Deposit defines an amount deposited by an account address to
                  an active

                  proposal.
            description: >-
              QueryDepositResponse is the response type for the Query/Deposit
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: proposal_id
          description: proposal_id defines the unique id of the proposal.
          in: path
          required: true
          type: string
          format: uint64
        - name: depositor
          description: depositor defines the deposit addresses from the proposals.
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/gov/v1beta1/proposals/{proposal_id}/tally:
    get:
      summary: TallyResult queries the tally of a proposal vote.
      operationId: TallyResult
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              tally:
                type: object
                properties:
                  'yes':
                    type: string
                  abstain:
                    type: string
                  'no':
                    type: string
                  no_with_veto:
                    type: string
                description: >-
                  TallyResult defines a standard tally for a governance
                  proposal.
            description: >-
              QueryTallyResultResponse is the response type for the Query/Tally
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: proposal_id
          description: proposal_id defines the unique id of the proposal.
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  /cosmos/gov/v1beta1/proposals/{proposal_id}/votes:
    get:
      summary: Votes queries votes of a given proposal.
      operationId: Votes
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              votes:
                type: array
                items:
                  type: object
                  properties:
                    proposal_id:
                      type: string
                      format: uint64
                    voter:
                      type: string
                    option:
                      description: >-
                        Deprecated: Prefer to use `options` instead. This field
                        is set in queries

                        if and only if `len(options) == 1` and that option has
                        weight 1. In all

                        other cases, this field will default to
                        VOTE_OPTION_UNSPECIFIED.
                      type: string
                      enum:
                        - VOTE_OPTION_UNSPECIFIED
                        - VOTE_OPTION_YES
                        - VOTE_OPTION_ABSTAIN
                        - VOTE_OPTION_NO
                        - VOTE_OPTION_NO_WITH_VETO
                      default: VOTE_OPTION_UNSPECIFIED
                    options:
                      type: array
                      items:
                        type: object
                        properties:
                          option:
                            type: string
                            enum:
                              - VOTE_OPTION_UNSPECIFIED
                              - VOTE_OPTION_YES
                              - VOTE_OPTION_ABSTAIN
                              - VOTE_OPTION_NO
                              - VOTE_OPTION_NO_WITH_VETO
                            default: VOTE_OPTION_UNSPECIFIED
                            description: >-
                              VoteOption enumerates the valid vote options for a
                              given governance proposal.

                               - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
                               - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
                               - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
                               - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
                               - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
                          weight:
                            type: string
                        description: >-
                          WeightedVoteOption defines a unit of vote for vote
                          split.


                          Since: cosmos-sdk 0.43
                      title: 'Since: cosmos-sdk 0.43'
                  description: >-
                    Vote defines a vote on a governance proposal.

                    A Vote consists of a proposal ID, the voter, and the vote
                    option.
                description: votes defined the queried votes.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryVotesResponse is the response type for the Query/Votes RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: proposal_id
          description: proposal_id defines the unique id of the proposal.
          in: path
          required: true
          type: string
          format: uint64
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmos/gov/v1beta1/proposals/{proposal_id}/votes/{voter}:
    get:
      summary: Vote queries voted information based on proposalID, voterAddr.
      operationId: Vote
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              vote:
                type: object
                properties:
                  proposal_id:
                    type: string
                    format: uint64
                  voter:
                    type: string
                  option:
                    description: >-
                      Deprecated: Prefer to use `options` instead. This field is
                      set in queries

                      if and only if `len(options) == 1` and that option has
                      weight 1. In all

                      other cases, this field will default to
                      VOTE_OPTION_UNSPECIFIED.
                    type: string
                    enum:
                      - VOTE_OPTION_UNSPECIFIED
                      - VOTE_OPTION_YES
                      - VOTE_OPTION_ABSTAIN
                      - VOTE_OPTION_NO
                      - VOTE_OPTION_NO_WITH_VETO
                    default: VOTE_OPTION_UNSPECIFIED
                  options:
                    type: array
                    items:
                      type: object
                      properties:
                        option:
                          type: string
                          enum:
                            - VOTE_OPTION_UNSPECIFIED
                            - VOTE_OPTION_YES
                            - VOTE_OPTION_ABSTAIN
                            - VOTE_OPTION_NO
                            - VOTE_OPTION_NO_WITH_VETO
                          default: VOTE_OPTION_UNSPECIFIED
                          description: >-
                            VoteOption enumerates the valid vote options for a
                            given governance proposal.

                             - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
                             - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
                             - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
                             - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
                             - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
                        weight:
                          type: string
                      description: >-
                        WeightedVoteOption defines a unit of vote for vote
                        split.


                        Since: cosmos-sdk 0.43
                    title: 'Since: cosmos-sdk 0.43'
                description: >-
                  Vote defines a vote on a governance proposal.

                  A Vote consists of a proposal ID, the voter, and the vote
                  option.
            description: >-
              QueryVoteResponse is the response type for the Query/Vote RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: proposal_id
          description: proposal_id defines the unique id of the proposal.
          in: path
          required: true
          type: string
          format: uint64
        - name: voter
          description: voter defines the oter address for the proposals.
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/mint/v1beta1/annual_provisions:
    get:
      summary: AnnualProvisions current minting annual provisions value.
      operationId: AnnualProvisions
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              annual_provisions:
                type: string
                format: byte
                description: >-
                  annual_provisions is the current minting annual provisions
                  value.
            description: |-
              QueryAnnualProvisionsResponse is the response type for the
              Query/AnnualProvisions RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /cosmos/mint/v1beta1/inflation:
    get:
      summary: Inflation returns the current minting inflation value.
      operationId: Inflation
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              inflation:
                type: string
                format: byte
                description: inflation is the current minting inflation value.
            description: >-
              QueryInflationResponse is the response type for the
              Query/Inflation RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /cosmos/mint/v1beta1/params:
    get:
      summary: Params returns the total set of minting parameters.
      operationId: MintParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params defines the parameters of the module.
                type: object
                properties:
                  mint_denom:
                    type: string
                    title: type of coin to mint
                  inflation_rate_change:
                    type: string
                    title: maximum annual change in inflation rate
                  inflation_max:
                    type: string
                    title: maximum inflation rate
                  inflation_min:
                    type: string
                    title: minimum inflation rate
                  goal_bonded:
                    type: string
                    title: goal of percent bonded plugcns
                  blocks_per_year:
                    type: string
                    format: uint64
                    title: expected blocks per year
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /cosmos/slashing/v1beta1/params:
    get:
      summary: Params queries the parameters of slashing module
      operationId: SlashingParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                type: object
                properties:
                  signed_blocks_window:
                    type: string
                    format: int64
                  min_signed_per_window:
                    type: string
                    format: byte
                  downtime_jail_duration:
                    type: string
                  slash_fraction_double_sign:
                    type: string
                    format: byte
                  slash_fraction_downtime:
                    type: string
                    format: byte
                description: >-
                  Params represents the parameters used for by the slashing
                  module.
            title: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
  /cosmos/slashing/v1beta1/signing_infos:
    get:
      summary: SigningInfos queries signing info of all validators
      operationId: SigningInfos
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              info:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: string
                    start_height:
                      type: string
                      format: int64
                      title: >-
                        Height at which validator was first a candidate OR was
                        unjailed
                    index_offset:
                      type: string
                      format: int64
                      description: >-
                        Index which is incremented each time the validator was a
                        bonded

                        in a block and may have signed a precommit or not. This
                        in conjunction with the

                        `SignedBlocksWindow` param determines the index in the
                        `MissedBlocksBitArray`.
                    jailed_until:
                      type: string
                      format: date-time
                      description: >-
                        Timestamp until which the validator is jailed due to
                        liveness downtime.
                    tombstoned:
                      type: boolean
                      description: >-
                        Whether or not a validator has been tombstoned (killed
                        out of validator set). It is set

                        once the validator commits an equivocation or for any
                        other configured misbehiavor.
                    missed_blocks_counter:
                      type: string
                      format: int64
                      description: >-
                        A counter kept to avoid unnecessary array reads.

                        Note that `Sum(MissedBlocksBitArray)` always equals
                        `MissedBlocksCounter`.
                  description: >-
                    ValidatorSigningInfo defines a validator's signing info for
                    monitoring their

                    liveness activity.
                title: info is the signing info of all validators
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
            title: >-
              QuerySigningInfosResponse is the response type for the
              Query/SigningInfos RPC

              method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmos/slashing/v1beta1/signing_infos/{cons_address}:
    get:
      summary: SigningInfo queries the signing info of given cons address
      operationId: SigningInfo
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              val_signing_info:
                type: object
                properties:
                  address:
                    type: string
                  start_height:
                    type: string
                    format: int64
                    title: >-
                      Height at which validator was first a candidate OR was
                      unjailed
                  index_offset:
                    type: string
                    format: int64
                    description: >-
                      Index which is incremented each time the validator was a
                      bonded

                      in a block and may have signed a precommit or not. This in
                      conjunction with the

                      `SignedBlocksWindow` param determines the index in the
                      `MissedBlocksBitArray`.
                  jailed_until:
                    type: string
                    format: date-time
                    description: >-
                      Timestamp until which the validator is jailed due to
                      liveness downtime.
                  tombstoned:
                    type: boolean
                    description: >-
                      Whether or not a validator has been tombstoned (killed out
                      of validator set). It is set

                      once the validator commits an equivocation or for any
                      other configured misbehiavor.
                  missed_blocks_counter:
                    type: string
                    format: int64
                    description: >-
                      A counter kept to avoid unnecessary array reads.

                      Note that `Sum(MissedBlocksBitArray)` always equals
                      `MissedBlocksCounter`.
                description: >-
                  ValidatorSigningInfo defines a validator's signing info for
                  monitoring their

                  liveness activity.
                title: >-
                  val_signing_info is the signing info of requested val cons
                  address
            title: >-
              QuerySigningInfoResponse is the response type for the
              Query/SigningInfo RPC

              method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: cons_address
          description: cons_address is the address to query signing info of
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/staking/v1beta1/delegations/{delegator_addr}:
    get:
      summary: >-
        DelegatorDelegations queries all delegations of a given delegator
        address.
      operationId: DelegatorDelegations
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              delegation_responses:
                type: array
                items:
                  type: object
                  properties:
                    delegation:
                      type: object
                      properties:
                        delegator_address:
                          type: string
                          description: >-
                            delegator_address is the bech32-encoded address of
                            the delegator.
                        validator_address:
                          type: string
                          description: >-
                            validator_address is the bech32-encoded address of
                            the validator.
                        shares:
                          type: string
                          description: shares define the delegation shares received.
                      description: >-
                        Delegation represents the bond with tokens held by an
                        account. It is

                        owned by one delegator, and is associated with the
                        voting power of one

                        validator.
                    balance:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                  description: >-
                    DelegationResponse is equivalent to Delegation except that
                    it contains a

                    balance in addition to shares which is more suitable for
                    client responses.
                description: >-
                  delegation_responses defines all the delegations' info of a
                  delegator.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: |-
              QueryDelegatorDelegationsResponse is response type for the
              Query/DelegatorDelegations RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: delegator_addr
          description: delegator_addr defines the delegator address to query for.
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmos/staking/v1beta1/delegators/{delegator_addr}/redelegations:
    get:
      summary: Redelegations queries redelegations of given address.
      operationId: Redelegations
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              redelegation_responses:
                type: array
                items:
                  type: object
                  properties:
                    redelegation:
                      type: object
                      properties:
                        delegator_address:
                          type: string
                          description: >-
                            delegator_address is the bech32-encoded address of
                            the delegator.
                        validator_src_address:
                          type: string
                          description: >-
                            validator_src_address is the validator redelegation
                            source operator address.
                        validator_dst_address:
                          type: string
                          description: >-
                            validator_dst_address is the validator redelegation
                            destination operator address.
                        entries:
                          type: array
                          items:
                            type: object
                            properties:
                              creation_height:
                                type: string
                                format: int64
                                description: >-
                                  creation_height  defines the height which the
                                  redelegation took place.
                              completion_time:
                                type: string
                                format: date-time
                                description: >-
                                  completion_time defines the unix time for
                                  redelegation completion.
                              initial_balance:
                                type: string
                                description: >-
                                  initial_balance defines the initial balance
                                  when redelegation started.
                              shares_dst:
                                type: string
                                description: >-
                                  shares_dst is the amount of
                                  destination-validator shares created by
                                  redelegation.
                            description: >-
                              RedelegationEntry defines a redelegation object
                              with relevant metadata.
                          description: entries are the redelegation entries.
                      description: >-
                        Redelegation contains the list of a particular
                        delegator's redelegating bonds

                        from a particular source validator to a particular
                        destination validator.
                    entries:
                      type: array
                      items:
                        type: object
                        properties:
                          redelegation_entry:
                            type: object
                            properties:
                              creation_height:
                                type: string
                                format: int64
                                description: >-
                                  creation_height  defines the height which the
                                  redelegation took place.
                              completion_time:
                                type: string
                                format: date-time
                                description: >-
                                  completion_time defines the unix time for
                                  redelegation completion.
                              initial_balance:
                                type: string
                                description: >-
                                  initial_balance defines the initial balance
                                  when redelegation started.
                              shares_dst:
                                type: string
                                description: >-
                                  shares_dst is the amount of
                                  destination-validator shares created by
                                  redelegation.
                            description: >-
                              RedelegationEntry defines a redelegation object
                              with relevant metadata.
                          balance:
                            type: string
                        description: >-
                          RedelegationEntryResponse is equivalent to a
                          RedelegationEntry except that it

                          contains a balance in addition to shares which is more
                          suitable for client

                          responses.
                  description: >-
                    RedelegationResponse is equivalent to a Redelegation except
                    that its entries

                    contain a balance in addition to shares which is more
                    suitable for client

                    responses.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryRedelegationsResponse is response type for the
              Query/Redelegations RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: delegator_addr
          description: delegator_addr defines the delegator address to query for.
          in: path
          required: true
          type: string
        - name: src_validator_addr
          description: src_validator_addr defines the validator address to redelegate from.
          in: query
          required: false
          type: string
        - name: dst_validator_addr
          description: dst_validator_addr defines the validator address to redelegate to.
          in: query
          required: false
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmos/staking/v1beta1/delegators/{delegator_addr}/unbonding_delegations:
    get:
      summary: >-
        DelegatorUnbondingDelegations queries all unbonding delegations of a
        given

        delegator address.
      operationId: DelegatorUnbondingDelegations
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              unbonding_responses:
                type: array
                items:
                  type: object
                  properties:
                    delegator_address:
                      type: string
                      description: >-
                        delegator_address is the bech32-encoded address of the
                        delegator.
                    validator_address:
                      type: string
                      description: >-
                        validator_address is the bech32-encoded address of the
                        validator.
                    entries:
                      type: array
                      items:
                        type: object
                        properties:
                          creation_height:
                            type: string
                            format: int64
                            description: >-
                              creation_height is the height which the unbonding
                              took place.
                          completion_time:
                            type: string
                            format: date-time
                            description: >-
                              completion_time is the unix time for unbonding
                              completion.
                          initial_balance:
                            type: string
                            description: >-
                              initial_balance defines the tokens initially
                              scheduled to receive at completion.
                          balance:
                            type: string
                            description: >-
                              balance defines the tokens to receive at
                              completion.
                        description: >-
                          UnbondingDelegationEntry defines an unbonding object
                          with relevant metadata.
                      description: entries are the unbonding delegation entries.
                  description: >-
                    UnbondingDelegation stores all of a single delegator's
                    unbonding bonds

                    for a single validator in an time-ordered list.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryUnbondingDelegatorDelegationsResponse is response type for
              the

              Query/UnbondingDelegatorDelegations RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: delegator_addr
          description: delegator_addr defines the delegator address to query for.
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmos/staking/v1beta1/delegators/{delegator_addr}/validators:
    get:
      summary: |-
        DelegatorValidators queries all validators info for given delegator
        address.
      operationId: StakingDelegatorValidators
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              validators:
                type: array
                items:
                  type: object
                  properties:
                    operator_address:
                      type: string
                      description: >-
                        operator_address defines the address of the validator's
                        operator; bech encoded in JSON.
                    consensus_pubkey:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                    jailed:
                      type: boolean
                      description: >-
                        jailed defined whether the validator has been jailed
                        from bonded status or not.
                    status:
                      description: >-
                        status is the validator status
                        (bonded/unbonding/unbonded).
                      type: string
                      enum:
                        - BOND_STATUS_UNSPECIFIED
                        - BOND_STATUS_UNBONDED
                        - BOND_STATUS_UNBONDING
                        - BOND_STATUS_BONDED
                      default: BOND_STATUS_UNSPECIFIED
                    tokens:
                      type: string
                      description: >-
                        tokens define the delegated tokens (incl.
                        self-delegation).
                    delegator_shares:
                      type: string
                      description: >-
                        delegator_shares defines total shares issued to a
                        validator's delegators.
                    description:
                      description: >-
                        description defines the description terms for the
                        validator.
                      type: object
                      properties:
                        moniker:
                          type: string
                          description: >-
                            moniker defines a human-readable name for the
                            validator.
                        identity:
                          type: string
                          description: >-
                            identity defines an optional identity signature (ex.
                            UPort or Keybase).
                        website:
                          type: string
                          description: website defines an optional website link.
                        security_contact:
                          type: string
                          description: >-
                            security_contact defines an optional email for
                            security contact.
                        details:
                          type: string
                          description: details define other optional details.
                    unbonding_height:
                      type: string
                      format: int64
                      description: >-
                        unbonding_height defines, if unbonding, the height at
                        which this validator has begun unbonding.
                    unbonding_time:
                      type: string
                      format: date-time
                      description: >-
                        unbonding_time defines, if unbonding, the min time for
                        the validator to complete unbonding.
                    commission:
                      description: commission defines the commission parameters.
                      type: object
                      properties:
                        commission_rates:
                          description: >-
                            commission_rates defines the initial commission
                            rates to be used for creating a validator.
                          type: object
                          properties:
                            rate:
                              type: string
                              description: >-
                                rate is the commission rate charged to
                                delegators, as a fraction.
                            max_rate:
                              type: string
                              description: >-
                                max_rate defines the maximum commission rate
                                which validator can ever charge, as a fraction.
                            max_change_rate:
                              type: string
                              description: >-
                                max_change_rate defines the maximum daily
                                increase of the validator commission, as a
                                fraction.
                        update_time:
                          type: string
                          format: date-time
                          description: >-
                            update_time is the last time the commission rate was
                            changed.
                    min_self_delegation:
                      type: string
                      description: >-
                        min_self_delegation is the validator's self declared
                        minimum self delegation.
                  description: >-
                    Validator defines a validator, together with the total
                    amount of the

                    Validator's bond shares and their exchange rate to coins.
                    Slashing results in

                    a decrease in the exchange rate, allowing correct
                    calculation of future

                    undelegations without iterating over delegators. When coins
                    are delegated to

                    this validator, the validator is credited with a delegation
                    whose number of

                    bond shares is based on the amount of coins delegated
                    divided by the current

                    exchange rate. Voting power can be calculated as total
                    bonded shares

                    multiplied by exchange rate.
                description: validators defines the the validators' info of a delegator.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: |-
              QueryDelegatorValidatorsResponse is response type for the
              Query/DelegatorValidators RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: delegator_addr
          description: delegator_addr defines the delegator address to query for.
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmos/staking/v1beta1/delegators/{delegator_addr}/validators/{validator_addr}:
    get:
      summary: |-
        DelegatorValidator queries validator info for given delegator validator
        pair.
      operationId: DelegatorValidator
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              validator:
                type: object
                properties:
                  operator_address:
                    type: string
                    description: >-
                      operator_address defines the address of the validator's
                      operator; bech encoded in JSON.
                  consensus_pubkey:
                    type: object
                    properties:
                      type_url:
                        type: string
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                      value:
                        type: string
                        format: byte
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := ptypes.MarshalAny(foo)
                           ...
                           foo := &pb.Foo{}
                           if err := ptypes.UnmarshalAny(any, foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".



                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                  jailed:
                    type: boolean
                    description: >-
                      jailed defined whether the validator has been jailed from
                      bonded status or not.
                  status:
                    description: >-
                      status is the validator status
                      (bonded/unbonding/unbonded).
                    type: string
                    enum:
                      - BOND_STATUS_UNSPECIFIED
                      - BOND_STATUS_UNBONDED
                      - BOND_STATUS_UNBONDING
                      - BOND_STATUS_BONDED
                    default: BOND_STATUS_UNSPECIFIED
                  tokens:
                    type: string
                    description: >-
                      tokens define the delegated tokens (incl.
                      self-delegation).
                  delegator_shares:
                    type: string
                    description: >-
                      delegator_shares defines total shares issued to a
                      validator's delegators.
                  description:
                    description: >-
                      description defines the description terms for the
                      validator.
                    type: object
                    properties:
                      moniker:
                        type: string
                        description: >-
                          moniker defines a human-readable name for the
                          validator.
                      identity:
                        type: string
                        description: >-
                          identity defines an optional identity signature (ex.
                          UPort or Keybase).
                      website:
                        type: string
                        description: website defines an optional website link.
                      security_contact:
                        type: string
                        description: >-
                          security_contact defines an optional email for
                          security contact.
                      details:
                        type: string
                        description: details define other optional details.
                  unbonding_height:
                    type: string
                    format: int64
                    description: >-
                      unbonding_height defines, if unbonding, the height at
                      which this validator has begun unbonding.
                  unbonding_time:
                    type: string
                    format: date-time
                    description: >-
                      unbonding_time defines, if unbonding, the min time for the
                      validator to complete unbonding.
                  commission:
                    description: commission defines the commission parameters.
                    type: object
                    properties:
                      commission_rates:
                        description: >-
                          commission_rates defines the initial commission rates
                          to be used for creating a validator.
                        type: object
                        properties:
                          rate:
                            type: string
                            description: >-
                              rate is the commission rate charged to delegators,
                              as a fraction.
                          max_rate:
                            type: string
                            description: >-
                              max_rate defines the maximum commission rate which
                              validator can ever charge, as a fraction.
                          max_change_rate:
                            type: string
                            description: >-
                              max_change_rate defines the maximum daily increase
                              of the validator commission, as a fraction.
                      update_time:
                        type: string
                        format: date-time
                        description: >-
                          update_time is the last time the commission rate was
                          changed.
                  min_self_delegation:
                    type: string
                    description: >-
                      min_self_delegation is the validator's self declared
                      minimum self delegation.
                description: >-
                  Validator defines a validator, together with the total amount
                  of the

                  Validator's bond shares and their exchange rate to coins.
                  Slashing results in

                  a decrease in the exchange rate, allowing correct calculation
                  of future

                  undelegations without iterating over delegators. When coins
                  are delegated to

                  this validator, the validator is credited with a delegation
                  whose number of

                  bond shares is based on the amount of coins delegated divided
                  by the current

                  exchange rate. Voting power can be calculated as total bonded
                  shares

                  multiplied by exchange rate.
            description: |-
              QueryDelegatorValidatorResponse response type for the
              Query/DelegatorValidator RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: delegator_addr
          description: delegator_addr defines the delegator address to query for.
          in: path
          required: true
          type: string
        - name: validator_addr
          description: validator_addr defines the validator address to query for.
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/staking/v1beta1/historical_info/{height}:
    get:
      summary: HistoricalInfo queries the historical info for given height.
      operationId: HistoricalInfo
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              hist:
                description: hist defines the historical info at the given height.
                type: object
                properties:
                  header:
                    type: object
                    properties:
                      version:
                        title: basic block info
                        type: object
                        properties:
                          block:
                            type: string
                            format: uint64
                          app:
                            type: string
                            format: uint64
                        description: >-
                          Consensus captures the consensus rules for processing
                          a block in the blockchain,

                          including all blockchain data structures and the rules
                          of the application's

                          state transition machine.
                      chain_id:
                        type: string
                      height:
                        type: string
                        format: int64
                      time:
                        type: string
                        format: date-time
                      last_block_id:
                        title: prev block info
                        type: object
                        properties:
                          hash:
                            type: string
                            format: byte
                          part_set_header:
                            type: object
                            properties:
                              total:
                                type: integer
                                format: int64
                              hash:
                                type: string
                                format: byte
                            title: PartsetHeader
                      last_commit_hash:
                        type: string
                        format: byte
                        title: hashes of block data
                      data_hash:
                        type: string
                        format: byte
                      validators_hash:
                        type: string
                        format: byte
                        title: hashes from the app output from the prev block
                      next_validators_hash:
                        type: string
                        format: byte
                      consensus_hash:
                        type: string
                        format: byte
                      app_hash:
                        type: string
                        format: byte
                      last_results_hash:
                        type: string
                        format: byte
                      evidence_hash:
                        type: string
                        format: byte
                        title: consensus info
                      proposer_address:
                        type: string
                        format: byte
                    description: Header defines the structure of a Tendermint block header.
                  valset:
                    type: array
                    items:
                      type: object
                      properties:
                        operator_address:
                          type: string
                          description: >-
                            operator_address defines the address of the
                            validator's operator; bech encoded in JSON.
                        consensus_pubkey:
                          type: object
                          properties:
                            type_url:
                              type: string
                              description: >-
                                A URL/resource name that uniquely identifies the
                                type of the serialized

                                protocol buffer message. This string must
                                contain at least

                                one "/" character. The last segment of the URL's
                                path must represent

                                the fully qualified name of the type (as in

                                `path/google.protobuf.Duration`). The name
                                should be in a canonical form

                                (e.g., leading "." is not accepted).


                                In practice, teams usually precompile into the
                                binary all types that they

                                expect it to use in the context of Any. However,
                                for URLs which use the

                                scheme `http`, `https`, or no scheme, one can
                                optionally set up a type

                                server that maps type URLs to message
                                definitions as follows:


                                * If no scheme is provided, `https` is assumed.

                                * An HTTP GET on the URL must yield a
                                [google.protobuf.Type][]
                                  value in binary format, or produce an error.
                                * Applications are allowed to cache lookup
                                results based on the
                                  URL, or have them precompiled into a binary to avoid any
                                  lookup. Therefore, binary compatibility needs to be preserved
                                  on changes to types. (Use versioned type names to manage
                                  breaking changes.)

                                Note: this functionality is not currently
                                available in the official

                                protobuf release, and it is not used for type
                                URLs beginning with

                                type.googleapis.com.


                                Schemes other than `http`, `https` (or the empty
                                scheme) might be

                                used with implementation specific semantics.
                            value:
                              type: string
                              format: byte
                              description: >-
                                Must be a valid serialized protocol buffer of
                                the above specified type.
                          description: >-
                            `Any` contains an arbitrary serialized protocol
                            buffer message along with a

                            URL that describes the type of the serialized
                            message.


                            Protobuf library provides support to pack/unpack Any
                            values in the form

                            of utility functions or additional generated methods
                            of the Any type.


                            Example 1: Pack and unpack a message in C++.

                                Foo foo = ...;
                                Any any;
                                any.PackFrom(foo);
                                ...
                                if (any.UnpackTo(&foo)) {
                                  ...
                                }

                            Example 2: Pack and unpack a message in Java.

                                Foo foo = ...;
                                Any any = Any.pack(foo);
                                ...
                                if (any.is(Foo.class)) {
                                  foo = any.unpack(Foo.class);
                                }

                             Example 3: Pack and unpack a message in Python.

                                foo = Foo(...)
                                any = Any()
                                any.Pack(foo)
                                ...
                                if any.Is(Foo.DESCRIPTOR):
                                  any.Unpack(foo)
                                  ...

                             Example 4: Pack and unpack a message in Go

                                 foo := &pb.Foo{...}
                                 any, err := ptypes.MarshalAny(foo)
                                 ...
                                 foo := &pb.Foo{}
                                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                                   ...
                                 }

                            The pack methods provided by protobuf library will
                            by default use

                            'type.googleapis.com/full.type.name' as the type URL
                            and the unpack

                            methods only use the fully qualified type name after
                            the last '/'

                            in the type URL, for example "foo.bar.com/x/y.z"
                            will yield type

                            name "y.z".



                            JSON

                            ====

                            The JSON representation of an `Any` value uses the
                            regular

                            representation of the deserialized, embedded
                            message, with an

                            additional field `@type` which contains the type
                            URL. Example:

                                package google.profile;
                                message Person {
                                  string first_name = 1;
                                  string last_name = 2;
                                }

                                {
                                  "@type": "type.googleapis.com/google.profile.Person",
                                  "firstName": <string>,
                                  "lastName": <string>
                                }

                            If the embedded message type is well-known and has a
                            custom JSON

                            representation, that representation will be embedded
                            adding a field

                            `value` which holds the custom JSON in addition to
                            the `@type`

                            field. Example (for message
                            [google.protobuf.Duration][]):

                                {
                                  "@type": "type.googleapis.com/google.protobuf.Duration",
                                  "value": "1.212s"
                                }
                        jailed:
                          type: boolean
                          description: >-
                            jailed defined whether the validator has been jailed
                            from bonded status or not.
                        status:
                          description: >-
                            status is the validator status
                            (bonded/unbonding/unbonded).
                          type: string
                          enum:
                            - BOND_STATUS_UNSPECIFIED
                            - BOND_STATUS_UNBONDED
                            - BOND_STATUS_UNBONDING
                            - BOND_STATUS_BONDED
                          default: BOND_STATUS_UNSPECIFIED
                        tokens:
                          type: string
                          description: >-
                            tokens define the delegated tokens (incl.
                            self-delegation).
                        delegator_shares:
                          type: string
                          description: >-
                            delegator_shares defines total shares issued to a
                            validator's delegators.
                        description:
                          description: >-
                            description defines the description terms for the
                            validator.
                          type: object
                          properties:
                            moniker:
                              type: string
                              description: >-
                                moniker defines a human-readable name for the
                                validator.
                            identity:
                              type: string
                              description: >-
                                identity defines an optional identity signature
                                (ex. UPort or Keybase).
                            website:
                              type: string
                              description: website defines an optional website link.
                            security_contact:
                              type: string
                              description: >-
                                security_contact defines an optional email for
                                security contact.
                            details:
                              type: string
                              description: details define other optional details.
                        unbonding_height:
                          type: string
                          format: int64
                          description: >-
                            unbonding_height defines, if unbonding, the height
                            at which this validator has begun unbonding.
                        unbonding_time:
                          type: string
                          format: date-time
                          description: >-
                            unbonding_time defines, if unbonding, the min time
                            for the validator to complete unbonding.
                        commission:
                          description: commission defines the commission parameters.
                          type: object
                          properties:
                            commission_rates:
                              description: >-
                                commission_rates defines the initial commission
                                rates to be used for creating a validator.
                              type: object
                              properties:
                                rate:
                                  type: string
                                  description: >-
                                    rate is the commission rate charged to
                                    delegators, as a fraction.
                                max_rate:
                                  type: string
                                  description: >-
                                    max_rate defines the maximum commission rate
                                    which validator can ever charge, as a
                                    fraction.
                                max_change_rate:
                                  type: string
                                  description: >-
                                    max_change_rate defines the maximum daily
                                    increase of the validator commission, as a
                                    fraction.
                            update_time:
                              type: string
                              format: date-time
                              description: >-
                                update_time is the last time the commission rate
                                was changed.
                        min_self_delegation:
                          type: string
                          description: >-
                            min_self_delegation is the validator's self declared
                            minimum self delegation.
                      description: >-
                        Validator defines a validator, together with the total
                        amount of the

                        Validator's bond shares and their exchange rate to
                        coins. Slashing results in

                        a decrease in the exchange rate, allowing correct
                        calculation of future

                        undelegations without iterating over delegators. When
                        coins are delegated to

                        this validator, the validator is credited with a
                        delegation whose number of

                        bond shares is based on the amount of coins delegated
                        divided by the current

                        exchange rate. Voting power can be calculated as total
                        bonded shares

                        multiplied by exchange rate.
            description: >-
              QueryHistoricalInfoResponse is response type for the
              Query/HistoricalInfo RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: height
          description: height defines at which height to query the historical info.
          in: path
          required: true
          type: string
          format: int64
      tags:
        - Query
  /cosmos/staking/v1beta1/params:
    get:
      summary: Parameters queries the staking parameters.
      operationId: StakingParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params holds all the parameters of this module.
                type: object
                properties:
                  unbonding_time:
                    type: string
                    description: unbonding_time is the time duration of unbonding.
                  max_validators:
                    type: integer
                    format: int64
                    description: max_validators is the maximum number of validators.
                  max_entries:
                    type: integer
                    format: int64
                    description: >-
                      max_entries is the max entries for either unbonding
                      delegation or redelegation (per pair/trio).
                  historical_entries:
                    type: integer
                    format: int64
                    description: >-
                      historical_entries is the number of historical entries to
                      persist.
                  bond_denom:
                    type: string
                    description: bond_denom defines the bondable coin denomination.
            description: >-
              QueryParamsResponse is response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  /cosmos/staking/v1beta1/pool:
    get:
      summary: Pool queries the pool info.
      operationId: Pool
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              pool:
                description: pool defines the pool info.
                type: object
                properties:
                  not_bonded_tokens:
                    type: string
                  bonded_tokens:
                    type: string
            description: QueryPoolResponse is response type for the Query/Pool RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  /cosmos/staking/v1beta1/validators:
    get:
      summary: Validators queries all validators that match the given status.
      operationId: Validators
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              validators:
                type: array
                items:
                  type: object
                  properties:
                    operator_address:
                      type: string
                      description: >-
                        operator_address defines the address of the validator's
                        operator; bech encoded in JSON.
                    consensus_pubkey:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                    jailed:
                      type: boolean
                      description: >-
                        jailed defined whether the validator has been jailed
                        from bonded status or not.
                    status:
                      description: >-
                        status is the validator status
                        (bonded/unbonding/unbonded).
                      type: string
                      enum:
                        - BOND_STATUS_UNSPECIFIED
                        - BOND_STATUS_UNBONDED
                        - BOND_STATUS_UNBONDING
                        - BOND_STATUS_BONDED
                      default: BOND_STATUS_UNSPECIFIED
                    tokens:
                      type: string
                      description: >-
                        tokens define the delegated tokens (incl.
                        self-delegation).
                    delegator_shares:
                      type: string
                      description: >-
                        delegator_shares defines total shares issued to a
                        validator's delegators.
                    description:
                      description: >-
                        description defines the description terms for the
                        validator.
                      type: object
                      properties:
                        moniker:
                          type: string
                          description: >-
                            moniker defines a human-readable name for the
                            validator.
                        identity:
                          type: string
                          description: >-
                            identity defines an optional identity signature (ex.
                            UPort or Keybase).
                        website:
                          type: string
                          description: website defines an optional website link.
                        security_contact:
                          type: string
                          description: >-
                            security_contact defines an optional email for
                            security contact.
                        details:
                          type: string
                          description: details define other optional details.
                    unbonding_height:
                      type: string
                      format: int64
                      description: >-
                        unbonding_height defines, if unbonding, the height at
                        which this validator has begun unbonding.
                    unbonding_time:
                      type: string
                      format: date-time
                      description: >-
                        unbonding_time defines, if unbonding, the min time for
                        the validator to complete unbonding.
                    commission:
                      description: commission defines the commission parameters.
                      type: object
                      properties:
                        commission_rates:
                          description: >-
                            commission_rates defines the initial commission
                            rates to be used for creating a validator.
                          type: object
                          properties:
                            rate:
                              type: string
                              description: >-
                                rate is the commission rate charged to
                                delegators, as a fraction.
                            max_rate:
                              type: string
                              description: >-
                                max_rate defines the maximum commission rate
                                which validator can ever charge, as a fraction.
                            max_change_rate:
                              type: string
                              description: >-
                                max_change_rate defines the maximum daily
                                increase of the validator commission, as a
                                fraction.
                        update_time:
                          type: string
                          format: date-time
                          description: >-
                            update_time is the last time the commission rate was
                            changed.
                    min_self_delegation:
                      type: string
                      description: >-
                        min_self_delegation is the validator's self declared
                        minimum self delegation.
                  description: >-
                    Validator defines a validator, together with the total
                    amount of the

                    Validator's bond shares and their exchange rate to coins.
                    Slashing results in

                    a decrease in the exchange rate, allowing correct
                    calculation of future

                    undelegations without iterating over delegators. When coins
                    are delegated to

                    this validator, the validator is credited with a delegation
                    whose number of

                    bond shares is based on the amount of coins delegated
                    divided by the current

                    exchange rate. Voting power can be calculated as total
                    bonded shares

                    multiplied by exchange rate.
                description: validators contains all the queried validators.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            title: >-
              QueryValidatorsResponse is response type for the Query/Validators
              RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: status
          description: status enables to query for validators matching a given status.
          in: query
          required: false
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmos/staking/v1beta1/validators/{validator_addr}:
    get:
      summary: Validator queries validator info for given validator address.
      operationId: Validator
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              validator:
                type: object
                properties:
                  operator_address:
                    type: string
                    description: >-
                      operator_address defines the address of the validator's
                      operator; bech encoded in JSON.
                  consensus_pubkey:
                    type: object
                    properties:
                      type_url:
                        type: string
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                      value:
                        type: string
                        format: byte
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := ptypes.MarshalAny(foo)
                           ...
                           foo := &pb.Foo{}
                           if err := ptypes.UnmarshalAny(any, foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".



                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                  jailed:
                    type: boolean
                    description: >-
                      jailed defined whether the validator has been jailed from
                      bonded status or not.
                  status:
                    description: >-
                      status is the validator status
                      (bonded/unbonding/unbonded).
                    type: string
                    enum:
                      - BOND_STATUS_UNSPECIFIED
                      - BOND_STATUS_UNBONDED
                      - BOND_STATUS_UNBONDING
                      - BOND_STATUS_BONDED
                    default: BOND_STATUS_UNSPECIFIED
                  tokens:
                    type: string
                    description: >-
                      tokens define the delegated tokens (incl.
                      self-delegation).
                  delegator_shares:
                    type: string
                    description: >-
                      delegator_shares defines total shares issued to a
                      validator's delegators.
                  description:
                    description: >-
                      description defines the description terms for the
                      validator.
                    type: object
                    properties:
                      moniker:
                        type: string
                        description: >-
                          moniker defines a human-readable name for the
                          validator.
                      identity:
                        type: string
                        description: >-
                          identity defines an optional identity signature (ex.
                          UPort or Keybase).
                      website:
                        type: string
                        description: website defines an optional website link.
                      security_contact:
                        type: string
                        description: >-
                          security_contact defines an optional email for
                          security contact.
                      details:
                        type: string
                        description: details define other optional details.
                  unbonding_height:
                    type: string
                    format: int64
                    description: >-
                      unbonding_height defines, if unbonding, the height at
                      which this validator has begun unbonding.
                  unbonding_time:
                    type: string
                    format: date-time
                    description: >-
                      unbonding_time defines, if unbonding, the min time for the
                      validator to complete unbonding.
                  commission:
                    description: commission defines the commission parameters.
                    type: object
                    properties:
                      commission_rates:
                        description: >-
                          commission_rates defines the initial commission rates
                          to be used for creating a validator.
                        type: object
                        properties:
                          rate:
                            type: string
                            description: >-
                              rate is the commission rate charged to delegators,
                              as a fraction.
                          max_rate:
                            type: string
                            description: >-
                              max_rate defines the maximum commission rate which
                              validator can ever charge, as a fraction.
                          max_change_rate:
                            type: string
                            description: >-
                              max_change_rate defines the maximum daily increase
                              of the validator commission, as a fraction.
                      update_time:
                        type: string
                        format: date-time
                        description: >-
                          update_time is the last time the commission rate was
                          changed.
                  min_self_delegation:
                    type: string
                    description: >-
                      min_self_delegation is the validator's self declared
                      minimum self delegation.
                description: >-
                  Validator defines a validator, together with the total amount
                  of the

                  Validator's bond shares and their exchange rate to coins.
                  Slashing results in

                  a decrease in the exchange rate, allowing correct calculation
                  of future

                  undelegations without iterating over delegators. When coins
                  are delegated to

                  this validator, the validator is credited with a delegation
                  whose number of

                  bond shares is based on the amount of coins delegated divided
                  by the current

                  exchange rate. Voting power can be calculated as total bonded
                  shares

                  multiplied by exchange rate.
            title: >-
              QueryValidatorResponse is response type for the Query/Validator
              RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: validator_addr
          description: validator_addr defines the validator address to query for.
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/staking/v1beta1/validators/{validator_addr}/delegations:
    get:
      summary: ValidatorDelegations queries delegate info for given validator.
      operationId: ValidatorDelegations
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              delegation_responses:
                type: array
                items:
                  type: object
                  properties:
                    delegation:
                      type: object
                      properties:
                        delegator_address:
                          type: string
                          description: >-
                            delegator_address is the bech32-encoded address of
                            the delegator.
                        validator_address:
                          type: string
                          description: >-
                            validator_address is the bech32-encoded address of
                            the validator.
                        shares:
                          type: string
                          description: shares define the delegation shares received.
                      description: >-
                        Delegation represents the bond with tokens held by an
                        account. It is

                        owned by one delegator, and is associated with the
                        voting power of one

                        validator.
                    balance:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                  description: >-
                    DelegationResponse is equivalent to Delegation except that
                    it contains a

                    balance in addition to shares which is more suitable for
                    client responses.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            title: |-
              QueryValidatorDelegationsResponse is response type for the
              Query/ValidatorDelegations RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: validator_addr
          description: validator_addr defines the validator address to query for.
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}:
    get:
      summary: Delegation queries delegate info for given validator delegator pair.
      operationId: Delegation
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              delegation_response:
                type: object
                properties:
                  delegation:
                    type: object
                    properties:
                      delegator_address:
                        type: string
                        description: >-
                          delegator_address is the bech32-encoded address of the
                          delegator.
                      validator_address:
                        type: string
                        description: >-
                          validator_address is the bech32-encoded address of the
                          validator.
                      shares:
                        type: string
                        description: shares define the delegation shares received.
                    description: >-
                      Delegation represents the bond with tokens held by an
                      account. It is

                      owned by one delegator, and is associated with the voting
                      power of one

                      validator.
                  balance:
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                    description: >-
                      Coin defines a token with a denomination and an amount.


                      NOTE: The amount field is an Int which implements the
                      custom method

                      signatures required by gogoproto.
                description: >-
                  DelegationResponse is equivalent to Delegation except that it
                  contains a

                  balance in addition to shares which is more suitable for
                  client responses.
            description: >-
              QueryDelegationResponse is response type for the Query/Delegation
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: validator_addr
          description: validator_addr defines the validator address to query for.
          in: path
          required: true
          type: string
        - name: delegator_addr
          description: delegator_addr defines the delegator address to query for.
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}/unbonding_delegation:
    get:
      summary: |-
        UnbondingDelegation queries unbonding info for given validator delegator
        pair.
      operationId: UnbondingDelegation
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              unbond:
                type: object
                properties:
                  delegator_address:
                    type: string
                    description: >-
                      delegator_address is the bech32-encoded address of the
                      delegator.
                  validator_address:
                    type: string
                    description: >-
                      validator_address is the bech32-encoded address of the
                      validator.
                  entries:
                    type: array
                    items:
                      type: object
                      properties:
                        creation_height:
                          type: string
                          format: int64
                          description: >-
                            creation_height is the height which the unbonding
                            took place.
                        completion_time:
                          type: string
                          format: date-time
                          description: >-
                            completion_time is the unix time for unbonding
                            completion.
                        initial_balance:
                          type: string
                          description: >-
                            initial_balance defines the tokens initially
                            scheduled to receive at completion.
                        balance:
                          type: string
                          description: balance defines the tokens to receive at completion.
                      description: >-
                        UnbondingDelegationEntry defines an unbonding object
                        with relevant metadata.
                    description: entries are the unbonding delegation entries.
                description: >-
                  UnbondingDelegation stores all of a single delegator's
                  unbonding bonds

                  for a single validator in an time-ordered list.
            description: >-
              QueryDelegationResponse is response type for the
              Query/UnbondingDelegation

              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: validator_addr
          description: validator_addr defines the validator address to query for.
          in: path
          required: true
          type: string
        - name: delegator_addr
          description: delegator_addr defines the delegator address to query for.
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/staking/v1beta1/validators/{validator_addr}/unbonding_delegations:
    get:
      summary: >-
        ValidatorUnbondingDelegations queries unbonding delegations of a
        validator.
      operationId: ValidatorUnbondingDelegations
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              unbonding_responses:
                type: array
                items:
                  type: object
                  properties:
                    delegator_address:
                      type: string
                      description: >-
                        delegator_address is the bech32-encoded address of the
                        delegator.
                    validator_address:
                      type: string
                      description: >-
                        validator_address is the bech32-encoded address of the
                        validator.
                    entries:
                      type: array
                      items:
                        type: object
                        properties:
                          creation_height:
                            type: string
                            format: int64
                            description: >-
                              creation_height is the height which the unbonding
                              took place.
                          completion_time:
                            type: string
                            format: date-time
                            description: >-
                              completion_time is the unix time for unbonding
                              completion.
                          initial_balance:
                            type: string
                            description: >-
                              initial_balance defines the tokens initially
                              scheduled to receive at completion.
                          balance:
                            type: string
                            description: >-
                              balance defines the tokens to receive at
                              completion.
                        description: >-
                          UnbondingDelegationEntry defines an unbonding object
                          with relevant metadata.
                      description: entries are the unbonding delegation entries.
                  description: >-
                    UnbondingDelegation stores all of a single delegator's
                    unbonding bonds

                    for a single validator in an time-ordered list.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryValidatorUnbondingDelegationsResponse is response type for
              the

              Query/ValidatorUnbondingDelegations RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: validator_addr
          description: validator_addr defines the validator address to query for.
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmos/tx/v1beta1/simulate:
    post:
      summary: Simulate simulates executing a transaction for estimating gas usage.
      operationId: Simulate
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              gas_info:
                description: gas_info is the information about gas used in the simulation.
                type: object
                properties:
                  gas_wanted:
                    type: string
                    format: uint64
                    description: >-
                      GasWanted is the maximum units of work we allow this tx to
                      perform.
                  gas_used:
                    type: string
                    format: uint64
                    description: GasUsed is the amount of gas actually consumed.
              result:
                description: result is the result of the simulation.
                type: object
                properties:
                  data:
                    type: string
                    format: byte
                    description: >-
                      Data is any data returned from message or handler
                      execution. It MUST be

                      length prefixed in order to separate data from multiple
                      message executions.
                  log:
                    type: string
                    description: >-
                      Log contains the log information from message or handler
                      execution.
                  events:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                        attributes:
                          type: array
                          items:
                            type: object
                            properties:
                              key:
                                type: string
                                format: byte
                              value:
                                type: string
                                format: byte
                              index:
                                type: boolean
                            description: >-
                              EventAttribute is a single key-value pair,
                              associated with an event.
                      description: >-
                        Event allows application developers to attach additional
                        information to

                        ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx
                        and ResponseDeliverTx.

                        Later, transactions may be queried using these events.
                    description: >-
                      Events contains a slice of Event objects that were emitted
                      during message

                      or handler execution.
            description: |-
              SimulateResponse is the response type for the
              Service.SimulateRPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/cosmos.tx.v1beta1.SimulateRequest'
      tags:
        - Service
  /cosmos/tx/v1beta1/txs:
    get:
      summary: GetTxsEvent fetches txs by event.
      operationId: GetTxsEvent
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/cosmos.tx.v1beta1.GetTxsEventResponse'
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: events
          description: events is the list of transaction event type.
          in: query
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
        - name: order_by
          description: |2-
             - ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults to ASC in this case.
             - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order
             - ORDER_BY_DESC: ORDER_BY_DESC defines descending order
          in: query
          required: false
          type: string
          enum:
            - ORDER_BY_UNSPECIFIED
            - ORDER_BY_ASC
            - ORDER_BY_DESC
          default: ORDER_BY_UNSPECIFIED
      tags:
        - Service
    post:
      summary: BroadcastTx broadcast transaction.
      operationId: BroadcastTx
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              tx_response:
                type: object
                properties:
                  height:
                    type: string
                    format: int64
                    title: The block height
                  txhash:
                    type: string
                    description: The transaction hash.
                  codespace:
                    type: string
                    title: Namespace for the Code
                  code:
                    type: integer
                    format: int64
                    description: Response code.
                  data:
                    type: string
                    description: Result bytes, if any.
                  raw_log:
                    type: string
                    description: >-
                      The output of the application's logger (raw string). May
                      be

                      non-deterministic.
                  logs:
                    type: array
                    items:
                      type: object
                      properties:
                        msg_index:
                          type: integer
                          format: int64
                        log:
                          type: string
                        events:
                          type: array
                          items:
                            type: object
                            properties:
                              type:
                                type: string
                              attributes:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    key:
                                      type: string
                                    value:
                                      type: string
                                  description: >-
                                    Attribute defines an attribute wrapper where
                                    the key and value are

                                    strings instead of raw bytes.
                            description: >-
                              StringEvent defines en Event object wrapper where
                              all the attributes

                              contain key/value pairs that are strings instead
                              of raw bytes.
                          description: >-
                            Events contains a slice of Event objects that were
                            emitted during some

                            execution.
                      description: >-
                        ABCIMessageLog defines a structure containing an indexed
                        tx ABCI message log.
                    description: >-
                      The output of the application's logger (typed). May be
                      non-deterministic.
                  info:
                    type: string
                    description: Additional information. May be non-deterministic.
                  gas_wanted:
                    type: string
                    format: int64
                    description: Amount of gas requested for transaction.
                  gas_used:
                    type: string
                    format: int64
                    description: Amount of gas consumed by transaction.
                  tx:
                    type: object
                    properties:
                      type_url:
                        type: string
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                      value:
                        type: string
                        format: byte
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := ptypes.MarshalAny(foo)
                           ...
                           foo := &pb.Foo{}
                           if err := ptypes.UnmarshalAny(any, foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".



                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                  timestamp:
                    type: string
                    description: >-
                      Time of the previous block. For heights > 1, it's the
                      weighted median of

                      the timestamps of the valid votes in the block.LastCommit.
                      For height == 1,

                      it's genesis time.
                  events:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                        attributes:
                          type: array
                          items:
                            type: object
                            properties:
                              key:
                                type: string
                                format: byte
                              value:
                                type: string
                                format: byte
                              index:
                                type: boolean
                            description: >-
                              EventAttribute is a single key-value pair,
                              associated with an event.
                      description: >-
                        Event allows application developers to attach additional
                        information to

                        ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx
                        and ResponseDeliverTx.

                        Later, transactions may be queried using these events.
                    description: >-
                      Events defines all the events emitted by processing a
                      transaction. Note,

                      these events include those emitted by processing all the
                      messages and those

                      emitted from the ante handler. Whereas Logs contains the
                      events, with

                      additional metadata, emitted only by processing the
                      messages.


                      Since: cosmos-sdk 0.42.11, 0.44.5, 0.45
                description: >-
                  TxResponse defines a structure containing relevant tx data and
                  metadata. The

                  tags are stringified and the log is JSON decoded.
            description: |-
              BroadcastTxResponse is the response type for the
              Service.BroadcastTx method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              tx_bytes:
                type: string
                format: byte
                description: tx_bytes is the raw transaction.
              mode:
                type: string
                enum:
                  - BROADCAST_MODE_UNSPECIFIED
                  - BROADCAST_MODE_BLOCK
                  - BROADCAST_MODE_SYNC
                  - BROADCAST_MODE_ASYNC
                default: BROADCAST_MODE_UNSPECIFIED
                description: >-
                  BroadcastMode specifies the broadcast mode for the
                  TxService.Broadcast RPC method.

                   - BROADCAST_MODE_UNSPECIFIED: zero-value for mode ordering
                   - BROADCAST_MODE_BLOCK: BROADCAST_MODE_BLOCK defines a tx broadcasting mode where the client waits for
                  the tx to be committed in a block.
                   - BROADCAST_MODE_SYNC: BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits for
                  a CheckTx execution response only.
                   - BROADCAST_MODE_ASYNC: BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client returns
                  immediately.
            description: >-
              BroadcastTxRequest is the request type for the
              Service.BroadcastTxRequest

              RPC method.
      tags:
        - Service
  /cosmos/tx/v1beta1/txs/{hash}:
    get:
      summary: GetTx fetches a tx by hash.
      operationId: GetTx
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/cosmos.tx.v1beta1.GetTxResponse'
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: hash
          description: hash is the tx hash to query, encoded as a hex string.
          in: path
          required: true
          type: string
      tags:
        - Service
  /cosmos/base/tendermint/v1beta1/blocks/latest:
    get:
      summary: GetLatestBlock returns the latest block.
      operationId: GetLatestBlock
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              block:
                type: object
                properties:
                  header:
                    type: object
                    properties:
                      version:
                        title: basic block info
                        type: object
                        properties:
                          block:
                            type: string
                            format: uint64
                          app:
                            type: string
                            format: uint64
                        description: >-
                          Consensus captures the consensus rules for processing
                          a block in the blockchain,

                          including all blockchain data structures and the rules
                          of the application's

                          state transition machine.
                      chain_id:
                        type: string
                      height:
                        type: string
                        format: int64
                      time:
                        type: string
                        format: date-time
                      last_block_id:
                        type: object
                        properties:
                          hash:
                            type: string
                            format: byte
                          part_set_header:
                            type: object
                            properties:
                              total:
                                type: integer
                                format: int64
                              hash:
                                type: string
                                format: byte
                            title: PartsetHeader
                        title: BlockID
                      last_commit_hash:
                        type: string
                        format: byte
                        title: hashes of block data
                      data_hash:
                        type: string
                        format: byte
                      validators_hash:
                        type: string
                        format: byte
                        title: hashes from the app output from the prev block
                      next_validators_hash:
                        type: string
                        format: byte
                      consensus_hash:
                        type: string
                        format: byte
                      app_hash:
                        type: string
                        format: byte
                      last_results_hash:
                        type: string
                        format: byte
                      evidence_hash:
                        type: string
                        format: byte
                        title: consensus info
                      proposer_address:
                        type: string
                        format: byte
                    description: Header defines the structure of a Tendermint block header.
                  data:
                    type: object
                    properties:
                      txs:
                        type: array
                        items:
                          type: string
                          format: byte
                        description: >-
                          Txs that will be applied by state @ block.Height+1.

                          NOTE: not all txs here are valid.  We're just agreeing
                          on the order first.

                          This means that block.AppHash does not include these
                          txs.
                    title: >-
                      Data contains the set of transactions included in the
                      block
                  evidence:
                    type: object
                    properties:
                      evidence:
                        type: array
                        items:
                          type: object
                          properties:
                            duplicate_vote_evidence:
                              type: object
                              properties:
                                vote_a:
                                  type: object
                                  properties:
                                    type:
                                      type: string
                                      enum:
                                        - SIGNED_MSG_TYPE_UNKNOWN
                                        - SIGNED_MSG_TYPE_PREVOTE
                                        - SIGNED_MSG_TYPE_PRECOMMIT
                                        - SIGNED_MSG_TYPE_PROPOSAL
                                      default: SIGNED_MSG_TYPE_UNKNOWN
                                      description: >-
                                        SignedMsgType is a type of signed
                                        message in the consensus.

                                         - SIGNED_MSG_TYPE_PREVOTE: Votes
                                         - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                                    height:
                                      type: string
                                      format: int64
                                    round:
                                      type: integer
                                      format: int32
                                    block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                    timestamp:
                                      type: string
                                      format: date-time
                                    validator_address:
                                      type: string
                                      format: byte
                                    validator_index:
                                      type: integer
                                      format: int32
                                    signature:
                                      type: string
                                      format: byte
                                  description: >-
                                    Vote represents a prevote, precommit, or
                                    commit vote from validators for

                                    consensus.
                                vote_b:
                                  type: object
                                  properties:
                                    type:
                                      type: string
                                      enum:
                                        - SIGNED_MSG_TYPE_UNKNOWN
                                        - SIGNED_MSG_TYPE_PREVOTE
                                        - SIGNED_MSG_TYPE_PRECOMMIT
                                        - SIGNED_MSG_TYPE_PROPOSAL
                                      default: SIGNED_MSG_TYPE_UNKNOWN
                                      description: >-
                                        SignedMsgType is a type of signed
                                        message in the consensus.

                                         - SIGNED_MSG_TYPE_PREVOTE: Votes
                                         - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                                    height:
                                      type: string
                                      format: int64
                                    round:
                                      type: integer
                                      format: int32
                                    block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                    timestamp:
                                      type: string
                                      format: date-time
                                    validator_address:
                                      type: string
                                      format: byte
                                    validator_index:
                                      type: integer
                                      format: int32
                                    signature:
                                      type: string
                                      format: byte
                                  description: >-
                                    Vote represents a prevote, precommit, or
                                    commit vote from validators for

                                    consensus.
                                total_voting_power:
                                  type: string
                                  format: int64
                                validator_power:
                                  type: string
                                  format: int64
                                timestamp:
                                  type: string
                                  format: date-time
                              description: >-
                                DuplicateVoteEvidence contains evidence of a
                                validator signed two conflicting votes.
                            light_client_attack_evidence:
                              type: object
                              properties:
                                conflicting_block:
                                  type: object
                                  properties:
                                    signed_header:
                                      type: object
                                      properties:
                                        header:
                                          type: object
                                          properties:
                                            version:
                                              title: basic block info
                                              type: object
                                              properties:
                                                block:
                                                  type: string
                                                  format: uint64
                                                app:
                                                  type: string
                                                  format: uint64
                                              description: >-
                                                Consensus captures the consensus rules
                                                for processing a block in the
                                                blockchain,

                                                including all blockchain data structures
                                                and the rules of the application's

                                                state transition machine.
                                            chain_id:
                                              type: string
                                            height:
                                              type: string
                                              format: int64
                                            time:
                                              type: string
                                              format: date-time
                                            last_block_id:
                                              type: object
                                              properties:
                                                hash:
                                                  type: string
                                                  format: byte
                                                part_set_header:
                                                  type: object
                                                  properties:
                                                    total:
                                                      type: integer
                                                      format: int64
                                                    hash:
                                                      type: string
                                                      format: byte
                                                  title: PartsetHeader
                                              title: BlockID
                                            last_commit_hash:
                                              type: string
                                              format: byte
                                              title: hashes of block data
                                            data_hash:
                                              type: string
                                              format: byte
                                            validators_hash:
                                              type: string
                                              format: byte
                                              title: >-
                                                hashes from the app output from the prev
                                                block
                                            next_validators_hash:
                                              type: string
                                              format: byte
                                            consensus_hash:
                                              type: string
                                              format: byte
                                            app_hash:
                                              type: string
                                              format: byte
                                            last_results_hash:
                                              type: string
                                              format: byte
                                            evidence_hash:
                                              type: string
                                              format: byte
                                              title: consensus info
                                            proposer_address:
                                              type: string
                                              format: byte
                                          description: >-
                                            Header defines the structure of a
                                            Tendermint block header.
                                        commit:
                                          type: object
                                          properties:
                                            height:
                                              type: string
                                              format: int64
                                            round:
                                              type: integer
                                              format: int32
                                            block_id:
                                              type: object
                                              properties:
                                                hash:
                                                  type: string
                                                  format: byte
                                                part_set_header:
                                                  type: object
                                                  properties:
                                                    total:
                                                      type: integer
                                                      format: int64
                                                    hash:
                                                      type: string
                                                      format: byte
                                                  title: PartsetHeader
                                              title: BlockID
                                            signatures:
                                              type: array
                                              items:
                                                type: object
                                                properties:
                                                  block_id_flag:
                                                    type: string
                                                    enum:
                                                      - BLOCK_ID_FLAG_UNKNOWN
                                                      - BLOCK_ID_FLAG_ABSENT
                                                      - BLOCK_ID_FLAG_COMMIT
                                                      - BLOCK_ID_FLAG_NIL
                                                    default: BLOCK_ID_FLAG_UNKNOWN
                                                    title: >-
                                                      BlockIdFlag indicates which BlcokID the
                                                      signature is for
                                                  validator_address:
                                                    type: string
                                                    format: byte
                                                  timestamp:
                                                    type: string
                                                    format: date-time
                                                  signature:
                                                    type: string
                                                    format: byte
                                                description: >-
                                                  CommitSig is a part of the Vote included
                                                  in a Commit.
                                          description: >-
                                            Commit contains the evidence that a
                                            block was committed by a set of
                                            validators.
                                    validator_set:
                                      type: object
                                      properties:
                                        validators:
                                          type: array
                                          items:
                                            type: object
                                            properties:
                                              address:
                                                type: string
                                                format: byte
                                              pub_key:
                                                type: object
                                                properties:
                                                  ed25519:
                                                    type: string
                                                    format: byte
                                                  secp256k1:
                                                    type: string
                                                    format: byte
                                                title: >-
                                                  PublicKey defines the keys available for
                                                  use with Tendermint Validators
                                              voting_power:
                                                type: string
                                                format: int64
                                              proposer_priority:
                                                type: string
                                                format: int64
                                        proposer:
                                          type: object
                                          properties:
                                            address:
                                              type: string
                                              format: byte
                                            pub_key:
                                              type: object
                                              properties:
                                                ed25519:
                                                  type: string
                                                  format: byte
                                                secp256k1:
                                                  type: string
                                                  format: byte
                                              title: >-
                                                PublicKey defines the keys available for
                                                use with Tendermint Validators
                                            voting_power:
                                              type: string
                                              format: int64
                                            proposer_priority:
                                              type: string
                                              format: int64
                                        total_voting_power:
                                          type: string
                                          format: int64
                                common_height:
                                  type: string
                                  format: int64
                                byzantine_validators:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      address:
                                        type: string
                                        format: byte
                                      pub_key:
                                        type: object
                                        properties:
                                          ed25519:
                                            type: string
                                            format: byte
                                          secp256k1:
                                            type: string
                                            format: byte
                                        title: >-
                                          PublicKey defines the keys available for
                                          use with Tendermint Validators
                                      voting_power:
                                        type: string
                                        format: int64
                                      proposer_priority:
                                        type: string
                                        format: int64
                                total_voting_power:
                                  type: string
                                  format: int64
                                timestamp:
                                  type: string
                                  format: date-time
                              description: >-
                                LightClientAttackEvidence contains evidence of a
                                set of validators attempting to mislead a light
                                client.
                  last_commit:
                    type: object
                    properties:
                      height:
                        type: string
                        format: int64
                      round:
                        type: integer
                        format: int32
                      block_id:
                        type: object
                        properties:
                          hash:
                            type: string
                            format: byte
                          part_set_header:
                            type: object
                            properties:
                              total:
                                type: integer
                                format: int64
                              hash:
                                type: string
                                format: byte
                            title: PartsetHeader
                        title: BlockID
                      signatures:
                        type: array
                        items:
                          type: object
                          properties:
                            block_id_flag:
                              type: string
                              enum:
                                - BLOCK_ID_FLAG_UNKNOWN
                                - BLOCK_ID_FLAG_ABSENT
                                - BLOCK_ID_FLAG_COMMIT
                                - BLOCK_ID_FLAG_NIL
                              default: BLOCK_ID_FLAG_UNKNOWN
                              title: >-
                                BlockIdFlag indicates which BlcokID the
                                signature is for
                            validator_address:
                              type: string
                              format: byte
                            timestamp:
                              type: string
                              format: date-time
                            signature:
                              type: string
                              format: byte
                          description: >-
                            CommitSig is a part of the Vote included in a
                            Commit.
                    description: >-
                      Commit contains the evidence that a block was committed by
                      a set of validators.
            description: >-
              GetLatestBlockResponse is the response type for the
              Query/GetLatestBlock RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Service
  /cosmos/base/tendermint/v1beta1/blocks/{height}:
    get:
      summary: GetBlockByHeight queries block for given height.
      operationId: GetBlockByHeight
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              block:
                type: object
                properties:
                  header:
                    type: object
                    properties:
                      version:
                        title: basic block info
                        type: object
                        properties:
                          block:
                            type: string
                            format: uint64
                          app:
                            type: string
                            format: uint64
                        description: >-
                          Consensus captures the consensus rules for processing
                          a block in the blockchain,

                          including all blockchain data structures and the rules
                          of the application's

                          state transition machine.
                      chain_id:
                        type: string
                      height:
                        type: string
                        format: int64
                      time:
                        type: string
                        format: date-time
                      last_block_id:
                        type: object
                        properties:
                          hash:
                            type: string
                            format: byte
                          part_set_header:
                            type: object
                            properties:
                              total:
                                type: integer
                                format: int64
                              hash:
                                type: string
                                format: byte
                            title: PartsetHeader
                        title: BlockID
                      last_commit_hash:
                        type: string
                        format: byte
                        title: hashes of block data
                      data_hash:
                        type: string
                        format: byte
                      validators_hash:
                        type: string
                        format: byte
                        title: hashes from the app output from the prev block
                      next_validators_hash:
                        type: string
                        format: byte
                      consensus_hash:
                        type: string
                        format: byte
                      app_hash:
                        type: string
                        format: byte
                      last_results_hash:
                        type: string
                        format: byte
                      evidence_hash:
                        type: string
                        format: byte
                        title: consensus info
                      proposer_address:
                        type: string
                        format: byte
                    description: Header defines the structure of a Tendermint block header.
                  data:
                    type: object
                    properties:
                      txs:
                        type: array
                        items:
                          type: string
                          format: byte
                        description: >-
                          Txs that will be applied by state @ block.Height+1.

                          NOTE: not all txs here are valid.  We're just agreeing
                          on the order first.

                          This means that block.AppHash does not include these
                          txs.
                    title: >-
                      Data contains the set of transactions included in the
                      block
                  evidence:
                    type: object
                    properties:
                      evidence:
                        type: array
                        items:
                          type: object
                          properties:
                            duplicate_vote_evidence:
                              type: object
                              properties:
                                vote_a:
                                  type: object
                                  properties:
                                    type:
                                      type: string
                                      enum:
                                        - SIGNED_MSG_TYPE_UNKNOWN
                                        - SIGNED_MSG_TYPE_PREVOTE
                                        - SIGNED_MSG_TYPE_PRECOMMIT
                                        - SIGNED_MSG_TYPE_PROPOSAL
                                      default: SIGNED_MSG_TYPE_UNKNOWN
                                      description: >-
                                        SignedMsgType is a type of signed
                                        message in the consensus.

                                         - SIGNED_MSG_TYPE_PREVOTE: Votes
                                         - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                                    height:
                                      type: string
                                      format: int64
                                    round:
                                      type: integer
                                      format: int32
                                    block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                    timestamp:
                                      type: string
                                      format: date-time
                                    validator_address:
                                      type: string
                                      format: byte
                                    validator_index:
                                      type: integer
                                      format: int32
                                    signature:
                                      type: string
                                      format: byte
                                  description: >-
                                    Vote represents a prevote, precommit, or
                                    commit vote from validators for

                                    consensus.
                                vote_b:
                                  type: object
                                  properties:
                                    type:
                                      type: string
                                      enum:
                                        - SIGNED_MSG_TYPE_UNKNOWN
                                        - SIGNED_MSG_TYPE_PREVOTE
                                        - SIGNED_MSG_TYPE_PRECOMMIT
                                        - SIGNED_MSG_TYPE_PROPOSAL
                                      default: SIGNED_MSG_TYPE_UNKNOWN
                                      description: >-
                                        SignedMsgType is a type of signed
                                        message in the consensus.

                                         - SIGNED_MSG_TYPE_PREVOTE: Votes
                                         - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                                    height:
                                      type: string
                                      format: int64
                                    round:
                                      type: integer
                                      format: int32
                                    block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                    timestamp:
                                      type: string
                                      format: date-time
                                    validator_address:
                                      type: string
                                      format: byte
                                    validator_index:
                                      type: integer
                                      format: int32
                                    signature:
                                      type: string
                                      format: byte
                                  description: >-
                                    Vote represents a prevote, precommit, or
                                    commit vote from validators for

                                    consensus.
                                total_voting_power:
                                  type: string
                                  format: int64
                                validator_power:
                                  type: string
                                  format: int64
                                timestamp:
                                  type: string
                                  format: date-time
                              description: >-
                                DuplicateVoteEvidence contains evidence of a
                                validator signed two conflicting votes.
                            light_client_attack_evidence:
                              type: object
                              properties:
                                conflicting_block:
                                  type: object
                                  properties:
                                    signed_header:
                                      type: object
                                      properties:
                                        header:
                                          type: object
                                          properties:
                                            version:
                                              title: basic block info
                                              type: object
                                              properties:
                                                block:
                                                  type: string
                                                  format: uint64
                                                app:
                                                  type: string
                                                  format: uint64
                                              description: >-
                                                Consensus captures the consensus rules
                                                for processing a block in the
                                                blockchain,

                                                including all blockchain data structures
                                                and the rules of the application's

                                                state transition machine.
                                            chain_id:
                                              type: string
                                            height:
                                              type: string
                                              format: int64
                                            time:
                                              type: string
                                              format: date-time
                                            last_block_id:
                                              type: object
                                              properties:
                                                hash:
                                                  type: string
                                                  format: byte
                                                part_set_header:
                                                  type: object
                                                  properties:
                                                    total:
                                                      type: integer
                                                      format: int64
                                                    hash:
                                                      type: string
                                                      format: byte
                                                  title: PartsetHeader
                                              title: BlockID
                                            last_commit_hash:
                                              type: string
                                              format: byte
                                              title: hashes of block data
                                            data_hash:
                                              type: string
                                              format: byte
                                            validators_hash:
                                              type: string
                                              format: byte
                                              title: >-
                                                hashes from the app output from the prev
                                                block
                                            next_validators_hash:
                                              type: string
                                              format: byte
                                            consensus_hash:
                                              type: string
                                              format: byte
                                            app_hash:
                                              type: string
                                              format: byte
                                            last_results_hash:
                                              type: string
                                              format: byte
                                            evidence_hash:
                                              type: string
                                              format: byte
                                              title: consensus info
                                            proposer_address:
                                              type: string
                                              format: byte
                                          description: >-
                                            Header defines the structure of a
                                            Tendermint block header.
                                        commit:
                                          type: object
                                          properties:
                                            height:
                                              type: string
                                              format: int64
                                            round:
                                              type: integer
                                              format: int32
                                            block_id:
                                              type: object
                                              properties:
                                                hash:
                                                  type: string
                                                  format: byte
                                                part_set_header:
                                                  type: object
                                                  properties:
                                                    total:
                                                      type: integer
                                                      format: int64
                                                    hash:
                                                      type: string
                                                      format: byte
                                                  title: PartsetHeader
                                              title: BlockID
                                            signatures:
                                              type: array
                                              items:
                                                type: object
                                                properties:
                                                  block_id_flag:
                                                    type: string
                                                    enum:
                                                      - BLOCK_ID_FLAG_UNKNOWN
                                                      - BLOCK_ID_FLAG_ABSENT
                                                      - BLOCK_ID_FLAG_COMMIT
                                                      - BLOCK_ID_FLAG_NIL
                                                    default: BLOCK_ID_FLAG_UNKNOWN
                                                    title: >-
                                                      BlockIdFlag indicates which BlcokID the
                                                      signature is for
                                                  validator_address:
                                                    type: string
                                                    format: byte
                                                  timestamp:
                                                    type: string
                                                    format: date-time
                                                  signature:
                                                    type: string
                                                    format: byte
                                                description: >-
                                                  CommitSig is a part of the Vote included
                                                  in a Commit.
                                          description: >-
                                            Commit contains the evidence that a
                                            block was committed by a set of
                                            validators.
                                    validator_set:
                                      type: object
                                      properties:
                                        validators:
                                          type: array
                                          items:
                                            type: object
                                            properties:
                                              address:
                                                type: string
                                                format: byte
                                              pub_key:
                                                type: object
                                                properties:
                                                  ed25519:
                                                    type: string
                                                    format: byte
                                                  secp256k1:
                                                    type: string
                                                    format: byte
                                                title: >-
                                                  PublicKey defines the keys available for
                                                  use with Tendermint Validators
                                              voting_power:
                                                type: string
                                                format: int64
                                              proposer_priority:
                                                type: string
                                                format: int64
                                        proposer:
                                          type: object
                                          properties:
                                            address:
                                              type: string
                                              format: byte
                                            pub_key:
                                              type: object
                                              properties:
                                                ed25519:
                                                  type: string
                                                  format: byte
                                                secp256k1:
                                                  type: string
                                                  format: byte
                                              title: >-
                                                PublicKey defines the keys available for
                                                use with Tendermint Validators
                                            voting_power:
                                              type: string
                                              format: int64
                                            proposer_priority:
                                              type: string
                                              format: int64
                                        total_voting_power:
                                          type: string
                                          format: int64
                                common_height:
                                  type: string
                                  format: int64
                                byzantine_validators:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      address:
                                        type: string
                                        format: byte
                                      pub_key:
                                        type: object
                                        properties:
                                          ed25519:
                                            type: string
                                            format: byte
                                          secp256k1:
                                            type: string
                                            format: byte
                                        title: >-
                                          PublicKey defines the keys available for
                                          use with Tendermint Validators
                                      voting_power:
                                        type: string
                                        format: int64
                                      proposer_priority:
                                        type: string
                                        format: int64
                                total_voting_power:
                                  type: string
                                  format: int64
                                timestamp:
                                  type: string
                                  format: date-time
                              description: >-
                                LightClientAttackEvidence contains evidence of a
                                set of validators attempting to mislead a light
                                client.
                  last_commit:
                    type: object
                    properties:
                      height:
                        type: string
                        format: int64
                      round:
                        type: integer
                        format: int32
                      block_id:
                        type: object
                        properties:
                          hash:
                            type: string
                            format: byte
                          part_set_header:
                            type: object
                            properties:
                              total:
                                type: integer
                                format: int64
                              hash:
                                type: string
                                format: byte
                            title: PartsetHeader
                        title: BlockID
                      signatures:
                        type: array
                        items:
                          type: object
                          properties:
                            block_id_flag:
                              type: string
                              enum:
                                - BLOCK_ID_FLAG_UNKNOWN
                                - BLOCK_ID_FLAG_ABSENT
                                - BLOCK_ID_FLAG_COMMIT
                                - BLOCK_ID_FLAG_NIL
                              default: BLOCK_ID_FLAG_UNKNOWN
                              title: >-
                                BlockIdFlag indicates which BlcokID the
                                signature is for
                            validator_address:
                              type: string
                              format: byte
                            timestamp:
                              type: string
                              format: date-time
                            signature:
                              type: string
                              format: byte
                          description: >-
                            CommitSig is a part of the Vote included in a
                            Commit.
                    description: >-
                      Commit contains the evidence that a block was committed by
                      a set of validators.
            description: >-
              GetBlockByHeightResponse is the response type for the
              Query/GetBlockByHeight RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: height
          in: path
          required: true
          type: string
          format: int64
      tags:
        - Service
  /cosmos/base/tendermint/v1beta1/node_info:
    get:
      summary: GetNodeInfo queries the current node info.
      operationId: GetNodeInfo
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              default_node_info:
                type: object
                properties:
                  protocol_version:
                    type: object
                    properties:
                      p2p:
                        type: string
                        format: uint64
                      block:
                        type: string
                        format: uint64
                      app:
                        type: string
                        format: uint64
                  default_node_id:
                    type: string
                  listen_addr:
                    type: string
                  network:
                    type: string
                  version:
                    type: string
                  channels:
                    type: string
                    format: byte
                  moniker:
                    type: string
                  other:
                    type: object
                    properties:
                      tx_index:
                        type: string
                      rpc_address:
                        type: string
              application_version:
                type: object
                properties:
                  name:
                    type: string
                  app_name:
                    type: string
                  version:
                    type: string
                  git_commit:
                    type: string
                  build_tags:
                    type: string
                  go_version:
                    type: string
                  build_deps:
                    type: array
                    items:
                      type: object
                      properties:
                        path:
                          type: string
                          title: module path
                        version:
                          type: string
                          title: module version
                        sum:
                          type: string
                          title: checksum
                      title: Module is the type for VersionInfo
                  cosmos_sdk_version:
                    type: string
                    title: 'Since: cosmos-sdk 0.43'
                description: VersionInfo is the type for the GetNodeInfoResponse message.
            description: >-
              GetNodeInfoResponse is the request type for the Query/GetNodeInfo
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Service
  /cosmos/base/tendermint/v1beta1/syncing:
    get:
      summary: GetSyncing queries node syncing.
      operationId: GetSyncing
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              syncing:
                type: boolean
            description: >-
              GetSyncingResponse is the response type for the Query/GetSyncing
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Service
  /cosmos/base/tendermint/v1beta1/validatorsets/latest:
    get:
      summary: GetLatestValidatorSet queries latest validator-set.
      operationId: GetLatestValidatorSet
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              block_height:
                type: string
                format: int64
              validators:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: string
                    pub_key:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                    voting_power:
                      type: string
                      format: int64
                    proposer_priority:
                      type: string
                      format: int64
                  description: Validator is the type for the validator-set.
              pagination:
                description: pagination defines an pagination for the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              GetLatestValidatorSetResponse is the response type for the
              Query/GetValidatorSetByHeight RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Service
  /cosmos/base/tendermint/v1beta1/validatorsets/{height}:
    get:
      summary: GetValidatorSetByHeight queries validator-set at a given height.
      operationId: GetValidatorSetByHeight
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              block_height:
                type: string
                format: int64
              validators:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: string
                    pub_key:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                        value:
                          type: string
                          format: byte
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                    voting_power:
                      type: string
                      format: int64
                    proposer_priority:
                      type: string
                      format: int64
                  description: Validator is the type for the validator-set.
              pagination:
                description: pagination defines an pagination for the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              GetValidatorSetByHeightResponse is the response type for the
              Query/GetValidatorSetByHeight RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: height
          in: path
          required: true
          type: string
          format: int64
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Service
  /token/fee/{symbol}:
    get:
      operationId: Fees
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              exist:
                type: boolean
              issue_fee:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
              operate_fee:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: symbol
          in: path
          required: true
          type: string
      tags:
        - Query
  /token/params:
    get:
      operationId: TokenParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                type: object
                properties:
                  issue_token_base_fee:
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                    description: >-
                      Coin defines a token with a denomination and an amount.


                      NOTE: The amount field is an Int which implements the
                      custom method

                      signatures required by gogoproto.
                  operate_token_fee_ratio:
                    type: string
              res:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  /token/tokens:
    get:
      operationId: Tokens
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              Tokens:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: owner
          in: query
          required: false
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /token/tokens/{denom}:
    get:
      operationId: Token
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              Token:
                type: object
                properties:
                  type_url:
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                  value:
                    type: string
                    format: byte
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := ptypes.MarshalAny(foo)
                       ...
                       foo := &pb.Foo{}
                       if err := ptypes.UnmarshalAny(any, foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: denom
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/liquidity/v1beta1/params:
    get:
      summary: Get all parameters of the liquidity module.
      description: Returns all parameters of the liquidity module.
      operationId: LiquidityQueries
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params holds all the parameters of this module.
                type: object
                properties:
                  pool_types:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          format: uint32
                          example: '1'
                          title: >-
                            This is the id of the pool_type that is used as
                            pool_type_id for pool creation.

                            In this version, only pool-type-id 1 is supported.

                            {"id":1,"name":"ConstantProductLiquidityPool","min_reserve_coin_num":2,"max_reserve_coin_num":2,"description":""}
                        name:
                          type: string
                          example: ConstantProductLiquidityPool
                          description: name of the pool type.
                        min_reserve_coin_num:
                          type: integer
                          format: uint32
                          example: '2'
                          description: >-
                            minimum number of reserveCoins for
                            LiquidityPoolType, only 2 reserve coins are
                            supported.
                        max_reserve_coin_num:
                          type: integer
                          format: uint32
                          example: '2'
                          description: >-
                            maximum number of reserveCoins for
                            LiquidityPoolType, only 2 reserve coins are
                            supported.
                        description:
                          type: string
                          description: description of the pool type.
                      description: >-
                        Structure for the pool type to distinguish the
                        characteristics of the reserve pools.
                    title: list of available pool types
                  min_init_deposit_amount:
                    type: string
                    format: sdk.Int
                    example: '1000000'
                    description: >-
                      Minimum number of coins to be deposited to the liquidity
                      pool on pool creation.
                  init_pool_coin_mint_amount:
                    type: string
                    format: sdk.Int
                    example: '1000000'
                    description: Initial mint amount of pool coins upon pool creation.
                  max_reserve_coin_amount:
                    type: string
                    format: sdk.Int
                    example: '1000000000000'
                    description: >-
                      Limit the size of each liquidity pool to minimize risk. In
                      development, set to 0 for no limit. In production, set a
                      limit.
                  pool_creation_fee:
                    type: array
                    format: sdk.Coins
                    example:
                      - denom: uplugcn
                        amount: '100000000'
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                    description: >-
                      Fee paid to create a Liquidity Pool. Set a fee to prevent
                      spamming.
                  swap_fee_rate:
                    type: string
                    format: sdk.Dec
                    example: '0.003'
                    description: Swap fee rate for every executed swap.
                  withdraw_fee_rate:
                    type: string
                    format: sdk.Dec
                    example: '0.003'
                    description: >-
                      Reserve coin withdrawal with less proportion by
                      withdrawFeeRate.
                  max_order_amount_ratio:
                    type: string
                    format: sdk.Dec
                    example: '0.003'
                    description: >-
                      Maximum ratio of reserve coins that can be ordered at a
                      swap order.
                  unit_batch_height:
                    type: integer
                    format: uint32
                    example: '1'
                    description: The smallest unit batch height for every liquidity pool.
                  circuit_breaker_enabled:
                    type: boolean
                    format: bool
                    example: 'false'
                    description: >-
                      Circuit breaker enables or disables transaction messages
                      in liquidity module.
            description: >-
              the response type for the QueryParamsResponse RPC method. This
              includes current parameter of the liquidity module.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      tags:
        - Query
      externalDocs:
        description: Find out more about the params
        url: >-
          https://github.com/oracleNetworkProtocol/liquidity/blob/develop/x/liquidity/spec/08_params.md
  /cosmos/liquidity/v1beta1/pools:
    get:
      summary: Get existing liquidity pools.
      description: Returns a list of all liquidity pools with pagination result.
      operationId: LiquidityPools
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              pools:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uint64
                      example: '1'
                      title: id of the pool
                    type_id:
                      type: integer
                      format: uint32
                      example: '1'
                      title: id of the pool_type
                    reserve_coin_denoms:
                      type: array
                      example:
                        - denomX
                        - denomY
                      items:
                        type: string
                      title: denoms of reserve coin pair of the pool
                    reserve_account_address:
                      type: string
                      format: sdk.AccAddress
                      example: gx1sltcyjm5k0edlg59t47lsyw8gtgc3nudklntcq
                      title: reserve account address of the pool
                    pool_coin_denom:
                      type: string
                      example: >-
                        poolD35A0CC16EE598F90B044CE296A405BA9C381E38837599D96F2F70C2F02A23A4
                      title: denom of pool coin of the pool
                  description: >-
                    Pool defines the liquidity pool that contains pool
                    information.
              pagination:
                description: >-
                  pagination defines the pagination in the response. not working
                  on this version.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              the response type for the QueryLiquidityPoolsResponse RPC method.
              This includes a list of all existing liquidity pools and paging
              results that contain next_key and total count.
        '500':
          description: Internal Server Error
          schema: {}
          examples:
            application/json:
              code: 2
              message: >-
                rpc error: code = NotFound desc = There are no pools present.:
                key not found
              details: []
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
      externalDocs:
        description: Find out more about the query and error codes
        url: >-
          https://github.com/oracleNetworkProtocol/liquidity/blob/develop/doc/client.md
  /cosmos/liquidity/v1beta1/pools/pool_coin_denom/{pool_coin_denom}:
    get:
      summary: Get specific liquidity pool corresponding to the pool_coin_denom.
      description: It returns the liquidity pool corresponding to the pool_coin_denom.
      operationId: LiquidityPoolByPoolCoinDenom
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              pool:
                type: object
                properties:
                  id:
                    type: string
                    format: uint64
                    example: '1'
                    title: id of the pool
                  type_id:
                    type: integer
                    format: uint32
                    example: '1'
                    title: id of the pool_type
                  reserve_coin_denoms:
                    type: array
                    example:
                      - denomX
                      - denomY
                    items:
                      type: string
                    title: denoms of reserve coin pair of the pool
                  reserve_account_address:
                    type: string
                    format: sdk.AccAddress
                    example: gx1sltcyjm5k0edlg59t47lsyw8gtgc3nudklntcq
                    title: reserve account address of the pool
                  pool_coin_denom:
                    type: string
                    example: >-
                      poolD35A0CC16EE598F90B044CE296A405BA9C381E38837599D96F2F70C2F02A23A4
                    title: denom of pool coin of the pool
                description: >-
                  Pool defines the liquidity pool that contains pool
                  information.
            description: >-
              the response type for the QueryLiquidityPoolResponse RPC method.
              Returns the liquidity pool that corresponds to the requested
              pool_id.
        '404':
          description: Not Found
          schema: {}
          examples:
            application/json:
              code: 5
              message: >-
                rpc error: code = NotFound desc = liquidity pool with pool coin
                denom xx doesn't exist: key not found
              details: []
        '500':
          description: Internal Server Error
          schema: {}
          examples:
            application/json:
              code: 2
              message: >-
                rpc error: code = NotFound desc = the liquidity pool
                corresponding to the pool_coin_denom doesn't exist: key not
                found
              details: []
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pool_coin_denom
          in: path
          required: true
          type: string
      tags:
        - Query
      externalDocs:
        description: Find out more about the query and error codes
        url: >-
          https://github.com/oracleNetworkProtocol/liquidity/blob/develop/doc/client.md
  /cosmos/liquidity/v1beta1/pools/reserve_acc/{reserve_acc}:
    get:
      summary: Get specific liquidity pool corresponding to the reserve account.
      description: It returns the liquidity pool corresponding to the reserve account.
      operationId: LiquidityPoolByReserveAcc
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              pool:
                type: object
                properties:
                  id:
                    type: string
                    format: uint64
                    example: '1'
                    title: id of the pool
                  type_id:
                    type: integer
                    format: uint32
                    example: '1'
                    title: id of the pool_type
                  reserve_coin_denoms:
                    type: array
                    example:
                      - denomX
                      - denomY
                    items:
                      type: string
                    title: denoms of reserve coin pair of the pool
                  reserve_account_address:
                    type: string
                    format: sdk.AccAddress
                    example: gx1sltcyjm5k0edlg59t47lsyw8gtgc3nudklntcq
                    title: reserve account address of the pool
                  pool_coin_denom:
                    type: string
                    example: >-
                      poolD35A0CC16EE598F90B044CE296A405BA9C381E38837599D96F2F70C2F02A23A4
                    title: denom of pool coin of the pool
                description: >-
                  Pool defines the liquidity pool that contains pool
                  information.
            description: >-
              the response type for the QueryLiquidityPoolResponse RPC method.
              Returns the liquidity pool that corresponds to the requested
              pool_id.
        '404':
          description: Not Found
          schema: {}
          examples:
            application/json:
              code: 5
              message: >-
                rpc error: code = NotFound desc = the reserve account address xx
                is not valid: key not found
              details: []
        '500':
          description: Internal Server Error
          schema: {}
          examples:
            application/json:
              code: 2
              message: >-
                rpc error: code = NotFound desc = the liquidity pool
                corresponding to the reserve account doesn't exist: key not
                found
              details: []
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: reserve_acc
          in: path
          required: true
          type: string
      tags:
        - Query
      externalDocs:
        description: Find out more about the query and error codes
        url: >-
          https://github.com/oracleNetworkProtocol/liquidity/blob/develop/doc/client.md
  /cosmos/liquidity/v1beta1/pools/{pool_id}:
    get:
      summary: Get specific liquidity pool.
      description: Returns the liquidity pool that corresponds to the pool_id.
      operationId: LiquidityPool
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              pool:
                type: object
                properties:
                  id:
                    type: string
                    format: uint64
                    example: '1'
                    title: id of the pool
                  type_id:
                    type: integer
                    format: uint32
                    example: '1'
                    title: id of the pool_type
                  reserve_coin_denoms:
                    type: array
                    example:
                      - denomX
                      - denomY
                    items:
                      type: string
                    title: denoms of reserve coin pair of the pool
                  reserve_account_address:
                    type: string
                    format: sdk.AccAddress
                    example: gx1sltcyjm5k0edlg59t47lsyw8gtgc3nudklntcq
                    title: reserve account address of the pool
                  pool_coin_denom:
                    type: string
                    example: >-
                      poolD35A0CC16EE598F90B044CE296A405BA9C381E38837599D96F2F70C2F02A23A4
                    title: denom of pool coin of the pool
                description: >-
                  Pool defines the liquidity pool that contains pool
                  information.
            description: >-
              the response type for the QueryLiquidityPoolResponse RPC method.
              Returns the liquidity pool that corresponds to the requested
              pool_id.
        '400':
          description: Bad Request
          schema: {}
          examples:
            application/json:
              code: 3
              message: >-
                type mismatch, parameter: pool_id, error: strconv.ParseUint:
                parsing *: invalid syntax
              details: []
        '500':
          description: Internal Server Error
          schema: {}
          examples:
            application/json:
              code: 2
              message: >-
                rpc error: code = NotFound desc = liquidity pool 3 doesn't
                exist: key not found
              details: []
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pool_id
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
      externalDocs:
        description: Find out more about the query and error codes
        url: >-
          https://github.com/oracleNetworkProtocol/liquidity/blob/develop/doc/client.md
  /cosmos/liquidity/v1beta1/pools/{pool_id}/batch:
    get:
      summary: Get the pool's current batch.
      description: Returns the current batch of the pool that corresponds to the pool_id.
      operationId: LiquidityPoolBatch
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              batch:
                type: object
                properties:
                  pool_id:
                    type: string
                    format: uint64
                    example: '1'
                    title: id of the pool
                  index:
                    type: string
                    format: uint64
                    example: '1'
                    title: index of this batch
                  begin_height:
                    type: string
                    format: int64
                    example: '1000'
                    title: height where this batch is started
                  deposit_msg_index:
                    type: string
                    format: uint64
                    example: '1'
                    title: last index of DepositMsgStates
                  withdraw_msg_index:
                    type: string
                    format: uint64
                    example: '1'
                    title: last index of WithdrawMsgStates
                  swap_msg_index:
                    type: string
                    format: uint64
                    example: '1'
                    title: last index of SwapMsgStates
                  executed:
                    type: boolean
                    example: true
                    title: true if executed, false if not executed
                description: >-
                  PoolBatch defines the batch or batches of a given liquidity
                  pool that contains indexes of deposit, withdraw, and swap
                  messages. 

                  Index param increments by 1 if the pool id is same.
            description: >-
              the response type for the QueryLiquidityPoolBatchResponse RPC
              method. Returns the liquidity pool batch that corresponds to the
              requested pool_id.
        '400':
          description: Bad Request
          schema: {}
          examples:
            application/json:
              code: 3
              message: >-
                type mismatch, parameter: pool_id, error: strconv.ParseUint:
                parsing *: invalid syntax
              details: []
        '500':
          description: Internal Server Error
          schema: {}
          examples:
            application/json:
              code: 2
              message: >-
                rpc error: code = NotFound desc = liquidity pool 3 doesn't
                exist: key not found
              details: []
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pool_id
          description: id of the target pool for query
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
      externalDocs:
        description: Find out more about the query and error codes
        url: >-
          https://github.com/oracleNetworkProtocol/liquidity/blob/develop/doc/client.md
  /cosmos/liquidity/v1beta1/pools/{pool_id}/batch/deposits:
    get:
      summary: Get all deposit messages in the pool's current batch.
      description: >-
        Returns a list of all deposit messages in the current batch of the pool
        with pagination result.
      operationId: PoolBatchDepositMsgs
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              deposits:
                type: array
                items:
                  type: object
                  properties:
                    msg_height:
                      type: string
                      format: int64
                      example: '1000'
                      title: height where this message is appended to the batch
                    msg_index:
                      type: string
                      format: uint64
                      example: '1'
                      title: index of this deposit message in this liquidity pool
                    executed:
                      type: boolean
                      example: true
                      title: true if executed on this batch, false if not executed
                    succeeded:
                      type: boolean
                      example: true
                      title: >-
                        true if executed successfully on this batch, false if
                        failed
                    to_be_deleted:
                      type: boolean
                      example: true
                      title: >-
                        true if ready to be deleted on kvstore, false if not
                        ready to be deleted
                    msg:
                      title: MsgDepositWithinBatch
                      type: object
                      properties:
                        depositor_address:
                          type: string
                          format: sdk.AccAddress
                          example: gx1sltcyjm5k0edlg59t47lsyw8gtgc3nudklntcq
                          description: account address of the origin of this message
                        pool_id:
                          type: string
                          format: uint64
                          example: '1'
                          title: id of the target pool
                        deposit_coins:
                          type: array
                          format: sdk.Coins
                          example:
                            - denom: denomX
                              amount: '1000000'
                            - denom: denomY
                              amount: '2000000'
                          items:
                            type: object
                            properties:
                              denom:
                                type: string
                              amount:
                                type: string
                            description: >-
                              Coin defines a token with a denomination and an
                              amount.


                              NOTE: The amount field is an Int which implements
                              the custom method

                              signatures required by gogoproto.
                          title: reserve coin pair of the pool to deposit
                      description: >-
                        `MsgDepositWithinBatch defines` an `sdk.Msg` type that
                        supports submitting 

                        a deposit request to the batch of the liquidity pool.

                        Deposit is submitted to the batch of the Liquidity pool
                        with the specified 

                        `pool_id`, `deposit_coins` for reserve.

                        This request is stacked in the batch of the liquidity
                        pool, is not processed 

                        immediately, and is processed in the `endblock` at the
                        same time as other requests.


                        See:
                        https://github.com/oracleNetworkProtocol/liquidity/blob/develop/x/liquidity/spec/04_messages.md
                  description: >-
                    DepositMsgState defines the state of deposit message that
                    contains state information as it is processed in the next
                    batch or batches.
              pagination:
                description: >-
                  pagination defines the pagination in the response. not working
                  on this version.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              the response type for the QueryPoolBatchDeposit RPC method. This
              includes a list of all currently existing deposit messages of the
              batch and paging results that contain next_key and total count.
        '400':
          description: Bad Request
          schema: {}
          examples:
            application/json:
              code: 3
              message: >-
                type mismatch, parameter: pool_id, error: strconv.ParseUint:
                parsing *: invalid syntax
              details: []
        '500':
          description: Internal Server Error
          schema: {}
          examples:
            application/json:
              code: 2
              message: >-
                rpc error: code = NotFound desc = liquidity pool 3 doesn't
                exist: key not found
              details: []
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pool_id
          description: id of the target pool for query
          in: path
          required: true
          type: string
          format: uint64
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
      externalDocs:
        description: Find out more about the query and error codes
        url: >-
          https://github.com/oracleNetworkProtocol/liquidity/blob/develop/doc/client.md
  /cosmos/liquidity/v1beta1/pools/{pool_id}/batch/deposits/{msg_index}:
    get:
      summary: Get a specific deposit message in the pool's current batch.
      description: >-
        Returns the deposit message that corresponds to the msg_index in the
        pool's current batch.
      operationId: PoolBatchDepositMsg
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              deposit:
                type: object
                properties:
                  msg_height:
                    type: string
                    format: int64
                    example: '1000'
                    title: height where this message is appended to the batch
                  msg_index:
                    type: string
                    format: uint64
                    example: '1'
                    title: index of this deposit message in this liquidity pool
                  executed:
                    type: boolean
                    example: true
                    title: true if executed on this batch, false if not executed
                  succeeded:
                    type: boolean
                    example: true
                    title: >-
                      true if executed successfully on this batch, false if
                      failed
                  to_be_deleted:
                    type: boolean
                    example: true
                    title: >-
                      true if ready to be deleted on kvstore, false if not ready
                      to be deleted
                  msg:
                    title: MsgDepositWithinBatch
                    type: object
                    properties:
                      depositor_address:
                        type: string
                        format: sdk.AccAddress
                        example: gx1sltcyjm5k0edlg59t47lsyw8gtgc3nudklntcq
                        description: account address of the origin of this message
                      pool_id:
                        type: string
                        format: uint64
                        example: '1'
                        title: id of the target pool
                      deposit_coins:
                        type: array
                        format: sdk.Coins
                        example:
                          - denom: denomX
                            amount: '1000000'
                          - denom: denomY
                            amount: '2000000'
                        items:
                          type: object
                          properties:
                            denom:
                              type: string
                            amount:
                              type: string
                          description: >-
                            Coin defines a token with a denomination and an
                            amount.


                            NOTE: The amount field is an Int which implements
                            the custom method

                            signatures required by gogoproto.
                        title: reserve coin pair of the pool to deposit
                    description: >-
                      `MsgDepositWithinBatch defines` an `sdk.Msg` type that
                      supports submitting 

                      a deposit request to the batch of the liquidity pool.

                      Deposit is submitted to the batch of the Liquidity pool
                      with the specified 

                      `pool_id`, `deposit_coins` for reserve.

                      This request is stacked in the batch of the liquidity
                      pool, is not processed 

                      immediately, and is processed in the `endblock` at the
                      same time as other requests.


                      See:
                      https://github.com/oracleNetworkProtocol/liquidity/blob/develop/x/liquidity/spec/04_messages.md
                description: >-
                  DepositMsgState defines the state of deposit message that
                  contains state information as it is processed in the next
                  batch or batches.
            description: >-
              the response type for the QueryPoolBatchDepositMsg RPC method.
              This includes a batch swap message of the batch.
        '400':
          description: Bad Request
          schema: {}
          examples:
            application/json:
              code: 3
              message: >-
                type mismatch, parameter: msg_index, error: strconv.ParseUint:
                parsing *: invalid syntax
              details: []
        '500':
          description: Internal Server Error
          schema: {}
          examples:
            application/json:
              root:
                code: 2
                details: []
                message: >-
                  rpc error: code = NotFound desc = the msg given msg_index 1
                  doesn't exist or deleted: key not found
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pool_id
          description: id of the target pool for query
          in: path
          required: true
          type: string
          format: uint64
        - name: msg_index
          description: target msg_index of the pool
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
      externalDocs:
        description: Find out more about the query and error codes
        url: >-
          https://github.com/oracleNetworkProtocol/liquidity/blob/develop/doc/client.md
  /cosmos/liquidity/v1beta1/pools/{pool_id}/batch/swaps:
    get:
      summary: Get all swap messages in the pool's current batch.
      description: >-
        Returns a list of all swap messages in the current batch of the pool
        with pagination result.
      operationId: PoolBatchSwapMsgs
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              swaps:
                type: array
                items:
                  type: object
                  properties:
                    msg_height:
                      type: string
                      format: int64
                      example: '1000'
                      title: height where this message is appended to the batch
                    msg_index:
                      type: string
                      format: uint64
                      example: '1'
                      title: index of this swap message in this liquidity pool
                    executed:
                      type: boolean
                      example: true
                      title: true if executed on this batch, false if not executed
                    succeeded:
                      type: boolean
                      example: true
                      title: >-
                        true if executed successfully on this batch, false if
                        failed
                    to_be_deleted:
                      type: boolean
                      example: true
                      title: >-
                        true if ready to be deleted on kvstore, false if not
                        ready to be deleted
                    order_expiry_height:
                      type: string
                      format: int64
                      example: '1000'
                      title: >-
                        swap orders are cancelled when current height is equal
                        to or higher than ExpiryHeight
                    exchanged_offer_coin:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                      format: sdk.Coin
                      example:
                        denom: denomX
                        amount: '600000'
                      title: offer coin exchanged until now
                    remaining_offer_coin:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                      format: sdk.Coin
                      example:
                        denom: denomX
                        amount: '400000'
                      title: offer coin currently remaining to be exchanged
                    reserved_offer_coin_fee:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                      format: sdk.Coin
                      example:
                        denom: denomX
                        amount: '5000'
                      title: reserve fee for pays fee in half offer coin
                    msg:
                      title: MsgSwapWithinBatch
                      type: object
                      properties:
                        swap_requester_address:
                          type: string
                          format: sdk.AccAddress
                          example: gx1sltcyjm5k0edlg59t47lsyw8gtgc3nudklntcq
                          description: account address of the origin of this message
                          title: address of swap requester
                        pool_id:
                          type: string
                          format: uint64
                          example: '1'
                          description: >-
                            id of swap type, must match the value in the pool.
                            Only `swap_type_id` 1 is supported.
                        swap_type_id:
                          type: integer
                          format: uint32
                          example: '1'
                          description: id of swap type. Must match the value in the pool.
                        offer_coin:
                          type: object
                          properties:
                            denom:
                              type: string
                            amount:
                              type: string
                          description: >-
                            Coin defines a token with a denomination and an
                            amount.


                            NOTE: The amount field is an Int which implements
                            the custom method

                            signatures required by gogoproto.
                          format: sdk.Coin
                          example:
                            denom: denomX
                            amount: '1000000'
                        demand_coin_denom:
                          type: string
                          example: denomB
                          description: >-
                            denom of demand coin to be exchanged on the swap
                            request, must match the denom in the pool.
                        offer_coin_fee:
                          type: object
                          properties:
                            denom:
                              type: string
                            amount:
                              type: string
                          description: >-
                            Coin defines a token with a denomination and an
                            amount.


                            NOTE: The amount field is an Int which implements
                            the custom method

                            signatures required by gogoproto.
                          format: sdk.Coin
                          example:
                            denom: denomX
                            amount: '5000'
                        order_price:
                          type: string
                          format: sdk.Dec
                          example: '1.1'
                          description: >-
                            limit order price for the order, the price is the
                            exchange ratio of X/Y

                            where X is the amount of the first coin and Y is the
                            amount 

                            of the second coin when their denoms are sorted
                            alphabetically.
                      description: >-
                        `MsgSwapWithinBatch` defines an sdk.Msg type that
                        supports submitting a swap offer request to the batch of
                        the liquidity pool.

                        Submit swap offer to the liquidity pool batch with the
                        specified the `pool_id`, `swap_type_id`,

                        `demand_coin_denom` with the coin and the price you're
                        offering

                        and `offer_coin_fee` must be half of offer coin amount *
                        current `params.swap_fee_rate` and ceil for reservation
                        to pay fees.

                        This request is stacked in the batch of the liquidity
                        pool, is not processed 

                        immediately, and is processed in the `endblock` at the
                        same time as other requests.

                        You must request the same fields as the pool.

                        Only the default `swap_type_id` 1 is supported.


                        See:
                        https://github.com/oracleNetworkProtocol/liquidity/tree/develop/doc

                        https://github.com/oracleNetworkProtocol/liquidity/blob/develop/x/liquidity/spec/04_messages.md
                  description: >-
                    SwapMsgState defines the state of the swap message that
                    contains state information as the message is processed in
                    the next batch or batches.
              pagination:
                description: >-
                  pagination defines the pagination in the response. not working
                  on this version.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              the response type for the QueryPoolBatchSwapMsgs RPC method. This
              includes list of all currently existing swap messages of the batch
              and paging results that contain next_key and total count.
        '400':
          description: Bad Request
          schema: {}
          examples:
            application/json:
              code: 3
              message: >-
                type mismatch, parameter: pool_id, error: strconv.ParseUint:
                parsing *: invalid syntax
              details: []
        '500':
          description: Internal Server Error
          schema: {}
          examples:
            application/json:
              code: 2
              message: >-
                rpc error: code = NotFound desc = liquidity pool 3 doesn't
                exist: key not found
              details: []
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pool_id
          description: id of the target pool for query
          in: path
          required: true
          type: string
          format: uint64
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
      externalDocs:
        description: Find out more about the query and error codes
        url: >-
          https://github.com/oracleNetworkProtocol/liquidity/blob/develop/doc/client.md
  /cosmos/liquidity/v1beta1/pools/{pool_id}/batch/swaps/{msg_index}:
    get:
      summary: Get a specific swap message in the pool's current batch.
      description: >-
        Returns the swap message that corresponds to the msg_index in the pool's
        current batch
      operationId: PoolBatchSwapMsg
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              swap:
                type: object
                properties:
                  msg_height:
                    type: string
                    format: int64
                    example: '1000'
                    title: height where this message is appended to the batch
                  msg_index:
                    type: string
                    format: uint64
                    example: '1'
                    title: index of this swap message in this liquidity pool
                  executed:
                    type: boolean
                    example: true
                    title: true if executed on this batch, false if not executed
                  succeeded:
                    type: boolean
                    example: true
                    title: >-
                      true if executed successfully on this batch, false if
                      failed
                  to_be_deleted:
                    type: boolean
                    example: true
                    title: >-
                      true if ready to be deleted on kvstore, false if not ready
                      to be deleted
                  order_expiry_height:
                    type: string
                    format: int64
                    example: '1000'
                    title: >-
                      swap orders are cancelled when current height is equal to
                      or higher than ExpiryHeight
                  exchanged_offer_coin:
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                    description: >-
                      Coin defines a token with a denomination and an amount.


                      NOTE: The amount field is an Int which implements the
                      custom method

                      signatures required by gogoproto.
                    format: sdk.Coin
                    example:
                      denom: denomX
                      amount: '600000'
                    title: offer coin exchanged until now
                  remaining_offer_coin:
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                    description: >-
                      Coin defines a token with a denomination and an amount.


                      NOTE: The amount field is an Int which implements the
                      custom method

                      signatures required by gogoproto.
                    format: sdk.Coin
                    example:
                      denom: denomX
                      amount: '400000'
                    title: offer coin currently remaining to be exchanged
                  reserved_offer_coin_fee:
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                    description: >-
                      Coin defines a token with a denomination and an amount.


                      NOTE: The amount field is an Int which implements the
                      custom method

                      signatures required by gogoproto.
                    format: sdk.Coin
                    example:
                      denom: denomX
                      amount: '5000'
                    title: reserve fee for pays fee in half offer coin
                  msg:
                    title: MsgSwapWithinBatch
                    type: object
                    properties:
                      swap_requester_address:
                        type: string
                        format: sdk.AccAddress
                        example: gx1sltcyjm5k0edlg59t47lsyw8gtgc3nudklntcq
                        description: account address of the origin of this message
                        title: address of swap requester
                      pool_id:
                        type: string
                        format: uint64
                        example: '1'
                        description: >-
                          id of swap type, must match the value in the pool.
                          Only `swap_type_id` 1 is supported.
                      swap_type_id:
                        type: integer
                        format: uint32
                        example: '1'
                        description: id of swap type. Must match the value in the pool.
                      offer_coin:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                        format: sdk.Coin
                        example:
                          denom: denomX
                          amount: '1000000'
                      demand_coin_denom:
                        type: string
                        example: denomB
                        description: >-
                          denom of demand coin to be exchanged on the swap
                          request, must match the denom in the pool.
                      offer_coin_fee:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                        format: sdk.Coin
                        example:
                          denom: denomX
                          amount: '5000'
                      order_price:
                        type: string
                        format: sdk.Dec
                        example: '1.1'
                        description: >-
                          limit order price for the order, the price is the
                          exchange ratio of X/Y

                          where X is the amount of the first coin and Y is the
                          amount 

                          of the second coin when their denoms are sorted
                          alphabetically.
                    description: >-
                      `MsgSwapWithinBatch` defines an sdk.Msg type that supports
                      submitting a swap offer request to the batch of the
                      liquidity pool.

                      Submit swap offer to the liquidity pool batch with the
                      specified the `pool_id`, `swap_type_id`,

                      `demand_coin_denom` with the coin and the price you're
                      offering

                      and `offer_coin_fee` must be half of offer coin amount *
                      current `params.swap_fee_rate` and ceil for reservation to
                      pay fees.

                      This request is stacked in the batch of the liquidity
                      pool, is not processed 

                      immediately, and is processed in the `endblock` at the
                      same time as other requests.

                      You must request the same fields as the pool.

                      Only the default `swap_type_id` 1 is supported.


                      See:
                      https://github.com/oracleNetworkProtocol/liquidity/tree/develop/doc

                      https://github.com/oracleNetworkProtocol/liquidity/blob/develop/x/liquidity/spec/04_messages.md
                description: >-
                  SwapMsgState defines the state of the swap message that
                  contains state information as the message is processed in the
                  next batch or batches.
            description: >-
              the response type for the QueryPoolBatchSwapMsg RPC method. This
              includes a batch swap message of the batch.
        '400':
          description: Bad Request
          schema: {}
          examples:
            application/json:
              code: 3
              message: >-
                type mismatch, parameter: msg_index, error: strconv.ParseUint:
                parsing *: invalid syntax
              details: []
        '500':
          description: Internal Server Error
          schema: {}
          examples:
            application/json:
              root:
                code: 2
                details: []
                message: >-
                  rpc error: code = NotFound desc = the msg given msg_index 1
                  doesn't exist or deleted: key not found
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pool_id
          description: id of the target pool for query
          in: path
          required: true
          type: string
          format: uint64
        - name: msg_index
          description: target msg_index of the pool
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
      externalDocs:
        description: Find out more about the query and error codes
        url: >-
          https://github.com/oracleNetworkProtocol/liquidity/blob/develop/doc/client.md
  /cosmos/liquidity/v1beta1/pools/{pool_id}/batch/withdraws:
    get:
      summary: Get all withdraw messages in the pool's current batch.
      description: >-
        Returns a list of all withdraw messages in the current batch of the pool
        with pagination result.
      operationId: PoolBatchWithdrawMsgs
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              withdraws:
                type: array
                items:
                  type: object
                  properties:
                    msg_height:
                      type: string
                      format: int64
                      example: '1000'
                      title: height where this message is appended to the batch
                    msg_index:
                      type: string
                      format: uint64
                      example: '1'
                      title: index of this withdraw message in this liquidity pool
                    executed:
                      type: boolean
                      example: true
                      title: true if executed on this batch, false if not executed
                    succeeded:
                      type: boolean
                      example: true
                      title: >-
                        true if executed successfully on this batch, false if
                        failed
                    to_be_deleted:
                      type: boolean
                      example: true
                      title: >-
                        true if ready to be deleted on kvstore, false if not
                        ready to be deleted
                    msg:
                      title: MsgWithdrawWithinBatch
                      type: object
                      properties:
                        withdrawer_address:
                          type: string
                          format: sdk.AccAddress
                          example: gx1sltcyjm5k0edlg59t47lsyw8gtgc3nudklntcq
                          description: account address of the origin of this message
                        pool_id:
                          type: string
                          format: uint64
                          example: '1'
                          title: id of the target pool
                        pool_coin:
                          type: object
                          properties:
                            denom:
                              type: string
                            amount:
                              type: string
                          description: >-
                            Coin defines a token with a denomination and an
                            amount.


                            NOTE: The amount field is an Int which implements
                            the custom method

                            signatures required by gogoproto.
                          format: sdk.Coin
                          example:
                            denom: >-
                              poolD35A0CC16EE598F90B044CE296A405BA9C381E38837599D96F2F70C2F02A23A4
                            amount: '1000'
                      description: >-
                        `MsgWithdrawWithinBatch` defines an `sdk.Msg` type that
                        supports submitting 

                        a withdraw request to the batch of the liquidity pool.

                        Withdraw is submitted to the batch from the Liquidity
                        pool with the 

                        specified `pool_id`, `pool_coin` of the pool.

                        This request is stacked in the batch of the liquidity
                        pool, is not processed 

                        immediately, and is processed in the `endblock` at the
                        same time as other requests.


                        See:
                        https://github.com/oracleNetworkProtocol/liquidity/blob/develop/x/liquidity/spec/04_messages.md
                  description: >-
                    WithdrawMsgState defines the state of the withdraw message
                    that contains state information as the message is processed
                    in the next batch or batches.
              pagination:
                description: >-
                  pagination defines the pagination in the response. Not
                  supported on this version.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              the response type for the QueryPoolBatchWithdraw RPC method. This
              includes a list of all currently existing withdraw messages of the
              batch and paging results that contain next_key and total count.
        '400':
          description: Bad Request
          schema: {}
          examples:
            application/json:
              code: 3
              message: >-
                type mismatch, parameter: pool_id, error: strconv.ParseUint:
                parsing *: invalid syntax
              details: []
        '500':
          description: Internal Server Error
          schema: {}
          examples:
            application/json:
              code: 2
              message: >-
                rpc error: code = NotFound desc = liquidity pool 3 doesn't
                exist: key not found
              details: []
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pool_id
          description: id of the target pool for query
          in: path
          required: true
          type: string
          format: uint64
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
      externalDocs:
        description: Find out more about the query and error codes
        url: >-
          https://github.com/oracleNetworkProtocol/liquidity/blob/develop/doc/client.md
  /cosmos/liquidity/v1beta1/pools/{pool_id}/batch/withdraws/{msg_index}:
    get:
      summary: Get a specific withdraw message in the pool's current batch.
      description: >-
        Returns the withdraw message that corresponds to the msg_index in the
        pool's current batch.
      operationId: PoolBatchWithdrawMsg
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              withdraw:
                type: object
                properties:
                  msg_height:
                    type: string
                    format: int64
                    example: '1000'
                    title: height where this message is appended to the batch
                  msg_index:
                    type: string
                    format: uint64
                    example: '1'
                    title: index of this withdraw message in this liquidity pool
                  executed:
                    type: boolean
                    example: true
                    title: true if executed on this batch, false if not executed
                  succeeded:
                    type: boolean
                    example: true
                    title: >-
                      true if executed successfully on this batch, false if
                      failed
                  to_be_deleted:
                    type: boolean
                    example: true
                    title: >-
                      true if ready to be deleted on kvstore, false if not ready
                      to be deleted
                  msg:
                    title: MsgWithdrawWithinBatch
                    type: object
                    properties:
                      withdrawer_address:
                        type: string
                        format: sdk.AccAddress
                        example: gx1sltcyjm5k0edlg59t47lsyw8gtgc3nudklntcq
                        description: account address of the origin of this message
                      pool_id:
                        type: string
                        format: uint64
                        example: '1'
                        title: id of the target pool
                      pool_coin:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                        format: sdk.Coin
                        example:
                          denom: >-
                            poolD35A0CC16EE598F90B044CE296A405BA9C381E38837599D96F2F70C2F02A23A4
                          amount: '1000'
                    description: >-
                      `MsgWithdrawWithinBatch` defines an `sdk.Msg` type that
                      supports submitting 

                      a withdraw request to the batch of the liquidity pool.

                      Withdraw is submitted to the batch from the Liquidity pool
                      with the 

                      specified `pool_id`, `pool_coin` of the pool.

                      This request is stacked in the batch of the liquidity
                      pool, is not processed 

                      immediately, and is processed in the `endblock` at the
                      same time as other requests.


                      See:
                      https://github.com/oracleNetworkProtocol/liquidity/blob/develop/x/liquidity/spec/04_messages.md
                description: >-
                  WithdrawMsgState defines the state of the withdraw message
                  that contains state information as the message is processed in
                  the next batch or batches.
            description: >-
              the response type for the QueryPoolBatchWithdrawMsg RPC method.
              This includes a batch swap message of the batch.
        '400':
          description: Bad Request
          schema: {}
          examples:
            application/json:
              code: 3
              message: >-
                type mismatch, parameter: msg_index, error: strconv.ParseUint:
                parsing *: invalid syntax
              details: []
        '500':
          description: Internal Server Error
          schema: {}
          examples:
            application/json:
              root:
                code: 2
                details: []
                message: >-
                  rpc error: code = NotFound desc = the msg given msg_index 1
                  doesn't exist or deleted: key not found
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              error:
                type: string
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    type_url:
                      type: string
                    value:
                      type: string
                      format: byte
      parameters:
        - name: pool_id
          description: id of the target pool for query
          in: path
          required: true
          type: string
          format: uint64
        - name: msg_index
          description: target msg_index of the pool
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
      externalDocs:
        description: Find out more about the query and error codes
        url: >-
          https://github.com/oracleNetworkProtocol/liquidity/blob/develop/doc/client.md
definitions:
  ethermint.evm.v1.ChainConfig:
    type: object
    properties:
      homestead_block:
        type: string
        title: Homestead switch block (nil no fork, 0 = already homestead)
      dao_fork_block:
        type: string
        title: TheDAO hard-fork switch block (nil no fork)
      dao_fork_support:
        type: boolean
        title: Whether the nodes supports or opposes the DAO hard-fork
      eip150_block:
        type: string
        title: >-
          EIP150 implements the Gas price changes

          (https://github.com/ethereum/EIPs/issues/150) EIP150 HF block (nil no
          fork)
      eip150_hash:
        type: string
        title: >-
          EIP150 HF hash (needed for header only clients as only gas pricing
          changed)
      eip155_block:
        type: string
        title: EIP155Block HF block
      eip158_block:
        type: string
        title: EIP158 HF block
      byzantium_block:
        type: string
        title: Byzantium switch block (nil no fork, 0 = already on byzantium)
      constantinople_block:
        type: string
        title: Constantinople switch block (nil no fork, 0 = already activated)
      petersburg_block:
        type: string
        title: Petersburg switch block (nil same as Constantinople)
      istanbul_block:
        type: string
        title: Istanbul switch block (nil no fork, 0 = already on istanbul)
      muir_glacier_block:
        type: string
        title: >-
          Eip-2384 (bomb delay) switch block (nil no fork, 0 = already
          activated)
      berlin_block:
        type: string
        title: Berlin switch block (nil = no fork, 0 = already on berlin)
      london_block:
        type: string
        title: London switch block (nil = no fork, 0 = already on london)
    description: >-
      ChainConfig defines the Ethereum ChainConfig parameters using *sdk.Int
      values

      instead of *big.Int.
  ethermint.evm.v1.EstimateGasResponse:
    type: object
    properties:
      gas:
        type: string
        format: uint64
        title: the estimated gas
    title: EstimateGasResponse defines EstimateGas response
  ethermint.evm.v1.Log:
    type: object
    properties:
      address:
        type: string
        title: address of the contract that generated the event
      topics:
        type: array
        items:
          type: string
        description: list of topics provided by the contract.
      data:
        type: string
        format: byte
        title: supplied by the contract, usually ABI-encoded
      block_number:
        type: string
        format: uint64
        title: block in which the transaction was included
      tx_hash:
        type: string
        title: hash of the transaction
      tx_index:
        type: string
        format: uint64
        title: index of the transaction in the block
      block_hash:
        type: string
        title: hash of the block in which the transaction was included
      index:
        type: string
        format: uint64
        title: index of the log in the block
      removed:
        type: boolean
        description: >-
          The Removed field is true if this log was reverted due to a chain

          reorganisation. You must pay attention to this field if you receive
          logs

          through a filter query.
    description: >-
      Log represents an protobuf compatible Ethereum Log that defines a contract

      log event. These events are generated by the LOG opcode and stored/indexed
      by

      the node.
  ethermint.evm.v1.MsgEthereumTx:
    type: object
    properties:
      data:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
        title: inner transaction data
      size:
        type: number
        format: double
        title: encoded storage size of the transaction
      hash:
        type: string
        title: transaction hash in hex format
      from:
        type: string
        title: |-
          ethereum signer address in hex format. This address value is checked
          against the address derived from the signature (V, R, S) using the
          secp256k1 elliptic curve
    description: MsgEthereumTx encapsulates an Ethereum transaction as an SDK message.
  ethermint.evm.v1.MsgEthereumTxResponse:
    type: object
    properties:
      hash:
        type: string
        title: |-
          ethereum transaction hash in hex format. This hash differs from the
          Tendermint sha256 hash of the transaction bytes. See
          https://github.com/tendermint/tendermint/issues/6539 for reference
      logs:
        type: array
        items:
          type: object
          properties:
            address:
              type: string
              title: address of the contract that generated the event
            topics:
              type: array
              items:
                type: string
              description: list of topics provided by the contract.
            data:
              type: string
              format: byte
              title: supplied by the contract, usually ABI-encoded
            block_number:
              type: string
              format: uint64
              title: block in which the transaction was included
            tx_hash:
              type: string
              title: hash of the transaction
            tx_index:
              type: string
              format: uint64
              title: index of the transaction in the block
            block_hash:
              type: string
              title: hash of the block in which the transaction was included
            index:
              type: string
              format: uint64
              title: index of the log in the block
            removed:
              type: boolean
              description: >-
                The Removed field is true if this log was reverted due to a
                chain

                reorganisation. You must pay attention to this field if you
                receive logs

                through a filter query.
          description: >-
            Log represents an protobuf compatible Ethereum Log that defines a
            contract

            log event. These events are generated by the LOG opcode and
            stored/indexed by

            the node.
        description: |-
          logs contains the transaction hash and the proto-compatible ethereum
          logs.
      ret:
        type: string
        format: byte
        title: |-
          returned data from evm function (result or data supplied with revert
          opcode)
      vm_error:
        type: string
        title: vm error is the error returned by vm execution
      gas_used:
        type: string
        format: uint64
        title: gas consumed by the transaction
    description: MsgEthereumTxResponse defines the Msg/EthereumTx response type.
  ethermint.evm.v1.Params:
    type: object
    properties:
      evm_denom:
        type: string
        description: |-
          evm denom represents the token denomination used to run the EVM state
          transitions.
      enable_create:
        type: boolean
        title: >-
          enable create toggles state transitions that use the vm.Create
          function
      enable_call:
        type: boolean
        title: enable call toggles state transitions that use the vm.Call function
      extra_eips:
        type: array
        items:
          type: string
          format: int64
        title: extra eips defines the additional EIPs for the vm.Config
      chain_config:
        title: chain config defines the EVM chain configuration parameters
        type: object
        properties:
          homestead_block:
            type: string
            title: Homestead switch block (nil no fork, 0 = already homestead)
          dao_fork_block:
            type: string
            title: TheDAO hard-fork switch block (nil no fork)
          dao_fork_support:
            type: boolean
            title: Whether the nodes supports or opposes the DAO hard-fork
          eip150_block:
            type: string
            title: >-
              EIP150 implements the Gas price changes

              (https://github.com/ethereum/EIPs/issues/150) EIP150 HF block (nil
              no fork)
          eip150_hash:
            type: string
            title: >-
              EIP150 HF hash (needed for header only clients as only gas pricing
              changed)
          eip155_block:
            type: string
            title: EIP155Block HF block
          eip158_block:
            type: string
            title: EIP158 HF block
          byzantium_block:
            type: string
            title: Byzantium switch block (nil no fork, 0 = already on byzantium)
          constantinople_block:
            type: string
            title: Constantinople switch block (nil no fork, 0 = already activated)
          petersburg_block:
            type: string
            title: Petersburg switch block (nil same as Constantinople)
          istanbul_block:
            type: string
            title: Istanbul switch block (nil no fork, 0 = already on istanbul)
          muir_glacier_block:
            type: string
            title: >-
              Eip-2384 (bomb delay) switch block (nil no fork, 0 = already
              activated)
          berlin_block:
            type: string
            title: Berlin switch block (nil = no fork, 0 = already on berlin)
          london_block:
            type: string
            title: London switch block (nil = no fork, 0 = already on london)
        description: >-
          ChainConfig defines the Ethereum ChainConfig parameters using *sdk.Int
          values

          instead of *big.Int.
    title: Params defines the EVM module parameters
  ethermint.evm.v1.QueryAccountResponse:
    type: object
    properties:
      balance:
        type: string
        description: balance is the balance of the EVM denomination.
      code_hash:
        type: string
        description: code hash is the hex-formatted code bytes from the EOA.
      nonce:
        type: string
        format: uint64
        description: nonce is the account's sequence number.
    description: >-
      QueryAccountResponse is the response type for the Query/Account RPC
      method.
  ethermint.evm.v1.QueryBalanceResponse:
    type: object
    properties:
      balance:
        type: string
        description: balance is the balance of the EVM denomination.
    description: >-
      QueryBalanceResponse is the response type for the Query/Balance RPC
      method.
  ethermint.evm.v1.QueryCodeResponse:
    type: object
    properties:
      code:
        type: string
        format: byte
        description: code represents the code bytes from an ethereum address.
    description: |-
      QueryCodeResponse is the response type for the Query/Code RPC
      method.
  ethermint.evm.v1.QueryCosmosAccountResponse:
    type: object
    properties:
      cosmos_address:
        type: string
        description: cosmos_address is the cosmos address of the account.
      sequence:
        type: string
        format: uint64
        description: sequence is the account's sequence number.
      account_number:
        type: string
        format: uint64
        title: account_number is the account numbert
    description: >-
      QueryCosmosAccountResponse is the response type for the
      Query/CosmosAccount

      RPC method.
  ethermint.evm.v1.QueryParamsResponse:
    type: object
    properties:
      params:
        description: params define the evm module parameters.
        type: object
        properties:
          evm_denom:
            type: string
            description: >-
              evm denom represents the token denomination used to run the EVM
              state

              transitions.
          enable_create:
            type: boolean
            title: >-
              enable create toggles state transitions that use the vm.Create
              function
          enable_call:
            type: boolean
            title: >-
              enable call toggles state transitions that use the vm.Call
              function
          extra_eips:
            type: array
            items:
              type: string
              format: int64
            title: extra eips defines the additional EIPs for the vm.Config
          chain_config:
            title: chain config defines the EVM chain configuration parameters
            type: object
            properties:
              homestead_block:
                type: string
                title: Homestead switch block (nil no fork, 0 = already homestead)
              dao_fork_block:
                type: string
                title: TheDAO hard-fork switch block (nil no fork)
              dao_fork_support:
                type: boolean
                title: Whether the nodes supports or opposes the DAO hard-fork
              eip150_block:
                type: string
                title: >-
                  EIP150 implements the Gas price changes

                  (https://github.com/ethereum/EIPs/issues/150) EIP150 HF block
                  (nil no fork)
              eip150_hash:
                type: string
                title: >-
                  EIP150 HF hash (needed for header only clients as only gas
                  pricing changed)
              eip155_block:
                type: string
                title: EIP155Block HF block
              eip158_block:
                type: string
                title: EIP158 HF block
              byzantium_block:
                type: string
                title: Byzantium switch block (nil no fork, 0 = already on byzantium)
              constantinople_block:
                type: string
                title: >-
                  Constantinople switch block (nil no fork, 0 = already
                  activated)
              petersburg_block:
                type: string
                title: Petersburg switch block (nil same as Constantinople)
              istanbul_block:
                type: string
                title: Istanbul switch block (nil no fork, 0 = already on istanbul)
              muir_glacier_block:
                type: string
                title: >-
                  Eip-2384 (bomb delay) switch block (nil no fork, 0 = already
                  activated)
              berlin_block:
                type: string
                title: Berlin switch block (nil = no fork, 0 = already on berlin)
              london_block:
                type: string
                title: London switch block (nil = no fork, 0 = already on london)
            description: >-
              ChainConfig defines the Ethereum ChainConfig parameters using
              *sdk.Int values

              instead of *big.Int.
        title: Params defines the EVM module parameters
    description: >-
      QueryParamsResponse defines the response type for querying x/evm
      parameters.
  ethermint.evm.v1.QueryStorageResponse:
    type: object
    properties:
      value:
        type: string
        description: >-
          key defines the storage state value hash associated with the given
          key.
    description: |-
      QueryStorageResponse is the response type for the Query/Storage RPC
      method.
  ethermint.evm.v1.QueryTraceBlockResponse:
    type: object
    properties:
      data:
        type: string
        format: byte
    title: QueryTraceBlockResponse defines TraceBlock response
  ethermint.evm.v1.QueryTraceTxResponse:
    type: object
    properties:
      data:
        type: string
        format: byte
        title: response serialized in bytes
    title: QueryTraceTxResponse defines TraceTx response
  ethermint.evm.v1.QueryValidatorAccountResponse:
    type: object
    properties:
      account_address:
        type: string
        description: account_address is the cosmos address of the account in bech32 format.
      sequence:
        type: string
        format: uint64
        description: sequence is the account's sequence number.
      account_number:
        type: string
        format: uint64
        title: account_number is the account number
    description: |-
      QueryValidatorAccountResponse is the response type for the
      Query/ValidatorAccount RPC method.
  ethermint.evm.v1.TraceConfig:
    type: object
    properties:
      tracer:
        type: string
        title: custom javascript tracer
      timeout:
        type: string
        title: >-
          overrides the default timeout of 5 seconds for JavaScript-based
          tracing

          calls
      reexec:
        type: string
        format: uint64
        title: number of blocks the tracer is willing to go back
      disable_stack:
        type: boolean
        title: disable stack capture
      disable_storage:
        type: boolean
        title: disable storage capture
      debug:
        type: boolean
        title: print output during capture end
      limit:
        type: integer
        format: int32
        title: maximum length of output, but zero means unlimited
      overrides:
        title: >-
          Chain overrides, can be used to execute a trace using future fork
          rules
        type: object
        properties:
          homestead_block:
            type: string
            title: Homestead switch block (nil no fork, 0 = already homestead)
          dao_fork_block:
            type: string
            title: TheDAO hard-fork switch block (nil no fork)
          dao_fork_support:
            type: boolean
            title: Whether the nodes supports or opposes the DAO hard-fork
          eip150_block:
            type: string
            title: >-
              EIP150 implements the Gas price changes

              (https://github.com/ethereum/EIPs/issues/150) EIP150 HF block (nil
              no fork)
          eip150_hash:
            type: string
            title: >-
              EIP150 HF hash (needed for header only clients as only gas pricing
              changed)
          eip155_block:
            type: string
            title: EIP155Block HF block
          eip158_block:
            type: string
            title: EIP158 HF block
          byzantium_block:
            type: string
            title: Byzantium switch block (nil no fork, 0 = already on byzantium)
          constantinople_block:
            type: string
            title: Constantinople switch block (nil no fork, 0 = already activated)
          petersburg_block:
            type: string
            title: Petersburg switch block (nil same as Constantinople)
          istanbul_block:
            type: string
            title: Istanbul switch block (nil no fork, 0 = already on istanbul)
          muir_glacier_block:
            type: string
            title: >-
              Eip-2384 (bomb delay) switch block (nil no fork, 0 = already
              activated)
          berlin_block:
            type: string
            title: Berlin switch block (nil = no fork, 0 = already on berlin)
          london_block:
            type: string
            title: London switch block (nil = no fork, 0 = already on london)
        description: >-
          ChainConfig defines the Ethereum ChainConfig parameters using *sdk.Int
          values

          instead of *big.Int.
      enable_memory:
        type: boolean
        title: enable memory capture
      enable_return_data:
        type: boolean
        title: enable return data capture
    description: TraceConfig holds extra parameters to trace functions.
  google.protobuf.Any:
    type: object
    properties:
      type_url:
        type: string
        description: >-
          A URL/resource name that uniquely identifies the type of the
          serialized

          protocol buffer message. This string must contain at least

          one "/" character. The last segment of the URL's path must represent

          the fully qualified name of the type (as in

          `path/google.protobuf.Duration`). The name should be in a canonical
          form

          (e.g., leading "." is not accepted).


          In practice, teams usually precompile into the binary all types that
          they

          expect it to use in the context of Any. However, for URLs which use
          the

          scheme `http`, `https`, or no scheme, one can optionally set up a type

          server that maps type URLs to message definitions as follows:


          * If no scheme is provided, `https` is assumed.

          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
            value in binary format, or produce an error.
          * Applications are allowed to cache lookup results based on the
            URL, or have them precompiled into a binary to avoid any
            lookup. Therefore, binary compatibility needs to be preserved
            on changes to types. (Use versioned type names to manage
            breaking changes.)

          Note: this functionality is not currently available in the official

          protobuf release, and it is not used for type URLs beginning with

          type.googleapis.com.


          Schemes other than `http`, `https` (or the empty scheme) might be

          used with implementation specific semantics.
      value:
        type: string
        format: byte
        description: >-
          Must be a valid serialized protocol buffer of the above specified
          type.
    description: >-
      `Any` contains an arbitrary serialized protocol buffer message along with
      a

      URL that describes the type of the serialized message.


      Protobuf library provides support to pack/unpack Any values in the form

      of utility functions or additional generated methods of the Any type.


      Example 1: Pack and unpack a message in C++.

          Foo foo = ...;
          Any any;
          any.PackFrom(foo);
          ...
          if (any.UnpackTo(&foo)) {
            ...
          }

      Example 2: Pack and unpack a message in Java.

          Foo foo = ...;
          Any any = Any.pack(foo);
          ...
          if (any.is(Foo.class)) {
            foo = any.unpack(Foo.class);
          }

       Example 3: Pack and unpack a message in Python.

          foo = Foo(...)
          any = Any()
          any.Pack(foo)
          ...
          if any.Is(Foo.DESCRIPTOR):
            any.Unpack(foo)
            ...

       Example 4: Pack and unpack a message in Go

           foo := &pb.Foo{...}
           any, err := ptypes.MarshalAny(foo)
           ...
           foo := &pb.Foo{}
           if err := ptypes.UnmarshalAny(any, foo); err != nil {
             ...
           }

      The pack methods provided by protobuf library will by default use

      'type.googleapis.com/full.type.name' as the type URL and the unpack

      methods only use the fully qualified type name after the last '/'

      in the type URL, for example "foo.bar.com/x/y.z" will yield type

      name "y.z".



      JSON

      ====

      The JSON representation of an `Any` value uses the regular

      representation of the deserialized, embedded message, with an

      additional field `@type` which contains the type URL. Example:

          package google.profile;
          message Person {
            string first_name = 1;
            string last_name = 2;
          }

          {
            "@type": "type.googleapis.com/google.profile.Person",
            "firstName": <string>,
            "lastName": <string>
          }

      If the embedded message type is well-known and has a custom JSON

      representation, that representation will be embedded adding a field

      `value` which holds the custom JSON in addition to the `@type`

      field. Example (for message [google.protobuf.Duration][]):

          {
            "@type": "type.googleapis.com/google.protobuf.Duration",
            "value": "1.212s"
          }
  grpc.gateway.runtime.Error:
    type: object
    properties:
      error:
        type: string
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          type: object
          properties:
            type_url:
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
            value:
              type: string
              format: byte
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
  cosmos.auth.v1beta1.Params:
    type: object
    properties:
      max_memo_characters:
        type: string
        format: uint64
      tx_sig_limit:
        type: string
        format: uint64
      tx_size_cost_per_byte:
        type: string
        format: uint64
      sig_verify_cost_ed25519:
        type: string
        format: uint64
      sig_verify_cost_secp256k1:
        type: string
        format: uint64
    description: Params defines the parameters for the auth module.
  cosmos.auth.v1beta1.QueryAccountResponse:
    type: object
    properties:
      account:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
    description: >-
      QueryAccountResponse is the response type for the Query/Account RPC
      method.
  cosmos.auth.v1beta1.QueryAccountsResponse:
    type: object
    properties:
      accounts:
        type: array
        items:
          type: object
          properties:
            type_url:
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
            value:
              type: string
              format: byte
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
        title: accounts are the existing accounts
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryAccountsResponse is the response type for the Query/Accounts RPC
      method.


      Since: cosmos-sdk 0.43
  cosmos.auth.v1beta1.QueryParamsResponse:
    type: object
    properties:
      params:
        description: params defines the parameters of the module.
        type: object
        properties:
          max_memo_characters:
            type: string
            format: uint64
          tx_sig_limit:
            type: string
            format: uint64
          tx_size_cost_per_byte:
            type: string
            format: uint64
          sig_verify_cost_ed25519:
            type: string
            format: uint64
          sig_verify_cost_secp256k1:
            type: string
            format: uint64
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
  cosmos.base.query.v1beta1.PageRequest:
    type: object
    properties:
      key:
        type: string
        format: byte
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
      offset:
        type: string
        format: uint64
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
      limit:
        type: string
        format: uint64
        description: >-
          limit is the total number of results to be returned in the result
          page.

          If left empty it will default to a value to be set by each app.
      count_total:
        type: boolean
        description: >-
          count_total is set to true  to indicate that the result set should
          include

          a count of the total number of items available for pagination in UIs.

          count_total is only respected when offset is used. It is ignored when
          key

          is set.
      reverse:
        type: boolean
        description: >-
          reverse is set to true if results are to be returned in the descending
          order.


          Since: cosmos-sdk 0.43
    description: |-
      message SomeRequest {
               Foo some_parameter = 1;
               PageRequest pagination = 2;
       }
    title: |-
      PageRequest is to be embedded in gRPC request messages for efficient
      pagination. Ex:
  cosmos.base.query.v1beta1.PageResponse:
    type: object
    properties:
      next_key:
        type: string
        format: byte
        title: |-
          next_key is the key to be passed to PageRequest.key to
          query the next page most efficiently
      total:
        type: string
        format: uint64
        title: |-
          total is total number of results available if PageRequest.count_total
          was set, its value is undefined otherwise
    description: |-
      PageResponse is to be embedded in gRPC response messages where the
      corresponding request message has used PageRequest.

       message SomeResponse {
               repeated Bar results = 1;
               PageResponse page = 2;
       }
  cosmos.bank.v1beta1.DenomUnit:
    type: object
    properties:
      denom:
        type: string
        description: denom represents the string name of the given denom unit (e.g uplugcn).
      exponent:
        type: integer
        format: int64
        description: >-
          exponent represents power of 10 exponent that one must

          raise the base_denom to in order to equal the given DenomUnit's denom

          1 denom = 1^exponent base_denom

          (e.g. with a base_denom of uplugcn, one can create a DenomUnit of 'plugcn'
          with

          exponent = 6, thus: 1 plugcn = 10^6 uplugcn).
      aliases:
        type: array
        items:
          type: string
        title: aliases is a list of string aliases for the given denom
    description: |-
      DenomUnit represents a struct that describes a given
      denomination unit of the basic token.
  cosmos.bank.v1beta1.Metadata:
    type: object
    properties:
      description:
        type: string
      denom_units:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
              description: >-
                denom represents the string name of the given denom unit (e.g
                uplugcn).
            exponent:
              type: integer
              format: int64
              description: >-
                exponent represents power of 10 exponent that one must

                raise the base_denom to in order to equal the given DenomUnit's
                denom

                1 denom = 1^exponent base_denom

                (e.g. with a base_denom of uplugcn, one can create a DenomUnit of
                'plugcn' with

                exponent = 6, thus: 1 plugcn = 10^6 uplugcn).
            aliases:
              type: array
              items:
                type: string
              title: aliases is a list of string aliases for the given denom
          description: |-
            DenomUnit represents a struct that describes a given
            denomination unit of the basic token.
        title: denom_units represents the list of DenomUnit's for a given coin
      base:
        type: string
        description: >-
          base represents the base denom (should be the DenomUnit with exponent
          = 0).
      display:
        type: string
        description: |-
          display indicates the suggested denom that should be
          displayed in clients.
      name:
        type: string
        description: 'Since: cosmos-sdk 0.43'
        title: 'name defines the name of the token (eg: Cosmos Atom)'
      symbol:
        type: string
        description: >-
          symbol is the token symbol usually shown on exchanges (eg: ATOM). This
          can

          be the same as the display.


          Since: cosmos-sdk 0.43
    description: |-
      Metadata represents a struct that describes
      a basic token.
  cosmos.bank.v1beta1.Params:
    type: object
    properties:
      send_enabled:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            enabled:
              type: boolean
          description: >-
            SendEnabled maps coin denom to a send_enabled status (whether a
            denom is

            sendable).
      default_send_enabled:
        type: boolean
    description: Params defines the parameters for the bank module.
  cosmos.bank.v1beta1.QueryAllBalancesResponse:
    type: object
    properties:
      balances:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        description: balances is the balances of all the coins.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryAllBalancesResponse is the response type for the Query/AllBalances
      RPC

      method.
  cosmos.bank.v1beta1.QueryBalanceResponse:
    type: object
    properties:
      balance:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
    description: >-
      QueryBalanceResponse is the response type for the Query/Balance RPC
      method.
  cosmos.bank.v1beta1.QueryDenomMetadataResponse:
    type: object
    properties:
      metadata:
        type: object
        properties:
          description:
            type: string
          denom_units:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                  description: >-
                    denom represents the string name of the given denom unit
                    (e.g uplugcn).
                exponent:
                  type: integer
                  format: int64
                  description: >-
                    exponent represents power of 10 exponent that one must

                    raise the base_denom to in order to equal the given
                    DenomUnit's denom

                    1 denom = 1^exponent base_denom

                    (e.g. with a base_denom of uplugcn, one can create a DenomUnit
                    of 'plugcn' with

                    exponent = 6, thus: 1 plugcn = 10^6 uplugcn).
                aliases:
                  type: array
                  items:
                    type: string
                  title: aliases is a list of string aliases for the given denom
              description: |-
                DenomUnit represents a struct that describes a given
                denomination unit of the basic token.
            title: denom_units represents the list of DenomUnit's for a given coin
          base:
            type: string
            description: >-
              base represents the base denom (should be the DenomUnit with
              exponent = 0).
          display:
            type: string
            description: |-
              display indicates the suggested denom that should be
              displayed in clients.
          name:
            type: string
            description: 'Since: cosmos-sdk 0.43'
            title: 'name defines the name of the token (eg: Cosmos Atom)'
          symbol:
            type: string
            description: >-
              symbol is the token symbol usually shown on exchanges (eg: ATOM).
              This can

              be the same as the display.


              Since: cosmos-sdk 0.43
        description: |-
          Metadata represents a struct that describes
          a basic token.
    description: >-
      QueryDenomMetadataResponse is the response type for the
      Query/DenomMetadata RPC

      method.
  cosmos.bank.v1beta1.QueryDenomsMetadataResponse:
    type: object
    properties:
      metadatas:
        type: array
        items:
          type: object
          properties:
            description:
              type: string
            denom_units:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                    description: >-
                      denom represents the string name of the given denom unit
                      (e.g uplugcn).
                  exponent:
                    type: integer
                    format: int64
                    description: >-
                      exponent represents power of 10 exponent that one must

                      raise the base_denom to in order to equal the given
                      DenomUnit's denom

                      1 denom = 1^exponent base_denom

                      (e.g. with a base_denom of uplugcn, one can create a
                      DenomUnit of 'plugcn' with

                      exponent = 6, thus: 1 plugcn = 10^6 uplugcn).
                  aliases:
                    type: array
                    items:
                      type: string
                    title: aliases is a list of string aliases for the given denom
                description: |-
                  DenomUnit represents a struct that describes a given
                  denomination unit of the basic token.
              title: denom_units represents the list of DenomUnit's for a given coin
            base:
              type: string
              description: >-
                base represents the base denom (should be the DenomUnit with
                exponent = 0).
            display:
              type: string
              description: |-
                display indicates the suggested denom that should be
                displayed in clients.
            name:
              type: string
              description: 'Since: cosmos-sdk 0.43'
              title: 'name defines the name of the token (eg: Cosmos Atom)'
            symbol:
              type: string
              description: >-
                symbol is the token symbol usually shown on exchanges (eg:
                ATOM). This can

                be the same as the display.


                Since: cosmos-sdk 0.43
          description: |-
            Metadata represents a struct that describes
            a basic token.
        description: >-
          metadata provides the client information for all the registered
          tokens.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryDenomsMetadataResponse is the response type for the
      Query/DenomsMetadata RPC

      method.
  cosmos.bank.v1beta1.QueryParamsResponse:
    type: object
    properties:
      params:
        type: object
        properties:
          send_enabled:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                enabled:
                  type: boolean
              description: >-
                SendEnabled maps coin denom to a send_enabled status (whether a
                denom is

                sendable).
          default_send_enabled:
            type: boolean
        description: Params defines the parameters for the bank module.
    description: >-
      QueryParamsResponse defines the response type for querying x/bank
      parameters.
  cosmos.bank.v1beta1.QuerySupplyOfResponse:
    type: object
    properties:
      amount:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
    description: >-
      QuerySupplyOfResponse is the response type for the Query/SupplyOf RPC
      method.
  cosmos.bank.v1beta1.QueryTotalSupplyResponse:
    type: object
    properties:
      supply:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        title: supply is the supply of the coins
      pagination:
        description: |-
          pagination defines the pagination in the response.

          Since: cosmos-sdk 0.43
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    title: >-
      QueryTotalSupplyResponse is the response type for the Query/TotalSupply
      RPC

      method
  cosmos.bank.v1beta1.SendEnabled:
    type: object
    properties:
      denom:
        type: string
      enabled:
        type: boolean
    description: |-
      SendEnabled maps coin denom to a send_enabled status (whether a denom is
      sendable).
  cosmos.base.v1beta1.Coin:
    type: object
    properties:
      denom:
        type: string
      amount:
        type: string
    description: |-
      Coin defines a token with a denomination and an amount.

      NOTE: The amount field is an Int which implements the custom method
      signatures required by gogoproto.
  cosmos.base.v1beta1.DecCoin:
    type: object
    properties:
      denom:
        type: string
      amount:
        type: string
    description: |-
      DecCoin defines a token with a denomination and a decimal amount.

      NOTE: The amount field is an Dec which implements the custom method
      signatures required by gogoproto.
  cosmos.distribution.v1beta1.DelegationDelegatorReward:
    type: object
    properties:
      validator_address:
        type: string
      reward:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            DecCoin defines a token with a denomination and a decimal amount.

            NOTE: The amount field is an Dec which implements the custom method
            signatures required by gogoproto.
    description: |-
      DelegationDelegatorReward represents the properties
      of a delegator's delegation reward.
  cosmos.distribution.v1beta1.Params:
    type: object
    properties:
      community_tax:
        type: string
      base_proposer_reward:
        type: string
      bonus_proposer_reward:
        type: string
      withdraw_addr_enabled:
        type: boolean
    description: Params defines the set of params for the distribution module.
  cosmos.distribution.v1beta1.QueryCommunityPoolResponse:
    type: object
    properties:
      pool:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            DecCoin defines a token with a denomination and a decimal amount.

            NOTE: The amount field is an Dec which implements the custom method
            signatures required by gogoproto.
        description: pool defines community pool's coins.
    description: >-
      QueryCommunityPoolResponse is the response type for the
      Query/CommunityPool

      RPC method.
  cosmos.distribution.v1beta1.QueryDelegationRewardsResponse:
    type: object
    properties:
      rewards:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            DecCoin defines a token with a denomination and a decimal amount.

            NOTE: The amount field is an Dec which implements the custom method
            signatures required by gogoproto.
        description: rewards defines the rewards accrued by a delegation.
    description: |-
      QueryDelegationRewardsResponse is the response type for the
      Query/DelegationRewards RPC method.
  cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse:
    type: object
    properties:
      rewards:
        type: array
        items:
          type: object
          properties:
            validator_address:
              type: string
            reward:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  DecCoin defines a token with a denomination and a decimal
                  amount.


                  NOTE: The amount field is an Dec which implements the custom
                  method

                  signatures required by gogoproto.
          description: |-
            DelegationDelegatorReward represents the properties
            of a delegator's delegation reward.
        description: rewards defines all the rewards accrued by a delegator.
      total:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            DecCoin defines a token with a denomination and a decimal amount.

            NOTE: The amount field is an Dec which implements the custom method
            signatures required by gogoproto.
        description: total defines the sum of all the rewards.
    description: |-
      QueryDelegationTotalRewardsResponse is the response type for the
      Query/DelegationTotalRewards RPC method.
  cosmos.distribution.v1beta1.QueryDelegatorValidatorsResponse:
    type: object
    properties:
      validators:
        type: array
        items:
          type: string
        description: validators defines the validators a delegator is delegating for.
    description: |-
      QueryDelegatorValidatorsResponse is the response type for the
      Query/DelegatorValidators RPC method.
  cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddressResponse:
    type: object
    properties:
      withdraw_address:
        type: string
        description: withdraw_address defines the delegator address to query for.
    description: |-
      QueryDelegatorWithdrawAddressResponse is the response type for the
      Query/DelegatorWithdrawAddress RPC method.
  cosmos.distribution.v1beta1.QueryParamsResponse:
    type: object
    properties:
      params:
        description: params defines the parameters of the module.
        type: object
        properties:
          community_tax:
            type: string
          base_proposer_reward:
            type: string
          bonus_proposer_reward:
            type: string
          withdraw_addr_enabled:
            type: boolean
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
  cosmos.distribution.v1beta1.QueryValidatorCommissionResponse:
    type: object
    properties:
      commission:
        description: commission defines the commision the validator received.
        type: object
        properties:
          commission:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                DecCoin defines a token with a denomination and a decimal
                amount.


                NOTE: The amount field is an Dec which implements the custom
                method

                signatures required by gogoproto.
    title: |-
      QueryValidatorCommissionResponse is the response type for the
      Query/ValidatorCommission RPC method
  cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsResponse:
    type: object
    properties:
      rewards:
        type: object
        properties:
          rewards:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                DecCoin defines a token with a denomination and a decimal
                amount.


                NOTE: The amount field is an Dec which implements the custom
                method

                signatures required by gogoproto.
        description: >-
          ValidatorOutstandingRewards represents outstanding (un-withdrawn)
          rewards

          for a validator inexpensive to track, allows simple sanity checks.
    description: |-
      QueryValidatorOutstandingRewardsResponse is the response type for the
      Query/ValidatorOutstandingRewards RPC method.
  cosmos.distribution.v1beta1.QueryValidatorSlashesResponse:
    type: object
    properties:
      slashes:
        type: array
        items:
          type: object
          properties:
            validator_period:
              type: string
              format: uint64
            fraction:
              type: string
          description: |-
            ValidatorSlashEvent represents a validator slash event.
            Height is implicit within the store key.
            This is needed to calculate appropriate amount of staking tokens
            for delegations which are withdrawn after a slash has occurred.
        description: slashes defines the slashes the validator received.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: |-
      QueryValidatorSlashesResponse is the response type for the
      Query/ValidatorSlashes RPC method.
  cosmos.distribution.v1beta1.ValidatorAccumulatedCommission:
    type: object
    properties:
      commission:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            DecCoin defines a token with a denomination and a decimal amount.

            NOTE: The amount field is an Dec which implements the custom method
            signatures required by gogoproto.
    description: |-
      ValidatorAccumulatedCommission represents accumulated commission
      for a validator kept as a running counter, can be withdrawn at any time.
  cosmos.distribution.v1beta1.ValidatorOutstandingRewards:
    type: object
    properties:
      rewards:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            DecCoin defines a token with a denomination and a decimal amount.

            NOTE: The amount field is an Dec which implements the custom method
            signatures required by gogoproto.
    description: |-
      ValidatorOutstandingRewards represents outstanding (un-withdrawn) rewards
      for a validator inexpensive to track, allows simple sanity checks.
  cosmos.distribution.v1beta1.ValidatorSlashEvent:
    type: object
    properties:
      validator_period:
        type: string
        format: uint64
      fraction:
        type: string
    description: |-
      ValidatorSlashEvent represents a validator slash event.
      Height is implicit within the store key.
      This is needed to calculate appropriate amount of staking tokens
      for delegations which are withdrawn after a slash has occurred.
  cosmos.evidence.v1beta1.QueryAllEvidenceResponse:
    type: object
    properties:
      evidence:
        type: array
        items:
          type: object
          properties:
            type_url:
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
            value:
              type: string
              format: byte
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
        description: evidence returns all evidences.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryAllEvidenceResponse is the response type for the Query/AllEvidence
      RPC

      method.
  cosmos.evidence.v1beta1.QueryEvidenceResponse:
    type: object
    properties:
      evidence:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
    description: >-
      QueryEvidenceResponse is the response type for the Query/Evidence RPC
      method.
  cosmos.gov.v1beta1.Deposit:
    type: object
    properties:
      proposal_id:
        type: string
        format: uint64
      depositor:
        type: string
      amount:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
    description: |-
      Deposit defines an amount deposited by an account address to an active
      proposal.
  cosmos.gov.v1beta1.DepositParams:
    type: object
    properties:
      min_deposit:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        description: Minimum deposit for a proposal to enter voting period.
      max_deposit_period:
        type: string
        description: >-
          Maximum period for Atom holders to deposit on a proposal. Initial
          value: 2
           months.
    description: DepositParams defines the params for deposits on governance proposals.
  cosmos.gov.v1beta1.Proposal:
    type: object
    properties:
      proposal_id:
        type: string
        format: uint64
      content:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      status:
        type: string
        enum:
          - PROPOSAL_STATUS_UNSPECIFIED
          - PROPOSAL_STATUS_DEPOSIT_PERIOD
          - PROPOSAL_STATUS_VOTING_PERIOD
          - PROPOSAL_STATUS_PASSED
          - PROPOSAL_STATUS_REJECTED
          - PROPOSAL_STATUS_FAILED
        default: PROPOSAL_STATUS_UNSPECIFIED
        description: |-
          ProposalStatus enumerates the valid statuses of a proposal.

           - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.
           - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
          period.
           - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
          period.
           - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
          passed.
           - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
          been rejected.
           - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
          failed.
      final_tally_result:
        type: object
        properties:
          'yes':
            type: string
          abstain:
            type: string
          'no':
            type: string
          no_with_veto:
            type: string
        description: TallyResult defines a standard tally for a governance proposal.
      submit_time:
        type: string
        format: date-time
      deposit_end_time:
        type: string
        format: date-time
      total_deposit:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
      voting_start_time:
        type: string
        format: date-time
      voting_end_time:
        type: string
        format: date-time
    description: Proposal defines the core field members of a governance proposal.
  cosmos.gov.v1beta1.ProposalStatus:
    type: string
    enum:
      - PROPOSAL_STATUS_UNSPECIFIED
      - PROPOSAL_STATUS_DEPOSIT_PERIOD
      - PROPOSAL_STATUS_VOTING_PERIOD
      - PROPOSAL_STATUS_PASSED
      - PROPOSAL_STATUS_REJECTED
      - PROPOSAL_STATUS_FAILED
    default: PROPOSAL_STATUS_UNSPECIFIED
    description: |-
      ProposalStatus enumerates the valid statuses of a proposal.

       - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.
       - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
      period.
       - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
      period.
       - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
      passed.
       - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
      been rejected.
       - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
      failed.
  cosmos.gov.v1beta1.QueryDepositResponse:
    type: object
    properties:
      deposit:
        type: object
        properties:
          proposal_id:
            type: string
            format: uint64
          depositor:
            type: string
          amount:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
        description: |-
          Deposit defines an amount deposited by an account address to an active
          proposal.
    description: >-
      QueryDepositResponse is the response type for the Query/Deposit RPC
      method.
  cosmos.gov.v1beta1.QueryDepositsResponse:
    type: object
    properties:
      deposits:
        type: array
        items:
          type: object
          properties:
            proposal_id:
              type: string
              format: uint64
            depositor:
              type: string
            amount:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
          description: >-
            Deposit defines an amount deposited by an account address to an
            active

            proposal.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryDepositsResponse is the response type for the Query/Deposits RPC
      method.
  cosmos.gov.v1beta1.QueryParamsResponse:
    type: object
    properties:
      voting_params:
        description: voting_params defines the parameters related to voting.
        type: object
        properties:
          voting_period:
            type: string
            description: Length of the voting period.
      deposit_params:
        description: deposit_params defines the parameters related to deposit.
        type: object
        properties:
          min_deposit:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            description: Minimum deposit for a proposal to enter voting period.
          max_deposit_period:
            type: string
            description: >-
              Maximum period for Atom holders to deposit on a proposal. Initial
              value: 2
               months.
      tally_params:
        description: tally_params defines the parameters related to tally.
        type: object
        properties:
          quorum:
            type: string
            format: byte
            description: >-
              Minimum percentage of total stake needed to vote for a result to
              be
               considered valid.
          threshold:
            type: string
            format: byte
            description: >-
              Minimum proportion of Yes votes for proposal to pass. Default
              value: 0.5.
          veto_threshold:
            type: string
            format: byte
            description: >-
              Minimum value of Veto votes to Total votes ratio for proposal to
              be
               vetoed. Default value: 1/3.
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
  cosmos.gov.v1beta1.QueryProposalResponse:
    type: object
    properties:
      proposal:
        type: object
        properties:
          proposal_id:
            type: string
            format: uint64
          content:
            type: object
            properties:
              type_url:
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
              value:
                type: string
                format: byte
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := ptypes.MarshalAny(foo)
                   ...
                   foo := &pb.Foo{}
                   if err := ptypes.UnmarshalAny(any, foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".



              JSON

              ====

              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
          status:
            type: string
            enum:
              - PROPOSAL_STATUS_UNSPECIFIED
              - PROPOSAL_STATUS_DEPOSIT_PERIOD
              - PROPOSAL_STATUS_VOTING_PERIOD
              - PROPOSAL_STATUS_PASSED
              - PROPOSAL_STATUS_REJECTED
              - PROPOSAL_STATUS_FAILED
            default: PROPOSAL_STATUS_UNSPECIFIED
            description: |-
              ProposalStatus enumerates the valid statuses of a proposal.

               - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.
               - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
              period.
               - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
              period.
               - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
              passed.
               - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
              been rejected.
               - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
              failed.
          final_tally_result:
            type: object
            properties:
              'yes':
                type: string
              abstain:
                type: string
              'no':
                type: string
              no_with_veto:
                type: string
            description: TallyResult defines a standard tally for a governance proposal.
          submit_time:
            type: string
            format: date-time
          deposit_end_time:
            type: string
            format: date-time
          total_deposit:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
          voting_start_time:
            type: string
            format: date-time
          voting_end_time:
            type: string
            format: date-time
        description: Proposal defines the core field members of a governance proposal.
    description: >-
      QueryProposalResponse is the response type for the Query/Proposal RPC
      method.
  cosmos.gov.v1beta1.QueryProposalsResponse:
    type: object
    properties:
      proposals:
        type: array
        items:
          type: object
          properties:
            proposal_id:
              type: string
              format: uint64
            content:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            status:
              type: string
              enum:
                - PROPOSAL_STATUS_UNSPECIFIED
                - PROPOSAL_STATUS_DEPOSIT_PERIOD
                - PROPOSAL_STATUS_VOTING_PERIOD
                - PROPOSAL_STATUS_PASSED
                - PROPOSAL_STATUS_REJECTED
                - PROPOSAL_STATUS_FAILED
              default: PROPOSAL_STATUS_UNSPECIFIED
              description: |-
                ProposalStatus enumerates the valid statuses of a proposal.

                 - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.
                 - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
                period.
                 - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
                period.
                 - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
                passed.
                 - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
                been rejected.
                 - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
                failed.
            final_tally_result:
              type: object
              properties:
                'yes':
                  type: string
                abstain:
                  type: string
                'no':
                  type: string
                no_with_veto:
                  type: string
              description: TallyResult defines a standard tally for a governance proposal.
            submit_time:
              type: string
              format: date-time
            deposit_end_time:
              type: string
              format: date-time
            total_deposit:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
            voting_start_time:
              type: string
              format: date-time
            voting_end_time:
              type: string
              format: date-time
          description: Proposal defines the core field members of a governance proposal.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: |-
      QueryProposalsResponse is the response type for the Query/Proposals RPC
      method.
  cosmos.gov.v1beta1.QueryTallyResultResponse:
    type: object
    properties:
      tally:
        type: object
        properties:
          'yes':
            type: string
          abstain:
            type: string
          'no':
            type: string
          no_with_veto:
            type: string
        description: TallyResult defines a standard tally for a governance proposal.
    description: >-
      QueryTallyResultResponse is the response type for the Query/Tally RPC
      method.
  cosmos.gov.v1beta1.QueryVoteResponse:
    type: object
    properties:
      vote:
        type: object
        properties:
          proposal_id:
            type: string
            format: uint64
          voter:
            type: string
          option:
            description: >-
              Deprecated: Prefer to use `options` instead. This field is set in
              queries

              if and only if `len(options) == 1` and that option has weight 1.
              In all

              other cases, this field will default to VOTE_OPTION_UNSPECIFIED.
            type: string
            enum:
              - VOTE_OPTION_UNSPECIFIED
              - VOTE_OPTION_YES
              - VOTE_OPTION_ABSTAIN
              - VOTE_OPTION_NO
              - VOTE_OPTION_NO_WITH_VETO
            default: VOTE_OPTION_UNSPECIFIED
          options:
            type: array
            items:
              type: object
              properties:
                option:
                  type: string
                  enum:
                    - VOTE_OPTION_UNSPECIFIED
                    - VOTE_OPTION_YES
                    - VOTE_OPTION_ABSTAIN
                    - VOTE_OPTION_NO
                    - VOTE_OPTION_NO_WITH_VETO
                  default: VOTE_OPTION_UNSPECIFIED
                  description: >-
                    VoteOption enumerates the valid vote options for a given
                    governance proposal.

                     - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
                     - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
                     - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
                     - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
                     - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
                weight:
                  type: string
              description: |-
                WeightedVoteOption defines a unit of vote for vote split.

                Since: cosmos-sdk 0.43
            title: 'Since: cosmos-sdk 0.43'
        description: |-
          Vote defines a vote on a governance proposal.
          A Vote consists of a proposal ID, the voter, and the vote option.
    description: QueryVoteResponse is the response type for the Query/Vote RPC method.
  cosmos.gov.v1beta1.QueryVotesResponse:
    type: object
    properties:
      votes:
        type: array
        items:
          type: object
          properties:
            proposal_id:
              type: string
              format: uint64
            voter:
              type: string
            option:
              description: >-
                Deprecated: Prefer to use `options` instead. This field is set
                in queries

                if and only if `len(options) == 1` and that option has weight 1.
                In all

                other cases, this field will default to VOTE_OPTION_UNSPECIFIED.
              type: string
              enum:
                - VOTE_OPTION_UNSPECIFIED
                - VOTE_OPTION_YES
                - VOTE_OPTION_ABSTAIN
                - VOTE_OPTION_NO
                - VOTE_OPTION_NO_WITH_VETO
              default: VOTE_OPTION_UNSPECIFIED
            options:
              type: array
              items:
                type: object
                properties:
                  option:
                    type: string
                    enum:
                      - VOTE_OPTION_UNSPECIFIED
                      - VOTE_OPTION_YES
                      - VOTE_OPTION_ABSTAIN
                      - VOTE_OPTION_NO
                      - VOTE_OPTION_NO_WITH_VETO
                    default: VOTE_OPTION_UNSPECIFIED
                    description: >-
                      VoteOption enumerates the valid vote options for a given
                      governance proposal.

                       - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
                       - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
                       - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
                       - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
                       - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
                  weight:
                    type: string
                description: |-
                  WeightedVoteOption defines a unit of vote for vote split.

                  Since: cosmos-sdk 0.43
              title: 'Since: cosmos-sdk 0.43'
          description: |-
            Vote defines a vote on a governance proposal.
            A Vote consists of a proposal ID, the voter, and the vote option.
        description: votes defined the queried votes.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: QueryVotesResponse is the response type for the Query/Votes RPC method.
  cosmos.gov.v1beta1.TallyParams:
    type: object
    properties:
      quorum:
        type: string
        format: byte
        description: |-
          Minimum percentage of total stake needed to vote for a result to be
           considered valid.
      threshold:
        type: string
        format: byte
        description: >-
          Minimum proportion of Yes votes for proposal to pass. Default value:
          0.5.
      veto_threshold:
        type: string
        format: byte
        description: |-
          Minimum value of Veto votes to Total votes ratio for proposal to be
           vetoed. Default value: 1/3.
    description: TallyParams defines the params for tallying votes on governance proposals.
  cosmos.gov.v1beta1.TallyResult:
    type: object
    properties:
      'yes':
        type: string
      abstain:
        type: string
      'no':
        type: string
      no_with_veto:
        type: string
    description: TallyResult defines a standard tally for a governance proposal.
  cosmos.gov.v1beta1.Vote:
    type: object
    properties:
      proposal_id:
        type: string
        format: uint64
      voter:
        type: string
      option:
        description: >-
          Deprecated: Prefer to use `options` instead. This field is set in
          queries

          if and only if `len(options) == 1` and that option has weight 1. In
          all

          other cases, this field will default to VOTE_OPTION_UNSPECIFIED.
        type: string
        enum:
          - VOTE_OPTION_UNSPECIFIED
          - VOTE_OPTION_YES
          - VOTE_OPTION_ABSTAIN
          - VOTE_OPTION_NO
          - VOTE_OPTION_NO_WITH_VETO
        default: VOTE_OPTION_UNSPECIFIED
      options:
        type: array
        items:
          type: object
          properties:
            option:
              type: string
              enum:
                - VOTE_OPTION_UNSPECIFIED
                - VOTE_OPTION_YES
                - VOTE_OPTION_ABSTAIN
                - VOTE_OPTION_NO
                - VOTE_OPTION_NO_WITH_VETO
              default: VOTE_OPTION_UNSPECIFIED
              description: >-
                VoteOption enumerates the valid vote options for a given
                governance proposal.

                 - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
                 - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
                 - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
                 - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
                 - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
            weight:
              type: string
          description: |-
            WeightedVoteOption defines a unit of vote for vote split.

            Since: cosmos-sdk 0.43
        title: 'Since: cosmos-sdk 0.43'
    description: |-
      Vote defines a vote on a governance proposal.
      A Vote consists of a proposal ID, the voter, and the vote option.
  cosmos.gov.v1beta1.VoteOption:
    type: string
    enum:
      - VOTE_OPTION_UNSPECIFIED
      - VOTE_OPTION_YES
      - VOTE_OPTION_ABSTAIN
      - VOTE_OPTION_NO
      - VOTE_OPTION_NO_WITH_VETO
    default: VOTE_OPTION_UNSPECIFIED
    description: >-
      VoteOption enumerates the valid vote options for a given governance
      proposal.

       - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
       - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
       - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
       - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
       - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
  cosmos.gov.v1beta1.VotingParams:
    type: object
    properties:
      voting_period:
        type: string
        description: Length of the voting period.
    description: VotingParams defines the params for voting on governance proposals.
  cosmos.gov.v1beta1.WeightedVoteOption:
    type: object
    properties:
      option:
        type: string
        enum:
          - VOTE_OPTION_UNSPECIFIED
          - VOTE_OPTION_YES
          - VOTE_OPTION_ABSTAIN
          - VOTE_OPTION_NO
          - VOTE_OPTION_NO_WITH_VETO
        default: VOTE_OPTION_UNSPECIFIED
        description: >-
          VoteOption enumerates the valid vote options for a given governance
          proposal.

           - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
           - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
           - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
           - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
           - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
      weight:
        type: string
    description: |-
      WeightedVoteOption defines a unit of vote for vote split.

      Since: cosmos-sdk 0.43
  cosmos.mint.v1beta1.Params:
    type: object
    properties:
      mint_denom:
        type: string
        title: type of coin to mint
      inflation_rate_change:
        type: string
        title: maximum annual change in inflation rate
      inflation_max:
        type: string
        title: maximum inflation rate
      inflation_min:
        type: string
        title: minimum inflation rate
      goal_bonded:
        type: string
        title: goal of percent bonded plugcns
      blocks_per_year:
        type: string
        format: uint64
        title: expected blocks per year
    description: Params holds parameters for the mint module.
  cosmos.mint.v1beta1.QueryAnnualProvisionsResponse:
    type: object
    properties:
      annual_provisions:
        type: string
        format: byte
        description: annual_provisions is the current minting annual provisions value.
    description: |-
      QueryAnnualProvisionsResponse is the response type for the
      Query/AnnualProvisions RPC method.
  cosmos.mint.v1beta1.QueryInflationResponse:
    type: object
    properties:
      inflation:
        type: string
        format: byte
        description: inflation is the current minting inflation value.
    description: |-
      QueryInflationResponse is the response type for the Query/Inflation RPC
      method.
  cosmos.mint.v1beta1.QueryParamsResponse:
    type: object
    properties:
      params:
        description: params defines the parameters of the module.
        type: object
        properties:
          mint_denom:
            type: string
            title: type of coin to mint
          inflation_rate_change:
            type: string
            title: maximum annual change in inflation rate
          inflation_max:
            type: string
            title: maximum inflation rate
          inflation_min:
            type: string
            title: minimum inflation rate
          goal_bonded:
            type: string
            title: goal of percent bonded plugcns
          blocks_per_year:
            type: string
            format: uint64
            title: expected blocks per year
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
  cosmos.slashing.v1beta1.Params:
    type: object
    properties:
      signed_blocks_window:
        type: string
        format: int64
      min_signed_per_window:
        type: string
        format: byte
      downtime_jail_duration:
        type: string
      slash_fraction_double_sign:
        type: string
        format: byte
      slash_fraction_downtime:
        type: string
        format: byte
    description: Params represents the parameters used for by the slashing module.
  cosmos.slashing.v1beta1.QueryParamsResponse:
    type: object
    properties:
      params:
        type: object
        properties:
          signed_blocks_window:
            type: string
            format: int64
          min_signed_per_window:
            type: string
            format: byte
          downtime_jail_duration:
            type: string
          slash_fraction_double_sign:
            type: string
            format: byte
          slash_fraction_downtime:
            type: string
            format: byte
        description: Params represents the parameters used for by the slashing module.
    title: QueryParamsResponse is the response type for the Query/Params RPC method
  cosmos.slashing.v1beta1.QuerySigningInfoResponse:
    type: object
    properties:
      val_signing_info:
        type: object
        properties:
          address:
            type: string
          start_height:
            type: string
            format: int64
            title: Height at which validator was first a candidate OR was unjailed
          index_offset:
            type: string
            format: int64
            description: >-
              Index which is incremented each time the validator was a bonded

              in a block and may have signed a precommit or not. This in
              conjunction with the

              `SignedBlocksWindow` param determines the index in the
              `MissedBlocksBitArray`.
          jailed_until:
            type: string
            format: date-time
            description: >-
              Timestamp until which the validator is jailed due to liveness
              downtime.
          tombstoned:
            type: boolean
            description: >-
              Whether or not a validator has been tombstoned (killed out of
              validator set). It is set

              once the validator commits an equivocation or for any other
              configured misbehiavor.
          missed_blocks_counter:
            type: string
            format: int64
            description: >-
              A counter kept to avoid unnecessary array reads.

              Note that `Sum(MissedBlocksBitArray)` always equals
              `MissedBlocksCounter`.
        description: >-
          ValidatorSigningInfo defines a validator's signing info for monitoring
          their

          liveness activity.
        title: val_signing_info is the signing info of requested val cons address
    title: >-
      QuerySigningInfoResponse is the response type for the Query/SigningInfo
      RPC

      method
  cosmos.slashing.v1beta1.QuerySigningInfosResponse:
    type: object
    properties:
      info:
        type: array
        items:
          type: object
          properties:
            address:
              type: string
            start_height:
              type: string
              format: int64
              title: Height at which validator was first a candidate OR was unjailed
            index_offset:
              type: string
              format: int64
              description: >-
                Index which is incremented each time the validator was a bonded

                in a block and may have signed a precommit or not. This in
                conjunction with the

                `SignedBlocksWindow` param determines the index in the
                `MissedBlocksBitArray`.
            jailed_until:
              type: string
              format: date-time
              description: >-
                Timestamp until which the validator is jailed due to liveness
                downtime.
            tombstoned:
              type: boolean
              description: >-
                Whether or not a validator has been tombstoned (killed out of
                validator set). It is set

                once the validator commits an equivocation or for any other
                configured misbehiavor.
            missed_blocks_counter:
              type: string
              format: int64
              description: >-
                A counter kept to avoid unnecessary array reads.

                Note that `Sum(MissedBlocksBitArray)` always equals
                `MissedBlocksCounter`.
          description: >-
            ValidatorSigningInfo defines a validator's signing info for
            monitoring their

            liveness activity.
        title: info is the signing info of all validators
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
    title: >-
      QuerySigningInfosResponse is the response type for the Query/SigningInfos
      RPC

      method
  cosmos.slashing.v1beta1.ValidatorSigningInfo:
    type: object
    properties:
      address:
        type: string
      start_height:
        type: string
        format: int64
        title: Height at which validator was first a candidate OR was unjailed
      index_offset:
        type: string
        format: int64
        description: >-
          Index which is incremented each time the validator was a bonded

          in a block and may have signed a precommit or not. This in conjunction
          with the

          `SignedBlocksWindow` param determines the index in the
          `MissedBlocksBitArray`.
      jailed_until:
        type: string
        format: date-time
        description: >-
          Timestamp until which the validator is jailed due to liveness
          downtime.
      tombstoned:
        type: boolean
        description: >-
          Whether or not a validator has been tombstoned (killed out of
          validator set). It is set

          once the validator commits an equivocation or for any other configured
          misbehiavor.
      missed_blocks_counter:
        type: string
        format: int64
        description: >-
          A counter kept to avoid unnecessary array reads.

          Note that `Sum(MissedBlocksBitArray)` always equals
          `MissedBlocksCounter`.
    description: >-
      ValidatorSigningInfo defines a validator's signing info for monitoring
      their

      liveness activity.
  cosmos.staking.v1beta1.BondStatus:
    type: string
    enum:
      - BOND_STATUS_UNSPECIFIED
      - BOND_STATUS_UNBONDED
      - BOND_STATUS_UNBONDING
      - BOND_STATUS_BONDED
    default: BOND_STATUS_UNSPECIFIED
    description: |-
      BondStatus is the status of a validator.

       - BOND_STATUS_UNSPECIFIED: UNSPECIFIED defines an invalid validator status.
       - BOND_STATUS_UNBONDED: UNBONDED defines a validator that is not bonded.
       - BOND_STATUS_UNBONDING: UNBONDING defines a validator that is unbonding.
       - BOND_STATUS_BONDED: BONDED defines a validator that is bonded.
  cosmos.staking.v1beta1.Commission:
    type: object
    properties:
      commission_rates:
        description: >-
          commission_rates defines the initial commission rates to be used for
          creating a validator.
        type: object
        properties:
          rate:
            type: string
            description: rate is the commission rate charged to delegators, as a fraction.
          max_rate:
            type: string
            description: >-
              max_rate defines the maximum commission rate which validator can
              ever charge, as a fraction.
          max_change_rate:
            type: string
            description: >-
              max_change_rate defines the maximum daily increase of the
              validator commission, as a fraction.
      update_time:
        type: string
        format: date-time
        description: update_time is the last time the commission rate was changed.
    description: Commission defines commission parameters for a given validator.
  cosmos.staking.v1beta1.CommissionRates:
    type: object
    properties:
      rate:
        type: string
        description: rate is the commission rate charged to delegators, as a fraction.
      max_rate:
        type: string
        description: >-
          max_rate defines the maximum commission rate which validator can ever
          charge, as a fraction.
      max_change_rate:
        type: string
        description: >-
          max_change_rate defines the maximum daily increase of the validator
          commission, as a fraction.
    description: >-
      CommissionRates defines the initial commission rates to be used for
      creating

      a validator.
  cosmos.staking.v1beta1.Delegation:
    type: object
    properties:
      delegator_address:
        type: string
        description: delegator_address is the bech32-encoded address of the delegator.
      validator_address:
        type: string
        description: validator_address is the bech32-encoded address of the validator.
      shares:
        type: string
        description: shares define the delegation shares received.
    description: |-
      Delegation represents the bond with tokens held by an account. It is
      owned by one delegator, and is associated with the voting power of one
      validator.
  cosmos.staking.v1beta1.DelegationResponse:
    type: object
    properties:
      delegation:
        type: object
        properties:
          delegator_address:
            type: string
            description: delegator_address is the bech32-encoded address of the delegator.
          validator_address:
            type: string
            description: validator_address is the bech32-encoded address of the validator.
          shares:
            type: string
            description: shares define the delegation shares received.
        description: |-
          Delegation represents the bond with tokens held by an account. It is
          owned by one delegator, and is associated with the voting power of one
          validator.
      balance:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
    description: |-
      DelegationResponse is equivalent to Delegation except that it contains a
      balance in addition to shares which is more suitable for client responses.
  cosmos.staking.v1beta1.Description:
    type: object
    properties:
      moniker:
        type: string
        description: moniker defines a human-readable name for the validator.
      identity:
        type: string
        description: >-
          identity defines an optional identity signature (ex. UPort or
          Keybase).
      website:
        type: string
        description: website defines an optional website link.
      security_contact:
        type: string
        description: security_contact defines an optional email for security contact.
      details:
        type: string
        description: details define other optional details.
    description: Description defines a validator description.
  cosmos.staking.v1beta1.HistoricalInfo:
    type: object
    properties:
      header:
        type: object
        properties:
          version:
            title: basic block info
            type: object
            properties:
              block:
                type: string
                format: uint64
              app:
                type: string
                format: uint64
            description: >-
              Consensus captures the consensus rules for processing a block in
              the blockchain,

              including all blockchain data structures and the rules of the
              application's

              state transition machine.
          chain_id:
            type: string
          height:
            type: string
            format: int64
          time:
            type: string
            format: date-time
          last_block_id:
            title: prev block info
            type: object
            properties:
              hash:
                type: string
                format: byte
              part_set_header:
                type: object
                properties:
                  total:
                    type: integer
                    format: int64
                  hash:
                    type: string
                    format: byte
                title: PartsetHeader
          last_commit_hash:
            type: string
            format: byte
            title: hashes of block data
          data_hash:
            type: string
            format: byte
          validators_hash:
            type: string
            format: byte
            title: hashes from the app output from the prev block
          next_validators_hash:
            type: string
            format: byte
          consensus_hash:
            type: string
            format: byte
          app_hash:
            type: string
            format: byte
          last_results_hash:
            type: string
            format: byte
          evidence_hash:
            type: string
            format: byte
            title: consensus info
          proposer_address:
            type: string
            format: byte
        description: Header defines the structure of a Tendermint block header.
      valset:
        type: array
        items:
          type: object
          properties:
            operator_address:
              type: string
              description: >-
                operator_address defines the address of the validator's
                operator; bech encoded in JSON.
            consensus_pubkey:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            jailed:
              type: boolean
              description: >-
                jailed defined whether the validator has been jailed from bonded
                status or not.
            status:
              description: status is the validator status (bonded/unbonding/unbonded).
              type: string
              enum:
                - BOND_STATUS_UNSPECIFIED
                - BOND_STATUS_UNBONDED
                - BOND_STATUS_UNBONDING
                - BOND_STATUS_BONDED
              default: BOND_STATUS_UNSPECIFIED
            tokens:
              type: string
              description: tokens define the delegated tokens (incl. self-delegation).
            delegator_shares:
              type: string
              description: >-
                delegator_shares defines total shares issued to a validator's
                delegators.
            description:
              description: description defines the description terms for the validator.
              type: object
              properties:
                moniker:
                  type: string
                  description: moniker defines a human-readable name for the validator.
                identity:
                  type: string
                  description: >-
                    identity defines an optional identity signature (ex. UPort
                    or Keybase).
                website:
                  type: string
                  description: website defines an optional website link.
                security_contact:
                  type: string
                  description: >-
                    security_contact defines an optional email for security
                    contact.
                details:
                  type: string
                  description: details define other optional details.
            unbonding_height:
              type: string
              format: int64
              description: >-
                unbonding_height defines, if unbonding, the height at which this
                validator has begun unbonding.
            unbonding_time:
              type: string
              format: date-time
              description: >-
                unbonding_time defines, if unbonding, the min time for the
                validator to complete unbonding.
            commission:
              description: commission defines the commission parameters.
              type: object
              properties:
                commission_rates:
                  description: >-
                    commission_rates defines the initial commission rates to be
                    used for creating a validator.
                  type: object
                  properties:
                    rate:
                      type: string
                      description: >-
                        rate is the commission rate charged to delegators, as a
                        fraction.
                    max_rate:
                      type: string
                      description: >-
                        max_rate defines the maximum commission rate which
                        validator can ever charge, as a fraction.
                    max_change_rate:
                      type: string
                      description: >-
                        max_change_rate defines the maximum daily increase of
                        the validator commission, as a fraction.
                update_time:
                  type: string
                  format: date-time
                  description: >-
                    update_time is the last time the commission rate was
                    changed.
            min_self_delegation:
              type: string
              description: >-
                min_self_delegation is the validator's self declared minimum
                self delegation.
          description: >-
            Validator defines a validator, together with the total amount of the

            Validator's bond shares and their exchange rate to coins. Slashing
            results in

            a decrease in the exchange rate, allowing correct calculation of
            future

            undelegations without iterating over delegators. When coins are
            delegated to

            this validator, the validator is credited with a delegation whose
            number of

            bond shares is based on the amount of coins delegated divided by the
            current

            exchange rate. Voting power can be calculated as total bonded shares

            multiplied by exchange rate.
    description: >-
      HistoricalInfo contains header and validator information for a given
      block.

      It is stored as part of staking module's state, which persists the `n`
      most

      recent HistoricalInfo

      (`n` is set by the staking module's `historical_entries` parameter).
  cosmos.staking.v1beta1.Params:
    type: object
    properties:
      unbonding_time:
        type: string
        description: unbonding_time is the time duration of unbonding.
      max_validators:
        type: integer
        format: int64
        description: max_validators is the maximum number of validators.
      max_entries:
        type: integer
        format: int64
        description: >-
          max_entries is the max entries for either unbonding delegation or
          redelegation (per pair/trio).
      historical_entries:
        type: integer
        format: int64
        description: historical_entries is the number of historical entries to persist.
      bond_denom:
        type: string
        description: bond_denom defines the bondable coin denomination.
    description: Params defines the parameters for the staking module.
  cosmos.staking.v1beta1.Pool:
    type: object
    properties:
      not_bonded_tokens:
        type: string
      bonded_tokens:
        type: string
    description: |-
      Pool is used for tracking bonded and not-bonded token supply of the bond
      denomination.
  cosmos.staking.v1beta1.QueryDelegationResponse:
    type: object
    properties:
      delegation_response:
        type: object
        properties:
          delegation:
            type: object
            properties:
              delegator_address:
                type: string
                description: >-
                  delegator_address is the bech32-encoded address of the
                  delegator.
              validator_address:
                type: string
                description: >-
                  validator_address is the bech32-encoded address of the
                  validator.
              shares:
                type: string
                description: shares define the delegation shares received.
            description: >-
              Delegation represents the bond with tokens held by an account. It
              is

              owned by one delegator, and is associated with the voting power of
              one

              validator.
          balance:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom
              method

              signatures required by gogoproto.
        description: >-
          DelegationResponse is equivalent to Delegation except that it contains
          a

          balance in addition to shares which is more suitable for client
          responses.
    description: >-
      QueryDelegationResponse is response type for the Query/Delegation RPC
      method.
  cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse:
    type: object
    properties:
      delegation_responses:
        type: array
        items:
          type: object
          properties:
            delegation:
              type: object
              properties:
                delegator_address:
                  type: string
                  description: >-
                    delegator_address is the bech32-encoded address of the
                    delegator.
                validator_address:
                  type: string
                  description: >-
                    validator_address is the bech32-encoded address of the
                    validator.
                shares:
                  type: string
                  description: shares define the delegation shares received.
              description: >-
                Delegation represents the bond with tokens held by an account.
                It is

                owned by one delegator, and is associated with the voting power
                of one

                validator.
            balance:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
          description: >-
            DelegationResponse is equivalent to Delegation except that it
            contains a

            balance in addition to shares which is more suitable for client
            responses.
        description: delegation_responses defines all the delegations' info of a delegator.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: |-
      QueryDelegatorDelegationsResponse is response type for the
      Query/DelegatorDelegations RPC method.
  cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse:
    type: object
    properties:
      unbonding_responses:
        type: array
        items:
          type: object
          properties:
            delegator_address:
              type: string
              description: >-
                delegator_address is the bech32-encoded address of the
                delegator.
            validator_address:
              type: string
              description: >-
                validator_address is the bech32-encoded address of the
                validator.
            entries:
              type: array
              items:
                type: object
                properties:
                  creation_height:
                    type: string
                    format: int64
                    description: >-
                      creation_height is the height which the unbonding took
                      place.
                  completion_time:
                    type: string
                    format: date-time
                    description: completion_time is the unix time for unbonding completion.
                  initial_balance:
                    type: string
                    description: >-
                      initial_balance defines the tokens initially scheduled to
                      receive at completion.
                  balance:
                    type: string
                    description: balance defines the tokens to receive at completion.
                description: >-
                  UnbondingDelegationEntry defines an unbonding object with
                  relevant metadata.
              description: entries are the unbonding delegation entries.
          description: >-
            UnbondingDelegation stores all of a single delegator's unbonding
            bonds

            for a single validator in an time-ordered list.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: |-
      QueryUnbondingDelegatorDelegationsResponse is response type for the
      Query/UnbondingDelegatorDelegations RPC method.
  cosmos.staking.v1beta1.QueryDelegatorValidatorResponse:
    type: object
    properties:
      validator:
        type: object
        properties:
          operator_address:
            type: string
            description: >-
              operator_address defines the address of the validator's operator;
              bech encoded in JSON.
          consensus_pubkey:
            type: object
            properties:
              type_url:
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
              value:
                type: string
                format: byte
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := ptypes.MarshalAny(foo)
                   ...
                   foo := &pb.Foo{}
                   if err := ptypes.UnmarshalAny(any, foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".



              JSON

              ====

              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
          jailed:
            type: boolean
            description: >-
              jailed defined whether the validator has been jailed from bonded
              status or not.
          status:
            description: status is the validator status (bonded/unbonding/unbonded).
            type: string
            enum:
              - BOND_STATUS_UNSPECIFIED
              - BOND_STATUS_UNBONDED
              - BOND_STATUS_UNBONDING
              - BOND_STATUS_BONDED
            default: BOND_STATUS_UNSPECIFIED
          tokens:
            type: string
            description: tokens define the delegated tokens (incl. self-delegation).
          delegator_shares:
            type: string
            description: >-
              delegator_shares defines total shares issued to a validator's
              delegators.
          description:
            description: description defines the description terms for the validator.
            type: object
            properties:
              moniker:
                type: string
                description: moniker defines a human-readable name for the validator.
              identity:
                type: string
                description: >-
                  identity defines an optional identity signature (ex. UPort or
                  Keybase).
              website:
                type: string
                description: website defines an optional website link.
              security_contact:
                type: string
                description: >-
                  security_contact defines an optional email for security
                  contact.
              details:
                type: string
                description: details define other optional details.
          unbonding_height:
            type: string
            format: int64
            description: >-
              unbonding_height defines, if unbonding, the height at which this
              validator has begun unbonding.
          unbonding_time:
            type: string
            format: date-time
            description: >-
              unbonding_time defines, if unbonding, the min time for the
              validator to complete unbonding.
          commission:
            description: commission defines the commission parameters.
            type: object
            properties:
              commission_rates:
                description: >-
                  commission_rates defines the initial commission rates to be
                  used for creating a validator.
                type: object
                properties:
                  rate:
                    type: string
                    description: >-
                      rate is the commission rate charged to delegators, as a
                      fraction.
                  max_rate:
                    type: string
                    description: >-
                      max_rate defines the maximum commission rate which
                      validator can ever charge, as a fraction.
                  max_change_rate:
                    type: string
                    description: >-
                      max_change_rate defines the maximum daily increase of the
                      validator commission, as a fraction.
              update_time:
                type: string
                format: date-time
                description: update_time is the last time the commission rate was changed.
          min_self_delegation:
            type: string
            description: >-
              min_self_delegation is the validator's self declared minimum self
              delegation.
        description: >-
          Validator defines a validator, together with the total amount of the

          Validator's bond shares and their exchange rate to coins. Slashing
          results in

          a decrease in the exchange rate, allowing correct calculation of
          future

          undelegations without iterating over delegators. When coins are
          delegated to

          this validator, the validator is credited with a delegation whose
          number of

          bond shares is based on the amount of coins delegated divided by the
          current

          exchange rate. Voting power can be calculated as total bonded shares

          multiplied by exchange rate.
    description: |-
      QueryDelegatorValidatorResponse response type for the
      Query/DelegatorValidator RPC method.
  cosmos.staking.v1beta1.QueryDelegatorValidatorsResponse:
    type: object
    properties:
      validators:
        type: array
        items:
          type: object
          properties:
            operator_address:
              type: string
              description: >-
                operator_address defines the address of the validator's
                operator; bech encoded in JSON.
            consensus_pubkey:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            jailed:
              type: boolean
              description: >-
                jailed defined whether the validator has been jailed from bonded
                status or not.
            status:
              description: status is the validator status (bonded/unbonding/unbonded).
              type: string
              enum:
                - BOND_STATUS_UNSPECIFIED
                - BOND_STATUS_UNBONDED
                - BOND_STATUS_UNBONDING
                - BOND_STATUS_BONDED
              default: BOND_STATUS_UNSPECIFIED
            tokens:
              type: string
              description: tokens define the delegated tokens (incl. self-delegation).
            delegator_shares:
              type: string
              description: >-
                delegator_shares defines total shares issued to a validator's
                delegators.
            description:
              description: description defines the description terms for the validator.
              type: object
              properties:
                moniker:
                  type: string
                  description: moniker defines a human-readable name for the validator.
                identity:
                  type: string
                  description: >-
                    identity defines an optional identity signature (ex. UPort
                    or Keybase).
                website:
                  type: string
                  description: website defines an optional website link.
                security_contact:
                  type: string
                  description: >-
                    security_contact defines an optional email for security
                    contact.
                details:
                  type: string
                  description: details define other optional details.
            unbonding_height:
              type: string
              format: int64
              description: >-
                unbonding_height defines, if unbonding, the height at which this
                validator has begun unbonding.
            unbonding_time:
              type: string
              format: date-time
              description: >-
                unbonding_time defines, if unbonding, the min time for the
                validator to complete unbonding.
            commission:
              description: commission defines the commission parameters.
              type: object
              properties:
                commission_rates:
                  description: >-
                    commission_rates defines the initial commission rates to be
                    used for creating a validator.
                  type: object
                  properties:
                    rate:
                      type: string
                      description: >-
                        rate is the commission rate charged to delegators, as a
                        fraction.
                    max_rate:
                      type: string
                      description: >-
                        max_rate defines the maximum commission rate which
                        validator can ever charge, as a fraction.
                    max_change_rate:
                      type: string
                      description: >-
                        max_change_rate defines the maximum daily increase of
                        the validator commission, as a fraction.
                update_time:
                  type: string
                  format: date-time
                  description: >-
                    update_time is the last time the commission rate was
                    changed.
            min_self_delegation:
              type: string
              description: >-
                min_self_delegation is the validator's self declared minimum
                self delegation.
          description: >-
            Validator defines a validator, together with the total amount of the

            Validator's bond shares and their exchange rate to coins. Slashing
            results in

            a decrease in the exchange rate, allowing correct calculation of
            future

            undelegations without iterating over delegators. When coins are
            delegated to

            this validator, the validator is credited with a delegation whose
            number of

            bond shares is based on the amount of coins delegated divided by the
            current

            exchange rate. Voting power can be calculated as total bonded shares

            multiplied by exchange rate.
        description: validators defines the the validators' info of a delegator.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: |-
      QueryDelegatorValidatorsResponse is response type for the
      Query/DelegatorValidators RPC method.
  cosmos.staking.v1beta1.QueryHistoricalInfoResponse:
    type: object
    properties:
      hist:
        description: hist defines the historical info at the given height.
        type: object
        properties:
          header:
            type: object
            properties:
              version:
                title: basic block info
                type: object
                properties:
                  block:
                    type: string
                    format: uint64
                  app:
                    type: string
                    format: uint64
                description: >-
                  Consensus captures the consensus rules for processing a block
                  in the blockchain,

                  including all blockchain data structures and the rules of the
                  application's

                  state transition machine.
              chain_id:
                type: string
              height:
                type: string
                format: int64
              time:
                type: string
                format: date-time
              last_block_id:
                title: prev block info
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
              last_commit_hash:
                type: string
                format: byte
                title: hashes of block data
              data_hash:
                type: string
                format: byte
              validators_hash:
                type: string
                format: byte
                title: hashes from the app output from the prev block
              next_validators_hash:
                type: string
                format: byte
              consensus_hash:
                type: string
                format: byte
              app_hash:
                type: string
                format: byte
              last_results_hash:
                type: string
                format: byte
              evidence_hash:
                type: string
                format: byte
                title: consensus info
              proposer_address:
                type: string
                format: byte
            description: Header defines the structure of a Tendermint block header.
          valset:
            type: array
            items:
              type: object
              properties:
                operator_address:
                  type: string
                  description: >-
                    operator_address defines the address of the validator's
                    operator; bech encoded in JSON.
                consensus_pubkey:
                  type: object
                  properties:
                    type_url:
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                    value:
                      type: string
                      format: byte
                      description: >-
                        Must be a valid serialized protocol buffer of the above
                        specified type.
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := ptypes.MarshalAny(foo)
                         ...
                         foo := &pb.Foo{}
                         if err := ptypes.UnmarshalAny(any, foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                jailed:
                  type: boolean
                  description: >-
                    jailed defined whether the validator has been jailed from
                    bonded status or not.
                status:
                  description: status is the validator status (bonded/unbonding/unbonded).
                  type: string
                  enum:
                    - BOND_STATUS_UNSPECIFIED
                    - BOND_STATUS_UNBONDED
                    - BOND_STATUS_UNBONDING
                    - BOND_STATUS_BONDED
                  default: BOND_STATUS_UNSPECIFIED
                tokens:
                  type: string
                  description: tokens define the delegated tokens (incl. self-delegation).
                delegator_shares:
                  type: string
                  description: >-
                    delegator_shares defines total shares issued to a
                    validator's delegators.
                description:
                  description: description defines the description terms for the validator.
                  type: object
                  properties:
                    moniker:
                      type: string
                      description: moniker defines a human-readable name for the validator.
                    identity:
                      type: string
                      description: >-
                        identity defines an optional identity signature (ex.
                        UPort or Keybase).
                    website:
                      type: string
                      description: website defines an optional website link.
                    security_contact:
                      type: string
                      description: >-
                        security_contact defines an optional email for security
                        contact.
                    details:
                      type: string
                      description: details define other optional details.
                unbonding_height:
                  type: string
                  format: int64
                  description: >-
                    unbonding_height defines, if unbonding, the height at which
                    this validator has begun unbonding.
                unbonding_time:
                  type: string
                  format: date-time
                  description: >-
                    unbonding_time defines, if unbonding, the min time for the
                    validator to complete unbonding.
                commission:
                  description: commission defines the commission parameters.
                  type: object
                  properties:
                    commission_rates:
                      description: >-
                        commission_rates defines the initial commission rates to
                        be used for creating a validator.
                      type: object
                      properties:
                        rate:
                          type: string
                          description: >-
                            rate is the commission rate charged to delegators,
                            as a fraction.
                        max_rate:
                          type: string
                          description: >-
                            max_rate defines the maximum commission rate which
                            validator can ever charge, as a fraction.
                        max_change_rate:
                          type: string
                          description: >-
                            max_change_rate defines the maximum daily increase
                            of the validator commission, as a fraction.
                    update_time:
                      type: string
                      format: date-time
                      description: >-
                        update_time is the last time the commission rate was
                        changed.
                min_self_delegation:
                  type: string
                  description: >-
                    min_self_delegation is the validator's self declared minimum
                    self delegation.
              description: >-
                Validator defines a validator, together with the total amount of
                the

                Validator's bond shares and their exchange rate to coins.
                Slashing results in

                a decrease in the exchange rate, allowing correct calculation of
                future

                undelegations without iterating over delegators. When coins are
                delegated to

                this validator, the validator is credited with a delegation
                whose number of

                bond shares is based on the amount of coins delegated divided by
                the current

                exchange rate. Voting power can be calculated as total bonded
                shares

                multiplied by exchange rate.
    description: >-
      QueryHistoricalInfoResponse is response type for the Query/HistoricalInfo
      RPC

      method.
  cosmos.staking.v1beta1.QueryParamsResponse:
    type: object
    properties:
      params:
        description: params holds all the parameters of this module.
        type: object
        properties:
          unbonding_time:
            type: string
            description: unbonding_time is the time duration of unbonding.
          max_validators:
            type: integer
            format: int64
            description: max_validators is the maximum number of validators.
          max_entries:
            type: integer
            format: int64
            description: >-
              max_entries is the max entries for either unbonding delegation or
              redelegation (per pair/trio).
          historical_entries:
            type: integer
            format: int64
            description: historical_entries is the number of historical entries to persist.
          bond_denom:
            type: string
            description: bond_denom defines the bondable coin denomination.
    description: QueryParamsResponse is response type for the Query/Params RPC method.
  cosmos.staking.v1beta1.QueryPoolResponse:
    type: object
    properties:
      pool:
        description: pool defines the pool info.
        type: object
        properties:
          not_bonded_tokens:
            type: string
          bonded_tokens:
            type: string
    description: QueryPoolResponse is response type for the Query/Pool RPC method.
  cosmos.staking.v1beta1.QueryRedelegationsResponse:
    type: object
    properties:
      redelegation_responses:
        type: array
        items:
          type: object
          properties:
            redelegation:
              type: object
              properties:
                delegator_address:
                  type: string
                  description: >-
                    delegator_address is the bech32-encoded address of the
                    delegator.
                validator_src_address:
                  type: string
                  description: >-
                    validator_src_address is the validator redelegation source
                    operator address.
                validator_dst_address:
                  type: string
                  description: >-
                    validator_dst_address is the validator redelegation
                    destination operator address.
                entries:
                  type: array
                  items:
                    type: object
                    properties:
                      creation_height:
                        type: string
                        format: int64
                        description: >-
                          creation_height  defines the height which the
                          redelegation took place.
                      completion_time:
                        type: string
                        format: date-time
                        description: >-
                          completion_time defines the unix time for redelegation
                          completion.
                      initial_balance:
                        type: string
                        description: >-
                          initial_balance defines the initial balance when
                          redelegation started.
                      shares_dst:
                        type: string
                        description: >-
                          shares_dst is the amount of destination-validator
                          shares created by redelegation.
                    description: >-
                      RedelegationEntry defines a redelegation object with
                      relevant metadata.
                  description: entries are the redelegation entries.
              description: >-
                Redelegation contains the list of a particular delegator's
                redelegating bonds

                from a particular source validator to a particular destination
                validator.
            entries:
              type: array
              items:
                type: object
                properties:
                  redelegation_entry:
                    type: object
                    properties:
                      creation_height:
                        type: string
                        format: int64
                        description: >-
                          creation_height  defines the height which the
                          redelegation took place.
                      completion_time:
                        type: string
                        format: date-time
                        description: >-
                          completion_time defines the unix time for redelegation
                          completion.
                      initial_balance:
                        type: string
                        description: >-
                          initial_balance defines the initial balance when
                          redelegation started.
                      shares_dst:
                        type: string
                        description: >-
                          shares_dst is the amount of destination-validator
                          shares created by redelegation.
                    description: >-
                      RedelegationEntry defines a redelegation object with
                      relevant metadata.
                  balance:
                    type: string
                description: >-
                  RedelegationEntryResponse is equivalent to a RedelegationEntry
                  except that it

                  contains a balance in addition to shares which is more
                  suitable for client

                  responses.
          description: >-
            RedelegationResponse is equivalent to a Redelegation except that its
            entries

            contain a balance in addition to shares which is more suitable for
            client

            responses.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryRedelegationsResponse is response type for the Query/Redelegations
      RPC

      method.
  cosmos.staking.v1beta1.QueryUnbondingDelegationResponse:
    type: object
    properties:
      unbond:
        type: object
        properties:
          delegator_address:
            type: string
            description: delegator_address is the bech32-encoded address of the delegator.
          validator_address:
            type: string
            description: validator_address is the bech32-encoded address of the validator.
          entries:
            type: array
            items:
              type: object
              properties:
                creation_height:
                  type: string
                  format: int64
                  description: >-
                    creation_height is the height which the unbonding took
                    place.
                completion_time:
                  type: string
                  format: date-time
                  description: completion_time is the unix time for unbonding completion.
                initial_balance:
                  type: string
                  description: >-
                    initial_balance defines the tokens initially scheduled to
                    receive at completion.
                balance:
                  type: string
                  description: balance defines the tokens to receive at completion.
              description: >-
                UnbondingDelegationEntry defines an unbonding object with
                relevant metadata.
            description: entries are the unbonding delegation entries.
        description: |-
          UnbondingDelegation stores all of a single delegator's unbonding bonds
          for a single validator in an time-ordered list.
    description: |-
      QueryDelegationResponse is response type for the Query/UnbondingDelegation
      RPC method.
  cosmos.staking.v1beta1.QueryValidatorDelegationsResponse:
    type: object
    properties:
      delegation_responses:
        type: array
        items:
          type: object
          properties:
            delegation:
              type: object
              properties:
                delegator_address:
                  type: string
                  description: >-
                    delegator_address is the bech32-encoded address of the
                    delegator.
                validator_address:
                  type: string
                  description: >-
                    validator_address is the bech32-encoded address of the
                    validator.
                shares:
                  type: string
                  description: shares define the delegation shares received.
              description: >-
                Delegation represents the bond with tokens held by an account.
                It is

                owned by one delegator, and is associated with the voting power
                of one

                validator.
            balance:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
          description: >-
            DelegationResponse is equivalent to Delegation except that it
            contains a

            balance in addition to shares which is more suitable for client
            responses.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    title: |-
      QueryValidatorDelegationsResponse is response type for the
      Query/ValidatorDelegations RPC method
  cosmos.staking.v1beta1.QueryValidatorResponse:
    type: object
    properties:
      validator:
        type: object
        properties:
          operator_address:
            type: string
            description: >-
              operator_address defines the address of the validator's operator;
              bech encoded in JSON.
          consensus_pubkey:
            type: object
            properties:
              type_url:
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
              value:
                type: string
                format: byte
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := ptypes.MarshalAny(foo)
                   ...
                   foo := &pb.Foo{}
                   if err := ptypes.UnmarshalAny(any, foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".



              JSON

              ====

              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
          jailed:
            type: boolean
            description: >-
              jailed defined whether the validator has been jailed from bonded
              status or not.
          status:
            description: status is the validator status (bonded/unbonding/unbonded).
            type: string
            enum:
              - BOND_STATUS_UNSPECIFIED
              - BOND_STATUS_UNBONDED
              - BOND_STATUS_UNBONDING
              - BOND_STATUS_BONDED
            default: BOND_STATUS_UNSPECIFIED
          tokens:
            type: string
            description: tokens define the delegated tokens (incl. self-delegation).
          delegator_shares:
            type: string
            description: >-
              delegator_shares defines total shares issued to a validator's
              delegators.
          description:
            description: description defines the description terms for the validator.
            type: object
            properties:
              moniker:
                type: string
                description: moniker defines a human-readable name for the validator.
              identity:
                type: string
                description: >-
                  identity defines an optional identity signature (ex. UPort or
                  Keybase).
              website:
                type: string
                description: website defines an optional website link.
              security_contact:
                type: string
                description: >-
                  security_contact defines an optional email for security
                  contact.
              details:
                type: string
                description: details define other optional details.
          unbonding_height:
            type: string
            format: int64
            description: >-
              unbonding_height defines, if unbonding, the height at which this
              validator has begun unbonding.
          unbonding_time:
            type: string
            format: date-time
            description: >-
              unbonding_time defines, if unbonding, the min time for the
              validator to complete unbonding.
          commission:
            description: commission defines the commission parameters.
            type: object
            properties:
              commission_rates:
                description: >-
                  commission_rates defines the initial commission rates to be
                  used for creating a validator.
                type: object
                properties:
                  rate:
                    type: string
                    description: >-
                      rate is the commission rate charged to delegators, as a
                      fraction.
                  max_rate:
                    type: string
                    description: >-
                      max_rate defines the maximum commission rate which
                      validator can ever charge, as a fraction.
                  max_change_rate:
                    type: string
                    description: >-
                      max_change_rate defines the maximum daily increase of the
                      validator commission, as a fraction.
              update_time:
                type: string
                format: date-time
                description: update_time is the last time the commission rate was changed.
          min_self_delegation:
            type: string
            description: >-
              min_self_delegation is the validator's self declared minimum self
              delegation.
        description: >-
          Validator defines a validator, together with the total amount of the

          Validator's bond shares and their exchange rate to coins. Slashing
          results in

          a decrease in the exchange rate, allowing correct calculation of
          future

          undelegations without iterating over delegators. When coins are
          delegated to

          this validator, the validator is credited with a delegation whose
          number of

          bond shares is based on the amount of coins delegated divided by the
          current

          exchange rate. Voting power can be calculated as total bonded shares

          multiplied by exchange rate.
    title: QueryValidatorResponse is response type for the Query/Validator RPC method
  cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsResponse:
    type: object
    properties:
      unbonding_responses:
        type: array
        items:
          type: object
          properties:
            delegator_address:
              type: string
              description: >-
                delegator_address is the bech32-encoded address of the
                delegator.
            validator_address:
              type: string
              description: >-
                validator_address is the bech32-encoded address of the
                validator.
            entries:
              type: array
              items:
                type: object
                properties:
                  creation_height:
                    type: string
                    format: int64
                    description: >-
                      creation_height is the height which the unbonding took
                      place.
                  completion_time:
                    type: string
                    format: date-time
                    description: completion_time is the unix time for unbonding completion.
                  initial_balance:
                    type: string
                    description: >-
                      initial_balance defines the tokens initially scheduled to
                      receive at completion.
                  balance:
                    type: string
                    description: balance defines the tokens to receive at completion.
                description: >-
                  UnbondingDelegationEntry defines an unbonding object with
                  relevant metadata.
              description: entries are the unbonding delegation entries.
          description: >-
            UnbondingDelegation stores all of a single delegator's unbonding
            bonds

            for a single validator in an time-ordered list.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: |-
      QueryValidatorUnbondingDelegationsResponse is response type for the
      Query/ValidatorUnbondingDelegations RPC method.
  cosmos.staking.v1beta1.QueryValidatorsResponse:
    type: object
    properties:
      validators:
        type: array
        items:
          type: object
          properties:
            operator_address:
              type: string
              description: >-
                operator_address defines the address of the validator's
                operator; bech encoded in JSON.
            consensus_pubkey:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            jailed:
              type: boolean
              description: >-
                jailed defined whether the validator has been jailed from bonded
                status or not.
            status:
              description: status is the validator status (bonded/unbonding/unbonded).
              type: string
              enum:
                - BOND_STATUS_UNSPECIFIED
                - BOND_STATUS_UNBONDED
                - BOND_STATUS_UNBONDING
                - BOND_STATUS_BONDED
              default: BOND_STATUS_UNSPECIFIED
            tokens:
              type: string
              description: tokens define the delegated tokens (incl. self-delegation).
            delegator_shares:
              type: string
              description: >-
                delegator_shares defines total shares issued to a validator's
                delegators.
            description:
              description: description defines the description terms for the validator.
              type: object
              properties:
                moniker:
                  type: string
                  description: moniker defines a human-readable name for the validator.
                identity:
                  type: string
                  description: >-
                    identity defines an optional identity signature (ex. UPort
                    or Keybase).
                website:
                  type: string
                  description: website defines an optional website link.
                security_contact:
                  type: string
                  description: >-
                    security_contact defines an optional email for security
                    contact.
                details:
                  type: string
                  description: details define other optional details.
            unbonding_height:
              type: string
              format: int64
              description: >-
                unbonding_height defines, if unbonding, the height at which this
                validator has begun unbonding.
            unbonding_time:
              type: string
              format: date-time
              description: >-
                unbonding_time defines, if unbonding, the min time for the
                validator to complete unbonding.
            commission:
              description: commission defines the commission parameters.
              type: object
              properties:
                commission_rates:
                  description: >-
                    commission_rates defines the initial commission rates to be
                    used for creating a validator.
                  type: object
                  properties:
                    rate:
                      type: string
                      description: >-
                        rate is the commission rate charged to delegators, as a
                        fraction.
                    max_rate:
                      type: string
                      description: >-
                        max_rate defines the maximum commission rate which
                        validator can ever charge, as a fraction.
                    max_change_rate:
                      type: string
                      description: >-
                        max_change_rate defines the maximum daily increase of
                        the validator commission, as a fraction.
                update_time:
                  type: string
                  format: date-time
                  description: >-
                    update_time is the last time the commission rate was
                    changed.
            min_self_delegation:
              type: string
              description: >-
                min_self_delegation is the validator's self declared minimum
                self delegation.
          description: >-
            Validator defines a validator, together with the total amount of the

            Validator's bond shares and their exchange rate to coins. Slashing
            results in

            a decrease in the exchange rate, allowing correct calculation of
            future

            undelegations without iterating over delegators. When coins are
            delegated to

            this validator, the validator is credited with a delegation whose
            number of

            bond shares is based on the amount of coins delegated divided by the
            current

            exchange rate. Voting power can be calculated as total bonded shares

            multiplied by exchange rate.
        description: validators contains all the queried validators.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    title: >-
      QueryValidatorsResponse is response type for the Query/Validators RPC
      method
  cosmos.staking.v1beta1.Redelegation:
    type: object
    properties:
      delegator_address:
        type: string
        description: delegator_address is the bech32-encoded address of the delegator.
      validator_src_address:
        type: string
        description: >-
          validator_src_address is the validator redelegation source operator
          address.
      validator_dst_address:
        type: string
        description: >-
          validator_dst_address is the validator redelegation destination
          operator address.
      entries:
        type: array
        items:
          type: object
          properties:
            creation_height:
              type: string
              format: int64
              description: >-
                creation_height  defines the height which the redelegation took
                place.
            completion_time:
              type: string
              format: date-time
              description: >-
                completion_time defines the unix time for redelegation
                completion.
            initial_balance:
              type: string
              description: >-
                initial_balance defines the initial balance when redelegation
                started.
            shares_dst:
              type: string
              description: >-
                shares_dst is the amount of destination-validator shares created
                by redelegation.
          description: >-
            RedelegationEntry defines a redelegation object with relevant
            metadata.
        description: entries are the redelegation entries.
    description: >-
      Redelegation contains the list of a particular delegator's redelegating
      bonds

      from a particular source validator to a particular destination validator.
  cosmos.staking.v1beta1.RedelegationEntry:
    type: object
    properties:
      creation_height:
        type: string
        format: int64
        description: creation_height  defines the height which the redelegation took place.
      completion_time:
        type: string
        format: date-time
        description: completion_time defines the unix time for redelegation completion.
      initial_balance:
        type: string
        description: initial_balance defines the initial balance when redelegation started.
      shares_dst:
        type: string
        description: >-
          shares_dst is the amount of destination-validator shares created by
          redelegation.
    description: RedelegationEntry defines a redelegation object with relevant metadata.
  cosmos.staking.v1beta1.RedelegationEntryResponse:
    type: object
    properties:
      redelegation_entry:
        type: object
        properties:
          creation_height:
            type: string
            format: int64
            description: >-
              creation_height  defines the height which the redelegation took
              place.
          completion_time:
            type: string
            format: date-time
            description: completion_time defines the unix time for redelegation completion.
          initial_balance:
            type: string
            description: >-
              initial_balance defines the initial balance when redelegation
              started.
          shares_dst:
            type: string
            description: >-
              shares_dst is the amount of destination-validator shares created
              by redelegation.
        description: >-
          RedelegationEntry defines a redelegation object with relevant
          metadata.
      balance:
        type: string
    description: >-
      RedelegationEntryResponse is equivalent to a RedelegationEntry except that
      it

      contains a balance in addition to shares which is more suitable for client

      responses.
  cosmos.staking.v1beta1.RedelegationResponse:
    type: object
    properties:
      redelegation:
        type: object
        properties:
          delegator_address:
            type: string
            description: delegator_address is the bech32-encoded address of the delegator.
          validator_src_address:
            type: string
            description: >-
              validator_src_address is the validator redelegation source
              operator address.
          validator_dst_address:
            type: string
            description: >-
              validator_dst_address is the validator redelegation destination
              operator address.
          entries:
            type: array
            items:
              type: object
              properties:
                creation_height:
                  type: string
                  format: int64
                  description: >-
                    creation_height  defines the height which the redelegation
                    took place.
                completion_time:
                  type: string
                  format: date-time
                  description: >-
                    completion_time defines the unix time for redelegation
                    completion.
                initial_balance:
                  type: string
                  description: >-
                    initial_balance defines the initial balance when
                    redelegation started.
                shares_dst:
                  type: string
                  description: >-
                    shares_dst is the amount of destination-validator shares
                    created by redelegation.
              description: >-
                RedelegationEntry defines a redelegation object with relevant
                metadata.
            description: entries are the redelegation entries.
        description: >-
          Redelegation contains the list of a particular delegator's
          redelegating bonds

          from a particular source validator to a particular destination
          validator.
      entries:
        type: array
        items:
          type: object
          properties:
            redelegation_entry:
              type: object
              properties:
                creation_height:
                  type: string
                  format: int64
                  description: >-
                    creation_height  defines the height which the redelegation
                    took place.
                completion_time:
                  type: string
                  format: date-time
                  description: >-
                    completion_time defines the unix time for redelegation
                    completion.
                initial_balance:
                  type: string
                  description: >-
                    initial_balance defines the initial balance when
                    redelegation started.
                shares_dst:
                  type: string
                  description: >-
                    shares_dst is the amount of destination-validator shares
                    created by redelegation.
              description: >-
                RedelegationEntry defines a redelegation object with relevant
                metadata.
            balance:
              type: string
          description: >-
            RedelegationEntryResponse is equivalent to a RedelegationEntry
            except that it

            contains a balance in addition to shares which is more suitable for
            client

            responses.
    description: >-
      RedelegationResponse is equivalent to a Redelegation except that its
      entries

      contain a balance in addition to shares which is more suitable for client

      responses.
  cosmos.staking.v1beta1.UnbondingDelegation:
    type: object
    properties:
      delegator_address:
        type: string
        description: delegator_address is the bech32-encoded address of the delegator.
      validator_address:
        type: string
        description: validator_address is the bech32-encoded address of the validator.
      entries:
        type: array
        items:
          type: object
          properties:
            creation_height:
              type: string
              format: int64
              description: creation_height is the height which the unbonding took place.
            completion_time:
              type: string
              format: date-time
              description: completion_time is the unix time for unbonding completion.
            initial_balance:
              type: string
              description: >-
                initial_balance defines the tokens initially scheduled to
                receive at completion.
            balance:
              type: string
              description: balance defines the tokens to receive at completion.
          description: >-
            UnbondingDelegationEntry defines an unbonding object with relevant
            metadata.
        description: entries are the unbonding delegation entries.
    description: |-
      UnbondingDelegation stores all of a single delegator's unbonding bonds
      for a single validator in an time-ordered list.
  cosmos.staking.v1beta1.UnbondingDelegationEntry:
    type: object
    properties:
      creation_height:
        type: string
        format: int64
        description: creation_height is the height which the unbonding took place.
      completion_time:
        type: string
        format: date-time
        description: completion_time is the unix time for unbonding completion.
      initial_balance:
        type: string
        description: >-
          initial_balance defines the tokens initially scheduled to receive at
          completion.
      balance:
        type: string
        description: balance defines the tokens to receive at completion.
    description: >-
      UnbondingDelegationEntry defines an unbonding object with relevant
      metadata.
  cosmos.staking.v1beta1.Validator:
    type: object
    properties:
      operator_address:
        type: string
        description: >-
          operator_address defines the address of the validator's operator; bech
          encoded in JSON.
      consensus_pubkey:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      jailed:
        type: boolean
        description: >-
          jailed defined whether the validator has been jailed from bonded
          status or not.
      status:
        description: status is the validator status (bonded/unbonding/unbonded).
        type: string
        enum:
          - BOND_STATUS_UNSPECIFIED
          - BOND_STATUS_UNBONDED
          - BOND_STATUS_UNBONDING
          - BOND_STATUS_BONDED
        default: BOND_STATUS_UNSPECIFIED
      tokens:
        type: string
        description: tokens define the delegated tokens (incl. self-delegation).
      delegator_shares:
        type: string
        description: >-
          delegator_shares defines total shares issued to a validator's
          delegators.
      description:
        description: description defines the description terms for the validator.
        type: object
        properties:
          moniker:
            type: string
            description: moniker defines a human-readable name for the validator.
          identity:
            type: string
            description: >-
              identity defines an optional identity signature (ex. UPort or
              Keybase).
          website:
            type: string
            description: website defines an optional website link.
          security_contact:
            type: string
            description: security_contact defines an optional email for security contact.
          details:
            type: string
            description: details define other optional details.
      unbonding_height:
        type: string
        format: int64
        description: >-
          unbonding_height defines, if unbonding, the height at which this
          validator has begun unbonding.
      unbonding_time:
        type: string
        format: date-time
        description: >-
          unbonding_time defines, if unbonding, the min time for the validator
          to complete unbonding.
      commission:
        description: commission defines the commission parameters.
        type: object
        properties:
          commission_rates:
            description: >-
              commission_rates defines the initial commission rates to be used
              for creating a validator.
            type: object
            properties:
              rate:
                type: string
                description: >-
                  rate is the commission rate charged to delegators, as a
                  fraction.
              max_rate:
                type: string
                description: >-
                  max_rate defines the maximum commission rate which validator
                  can ever charge, as a fraction.
              max_change_rate:
                type: string
                description: >-
                  max_change_rate defines the maximum daily increase of the
                  validator commission, as a fraction.
          update_time:
            type: string
            format: date-time
            description: update_time is the last time the commission rate was changed.
      min_self_delegation:
        type: string
        description: >-
          min_self_delegation is the validator's self declared minimum self
          delegation.
    description: >-
      Validator defines a validator, together with the total amount of the

      Validator's bond shares and their exchange rate to coins. Slashing results
      in

      a decrease in the exchange rate, allowing correct calculation of future

      undelegations without iterating over delegators. When coins are delegated
      to

      this validator, the validator is credited with a delegation whose number
      of

      bond shares is based on the amount of coins delegated divided by the
      current

      exchange rate. Voting power can be calculated as total bonded shares

      multiplied by exchange rate.
  tendermint.types.BlockID:
    type: object
    properties:
      hash:
        type: string
        format: byte
      part_set_header:
        type: object
        properties:
          total:
            type: integer
            format: int64
          hash:
            type: string
            format: byte
        title: PartsetHeader
    title: BlockID
  tendermint.types.Header:
    type: object
    properties:
      version:
        title: basic block info
        type: object
        properties:
          block:
            type: string
            format: uint64
          app:
            type: string
            format: uint64
        description: >-
          Consensus captures the consensus rules for processing a block in the
          blockchain,

          including all blockchain data structures and the rules of the
          application's

          state transition machine.
      chain_id:
        type: string
      height:
        type: string
        format: int64
      time:
        type: string
        format: date-time
      last_block_id:
        title: prev block info
        type: object
        properties:
          hash:
            type: string
            format: byte
          part_set_header:
            type: object
            properties:
              total:
                type: integer
                format: int64
              hash:
                type: string
                format: byte
            title: PartsetHeader
      last_commit_hash:
        type: string
        format: byte
        title: hashes of block data
      data_hash:
        type: string
        format: byte
      validators_hash:
        type: string
        format: byte
        title: hashes from the app output from the prev block
      next_validators_hash:
        type: string
        format: byte
      consensus_hash:
        type: string
        format: byte
      app_hash:
        type: string
        format: byte
      last_results_hash:
        type: string
        format: byte
      evidence_hash:
        type: string
        format: byte
        title: consensus info
      proposer_address:
        type: string
        format: byte
    description: Header defines the structure of a Tendermint block header.
  tendermint.types.PartSetHeader:
    type: object
    properties:
      total:
        type: integer
        format: int64
      hash:
        type: string
        format: byte
    title: PartsetHeader
  tendermint.version.Consensus:
    type: object
    properties:
      block:
        type: string
        format: uint64
      app:
        type: string
        format: uint64
    description: >-
      Consensus captures the consensus rules for processing a block in the
      blockchain,

      including all blockchain data structures and the rules of the
      application's

      state transition machine.
  cosmos.base.abci.v1beta1.ABCIMessageLog:
    type: object
    properties:
      msg_index:
        type: integer
        format: int64
      log:
        type: string
      events:
        type: array
        items:
          type: object
          properties:
            type:
              type: string
            attributes:
              type: array
              items:
                type: object
                properties:
                  key:
                    type: string
                  value:
                    type: string
                description: >-
                  Attribute defines an attribute wrapper where the key and value
                  are

                  strings instead of raw bytes.
          description: |-
            StringEvent defines en Event object wrapper where all the attributes
            contain key/value pairs that are strings instead of raw bytes.
        description: |-
          Events contains a slice of Event objects that were emitted during some
          execution.
    description: >-
      ABCIMessageLog defines a structure containing an indexed tx ABCI message
      log.
  cosmos.base.abci.v1beta1.Attribute:
    type: object
    properties:
      key:
        type: string
      value:
        type: string
    description: |-
      Attribute defines an attribute wrapper where the key and value are
      strings instead of raw bytes.
  cosmos.base.abci.v1beta1.GasInfo:
    type: object
    properties:
      gas_wanted:
        type: string
        format: uint64
        description: GasWanted is the maximum units of work we allow this tx to perform.
      gas_used:
        type: string
        format: uint64
        description: GasUsed is the amount of gas actually consumed.
    description: GasInfo defines tx execution gas context.
  cosmos.base.abci.v1beta1.Result:
    type: object
    properties:
      data:
        type: string
        format: byte
        description: >-
          Data is any data returned from message or handler execution. It MUST
          be

          length prefixed in order to separate data from multiple message
          executions.
      log:
        type: string
        description: Log contains the log information from message or handler execution.
      events:
        type: array
        items:
          type: object
          properties:
            type:
              type: string
            attributes:
              type: array
              items:
                type: object
                properties:
                  key:
                    type: string
                    format: byte
                  value:
                    type: string
                    format: byte
                  index:
                    type: boolean
                description: >-
                  EventAttribute is a single key-value pair, associated with an
                  event.
          description: >-
            Event allows application developers to attach additional information
            to

            ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and
            ResponseDeliverTx.

            Later, transactions may be queried using these events.
        description: >-
          Events contains a slice of Event objects that were emitted during
          message

          or handler execution.
    description: Result is the union of ResponseFormat and ResponseCheckTx.
  cosmos.base.abci.v1beta1.StringEvent:
    type: object
    properties:
      type:
        type: string
      attributes:
        type: array
        items:
          type: object
          properties:
            key:
              type: string
            value:
              type: string
          description: |-
            Attribute defines an attribute wrapper where the key and value are
            strings instead of raw bytes.
    description: |-
      StringEvent defines en Event object wrapper where all the attributes
      contain key/value pairs that are strings instead of raw bytes.
  cosmos.base.abci.v1beta1.TxResponse:
    type: object
    properties:
      height:
        type: string
        format: int64
        title: The block height
      txhash:
        type: string
        description: The transaction hash.
      codespace:
        type: string
        title: Namespace for the Code
      code:
        type: integer
        format: int64
        description: Response code.
      data:
        type: string
        description: Result bytes, if any.
      raw_log:
        type: string
        description: |-
          The output of the application's logger (raw string). May be
          non-deterministic.
      logs:
        type: array
        items:
          type: object
          properties:
            msg_index:
              type: integer
              format: int64
            log:
              type: string
            events:
              type: array
              items:
                type: object
                properties:
                  type:
                    type: string
                  attributes:
                    type: array
                    items:
                      type: object
                      properties:
                        key:
                          type: string
                        value:
                          type: string
                      description: >-
                        Attribute defines an attribute wrapper where the key and
                        value are

                        strings instead of raw bytes.
                description: >-
                  StringEvent defines en Event object wrapper where all the
                  attributes

                  contain key/value pairs that are strings instead of raw bytes.
              description: >-
                Events contains a slice of Event objects that were emitted
                during some

                execution.
          description: >-
            ABCIMessageLog defines a structure containing an indexed tx ABCI
            message log.
        description: >-
          The output of the application's logger (typed). May be
          non-deterministic.
      info:
        type: string
        description: Additional information. May be non-deterministic.
      gas_wanted:
        type: string
        format: int64
        description: Amount of gas requested for transaction.
      gas_used:
        type: string
        format: int64
        description: Amount of gas consumed by transaction.
      tx:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      timestamp:
        type: string
        description: >-
          Time of the previous block. For heights > 1, it's the weighted median
          of

          the timestamps of the valid votes in the block.LastCommit. For height
          == 1,

          it's genesis time.
      events:
        type: array
        items:
          type: object
          properties:
            type:
              type: string
            attributes:
              type: array
              items:
                type: object
                properties:
                  key:
                    type: string
                    format: byte
                  value:
                    type: string
                    format: byte
                  index:
                    type: boolean
                description: >-
                  EventAttribute is a single key-value pair, associated with an
                  event.
          description: >-
            Event allows application developers to attach additional information
            to

            ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and
            ResponseDeliverTx.

            Later, transactions may be queried using these events.
        description: >-
          Events defines all the events emitted by processing a transaction.
          Note,

          these events include those emitted by processing all the messages and
          those

          emitted from the ante handler. Whereas Logs contains the events, with

          additional metadata, emitted only by processing the messages.


          Since: cosmos-sdk 0.42.11, 0.44.5, 0.45
    description: >-
      TxResponse defines a structure containing relevant tx data and metadata.
      The

      tags are stringified and the log is JSON decoded.
  cosmos.crypto.multisig.v1beta1.CompactBitArray:
    type: object
    properties:
      extra_bits_stored:
        type: integer
        format: int64
      elems:
        type: string
        format: byte
    description: |-
      CompactBitArray is an implementation of a space efficient bit array.
      This is used to ensure that the encoded data takes up a minimal amount of
      space after proto encoding.
      This is not thread safe, and is not intended for concurrent usage.
  cosmos.tx.signing.v1beta1.SignMode:
    type: string
    enum:
      - SIGN_MODE_UNSPECIFIED
      - SIGN_MODE_DIRECT
      - SIGN_MODE_TEXTUAL
      - SIGN_MODE_LEGACY_AMINO_JSON
    default: SIGN_MODE_UNSPECIFIED
    description: |-
      SignMode represents a signing mode with its own security guarantees.

       - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be
      rejected
       - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is
      verified with raw bytes from Tx
       - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some
      human-readable textual representation on top of the binary representation
      from SIGN_MODE_DIRECT
       - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses
      Amino JSON and will be removed in the future
  cosmos.tx.v1beta1.AuthInfo:
    type: object
    properties:
      signer_infos:
        type: array
        items:
          $ref: '#/definitions/cosmos.tx.v1beta1.SignerInfo'
        description: >-
          signer_infos defines the signing modes for the required signers. The
          number

          and order of elements must match the required signers from TxBody's

          messages. The first element is the primary signer and the one which
          pays

          the fee.
      fee:
        description: >-
          Fee is the fee and gas limit for the transaction. The first signer is
          the

          primary signer and the one which pays the fee. The fee can be
          calculated

          based on the cost of evaluating the body and doing signature
          verification

          of the signers. This can be estimated via simulation.
        type: object
        properties:
          amount:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            title: amount is the amount of coins to be paid as a fee
          gas_limit:
            type: string
            format: uint64
            title: >-
              gas_limit is the maximum gas that can be used in transaction
              processing

              before an out of gas error occurs
          payer:
            type: string
            description: >-
              if unset, the first signer is responsible for paying the fees. If
              set, the specified account must pay the fees.

              the payer must be a tx signer (and thus have signed this field in
              AuthInfo).

              setting this field does *not* change the ordering of required
              signers for the transaction.
          granter:
            type: string
            title: >-
              if set, the fee payer (either the first signer or the value of the
              payer field) requests that a fee grant be used

              to pay fees instead of the fee payer's own balance. If an
              appropriate fee grant does not exist or the chain does

              not support fee grants, this will fail
    description: |-
      AuthInfo describes the fee and signer modes that are used to sign a
      transaction.
  cosmos.tx.v1beta1.BroadcastMode:
    type: string
    enum:
      - BROADCAST_MODE_UNSPECIFIED
      - BROADCAST_MODE_BLOCK
      - BROADCAST_MODE_SYNC
      - BROADCAST_MODE_ASYNC
    default: BROADCAST_MODE_UNSPECIFIED
    description: >-
      BroadcastMode specifies the broadcast mode for the TxService.Broadcast RPC
      method.

       - BROADCAST_MODE_UNSPECIFIED: zero-value for mode ordering
       - BROADCAST_MODE_BLOCK: BROADCAST_MODE_BLOCK defines a tx broadcasting mode where the client waits for
      the tx to be committed in a block.
       - BROADCAST_MODE_SYNC: BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits for
      a CheckTx execution response only.
       - BROADCAST_MODE_ASYNC: BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client returns
      immediately.
  cosmos.tx.v1beta1.BroadcastTxRequest:
    type: object
    properties:
      tx_bytes:
        type: string
        format: byte
        description: tx_bytes is the raw transaction.
      mode:
        type: string
        enum:
          - BROADCAST_MODE_UNSPECIFIED
          - BROADCAST_MODE_BLOCK
          - BROADCAST_MODE_SYNC
          - BROADCAST_MODE_ASYNC
        default: BROADCAST_MODE_UNSPECIFIED
        description: >-
          BroadcastMode specifies the broadcast mode for the TxService.Broadcast
          RPC method.

           - BROADCAST_MODE_UNSPECIFIED: zero-value for mode ordering
           - BROADCAST_MODE_BLOCK: BROADCAST_MODE_BLOCK defines a tx broadcasting mode where the client waits for
          the tx to be committed in a block.
           - BROADCAST_MODE_SYNC: BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits for
          a CheckTx execution response only.
           - BROADCAST_MODE_ASYNC: BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client returns
          immediately.
    description: |-
      BroadcastTxRequest is the request type for the Service.BroadcastTxRequest
      RPC method.
  cosmos.tx.v1beta1.BroadcastTxResponse:
    type: object
    properties:
      tx_response:
        type: object
        properties:
          height:
            type: string
            format: int64
            title: The block height
          txhash:
            type: string
            description: The transaction hash.
          codespace:
            type: string
            title: Namespace for the Code
          code:
            type: integer
            format: int64
            description: Response code.
          data:
            type: string
            description: Result bytes, if any.
          raw_log:
            type: string
            description: |-
              The output of the application's logger (raw string). May be
              non-deterministic.
          logs:
            type: array
            items:
              type: object
              properties:
                msg_index:
                  type: integer
                  format: int64
                log:
                  type: string
                events:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                      attributes:
                        type: array
                        items:
                          type: object
                          properties:
                            key:
                              type: string
                            value:
                              type: string
                          description: >-
                            Attribute defines an attribute wrapper where the key
                            and value are

                            strings instead of raw bytes.
                    description: >-
                      StringEvent defines en Event object wrapper where all the
                      attributes

                      contain key/value pairs that are strings instead of raw
                      bytes.
                  description: >-
                    Events contains a slice of Event objects that were emitted
                    during some

                    execution.
              description: >-
                ABCIMessageLog defines a structure containing an indexed tx ABCI
                message log.
            description: >-
              The output of the application's logger (typed). May be
              non-deterministic.
          info:
            type: string
            description: Additional information. May be non-deterministic.
          gas_wanted:
            type: string
            format: int64
            description: Amount of gas requested for transaction.
          gas_used:
            type: string
            format: int64
            description: Amount of gas consumed by transaction.
          tx:
            type: object
            properties:
              type_url:
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
              value:
                type: string
                format: byte
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := ptypes.MarshalAny(foo)
                   ...
                   foo := &pb.Foo{}
                   if err := ptypes.UnmarshalAny(any, foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".



              JSON

              ====

              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
          timestamp:
            type: string
            description: >-
              Time of the previous block. For heights > 1, it's the weighted
              median of

              the timestamps of the valid votes in the block.LastCommit. For
              height == 1,

              it's genesis time.
          events:
            type: array
            items:
              type: object
              properties:
                type:
                  type: string
                attributes:
                  type: array
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                        format: byte
                      value:
                        type: string
                        format: byte
                      index:
                        type: boolean
                    description: >-
                      EventAttribute is a single key-value pair, associated with
                      an event.
              description: >-
                Event allows application developers to attach additional
                information to

                ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and
                ResponseDeliverTx.

                Later, transactions may be queried using these events.
            description: >-
              Events defines all the events emitted by processing a transaction.
              Note,

              these events include those emitted by processing all the messages
              and those

              emitted from the ante handler. Whereas Logs contains the events,
              with

              additional metadata, emitted only by processing the messages.


              Since: cosmos-sdk 0.42.11, 0.44.5, 0.45
        description: >-
          TxResponse defines a structure containing relevant tx data and
          metadata. The

          tags are stringified and the log is JSON decoded.
    description: |-
      BroadcastTxResponse is the response type for the
      Service.BroadcastTx method.
  cosmos.tx.v1beta1.Fee:
    type: object
    properties:
      amount:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        title: amount is the amount of coins to be paid as a fee
      gas_limit:
        type: string
        format: uint64
        title: >-
          gas_limit is the maximum gas that can be used in transaction
          processing

          before an out of gas error occurs
      payer:
        type: string
        description: >-
          if unset, the first signer is responsible for paying the fees. If set,
          the specified account must pay the fees.

          the payer must be a tx signer (and thus have signed this field in
          AuthInfo).

          setting this field does *not* change the ordering of required signers
          for the transaction.
      granter:
        type: string
        title: >-
          if set, the fee payer (either the first signer or the value of the
          payer field) requests that a fee grant be used

          to pay fees instead of the fee payer's own balance. If an appropriate
          fee grant does not exist or the chain does

          not support fee grants, this will fail
    description: >-
      Fee includes the amount of coins paid in fees and the maximum

      gas to be used by the transaction. The ratio yields an effective
      "gasprice",

      which must be above some miminum to be accepted into the mempool.
  cosmos.tx.v1beta1.GetTxResponse:
    type: object
    properties:
      tx:
        $ref: '#/definitions/cosmos.tx.v1beta1.Tx'
        description: tx is the queried transaction.
      tx_response:
        type: object
        properties:
          height:
            type: string
            format: int64
            title: The block height
          txhash:
            type: string
            description: The transaction hash.
          codespace:
            type: string
            title: Namespace for the Code
          code:
            type: integer
            format: int64
            description: Response code.
          data:
            type: string
            description: Result bytes, if any.
          raw_log:
            type: string
            description: |-
              The output of the application's logger (raw string). May be
              non-deterministic.
          logs:
            type: array
            items:
              type: object
              properties:
                msg_index:
                  type: integer
                  format: int64
                log:
                  type: string
                events:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                      attributes:
                        type: array
                        items:
                          type: object
                          properties:
                            key:
                              type: string
                            value:
                              type: string
                          description: >-
                            Attribute defines an attribute wrapper where the key
                            and value are

                            strings instead of raw bytes.
                    description: >-
                      StringEvent defines en Event object wrapper where all the
                      attributes

                      contain key/value pairs that are strings instead of raw
                      bytes.
                  description: >-
                    Events contains a slice of Event objects that were emitted
                    during some

                    execution.
              description: >-
                ABCIMessageLog defines a structure containing an indexed tx ABCI
                message log.
            description: >-
              The output of the application's logger (typed). May be
              non-deterministic.
          info:
            type: string
            description: Additional information. May be non-deterministic.
          gas_wanted:
            type: string
            format: int64
            description: Amount of gas requested for transaction.
          gas_used:
            type: string
            format: int64
            description: Amount of gas consumed by transaction.
          tx:
            type: object
            properties:
              type_url:
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
              value:
                type: string
                format: byte
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := ptypes.MarshalAny(foo)
                   ...
                   foo := &pb.Foo{}
                   if err := ptypes.UnmarshalAny(any, foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".



              JSON

              ====

              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
          timestamp:
            type: string
            description: >-
              Time of the previous block. For heights > 1, it's the weighted
              median of

              the timestamps of the valid votes in the block.LastCommit. For
              height == 1,

              it's genesis time.
          events:
            type: array
            items:
              type: object
              properties:
                type:
                  type: string
                attributes:
                  type: array
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                        format: byte
                      value:
                        type: string
                        format: byte
                      index:
                        type: boolean
                    description: >-
                      EventAttribute is a single key-value pair, associated with
                      an event.
              description: >-
                Event allows application developers to attach additional
                information to

                ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and
                ResponseDeliverTx.

                Later, transactions may be queried using these events.
            description: >-
              Events defines all the events emitted by processing a transaction.
              Note,

              these events include those emitted by processing all the messages
              and those

              emitted from the ante handler. Whereas Logs contains the events,
              with

              additional metadata, emitted only by processing the messages.


              Since: cosmos-sdk 0.42.11, 0.44.5, 0.45
        description: >-
          TxResponse defines a structure containing relevant tx data and
          metadata. The

          tags are stringified and the log is JSON decoded.
    description: GetTxResponse is the response type for the Service.GetTx method.
  cosmos.tx.v1beta1.GetTxsEventResponse:
    type: object
    properties:
      txs:
        type: array
        items:
          $ref: '#/definitions/cosmos.tx.v1beta1.Tx'
        description: txs is the list of queried transactions.
      tx_responses:
        type: array
        items:
          type: object
          properties:
            height:
              type: string
              format: int64
              title: The block height
            txhash:
              type: string
              description: The transaction hash.
            codespace:
              type: string
              title: Namespace for the Code
            code:
              type: integer
              format: int64
              description: Response code.
            data:
              type: string
              description: Result bytes, if any.
            raw_log:
              type: string
              description: |-
                The output of the application's logger (raw string). May be
                non-deterministic.
            logs:
              type: array
              items:
                type: object
                properties:
                  msg_index:
                    type: integer
                    format: int64
                  log:
                    type: string
                  events:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                        attributes:
                          type: array
                          items:
                            type: object
                            properties:
                              key:
                                type: string
                              value:
                                type: string
                            description: >-
                              Attribute defines an attribute wrapper where the
                              key and value are

                              strings instead of raw bytes.
                      description: >-
                        StringEvent defines en Event object wrapper where all
                        the attributes

                        contain key/value pairs that are strings instead of raw
                        bytes.
                    description: >-
                      Events contains a slice of Event objects that were emitted
                      during some

                      execution.
                description: >-
                  ABCIMessageLog defines a structure containing an indexed tx
                  ABCI message log.
              description: >-
                The output of the application's logger (typed). May be
                non-deterministic.
            info:
              type: string
              description: Additional information. May be non-deterministic.
            gas_wanted:
              type: string
              format: int64
              description: Amount of gas requested for transaction.
            gas_used:
              type: string
              format: int64
              description: Amount of gas consumed by transaction.
            tx:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            timestamp:
              type: string
              description: >-
                Time of the previous block. For heights > 1, it's the weighted
                median of

                the timestamps of the valid votes in the block.LastCommit. For
                height == 1,

                it's genesis time.
            events:
              type: array
              items:
                type: object
                properties:
                  type:
                    type: string
                  attributes:
                    type: array
                    items:
                      type: object
                      properties:
                        key:
                          type: string
                          format: byte
                        value:
                          type: string
                          format: byte
                        index:
                          type: boolean
                      description: >-
                        EventAttribute is a single key-value pair, associated
                        with an event.
                description: >-
                  Event allows application developers to attach additional
                  information to

                  ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and
                  ResponseDeliverTx.

                  Later, transactions may be queried using these events.
              description: >-
                Events defines all the events emitted by processing a
                transaction. Note,

                these events include those emitted by processing all the
                messages and those

                emitted from the ante handler. Whereas Logs contains the events,
                with

                additional metadata, emitted only by processing the messages.


                Since: cosmos-sdk 0.42.11, 0.44.5, 0.45
          description: >-
            TxResponse defines a structure containing relevant tx data and
            metadata. The

            tags are stringified and the log is JSON decoded.
        description: tx_responses is the list of queried TxResponses.
      pagination:
        description: pagination defines an pagination for the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: |-
      GetTxsEventResponse is the response type for the Service.TxsByEvents
      RPC method.
  cosmos.tx.v1beta1.ModeInfo:
    type: object
    properties:
      single:
        title: single represents a single signer
        type: object
        properties:
          mode:
            title: mode is the signing mode of the single signer
            type: string
            enum:
              - SIGN_MODE_UNSPECIFIED
              - SIGN_MODE_DIRECT
              - SIGN_MODE_TEXTUAL
              - SIGN_MODE_LEGACY_AMINO_JSON
            default: SIGN_MODE_UNSPECIFIED
            description: >-
              SignMode represents a signing mode with its own security
              guarantees.

               - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be
              rejected
               - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is
              verified with raw bytes from Tx
               - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some
              human-readable textual representation on top of the binary
              representation

              from SIGN_MODE_DIRECT
               - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses
              Amino JSON and will be removed in the future
      multi:
        $ref: '#/definitions/cosmos.tx.v1beta1.ModeInfo.Multi'
        title: multi represents a nested multisig signer
    description: ModeInfo describes the signing mode of a single or nested multisig signer.
  cosmos.tx.v1beta1.ModeInfo.Multi:
    type: object
    properties:
      bitarray:
        title: bitarray specifies which keys within the multisig are signing
        type: object
        properties:
          extra_bits_stored:
            type: integer
            format: int64
          elems:
            type: string
            format: byte
        description: >-
          CompactBitArray is an implementation of a space efficient bit array.

          This is used to ensure that the encoded data takes up a minimal amount
          of

          space after proto encoding.

          This is not thread safe, and is not intended for concurrent usage.
      mode_infos:
        type: array
        items:
          $ref: '#/definitions/cosmos.tx.v1beta1.ModeInfo'
        title: |-
          mode_infos is the corresponding modes of the signers of the multisig
          which could include nested multisig public keys
    title: Multi is the mode info for a multisig public key
  cosmos.tx.v1beta1.ModeInfo.Single:
    type: object
    properties:
      mode:
        title: mode is the signing mode of the single signer
        type: string
        enum:
          - SIGN_MODE_UNSPECIFIED
          - SIGN_MODE_DIRECT
          - SIGN_MODE_TEXTUAL
          - SIGN_MODE_LEGACY_AMINO_JSON
        default: SIGN_MODE_UNSPECIFIED
        description: >-
          SignMode represents a signing mode with its own security guarantees.

           - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be
          rejected
           - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is
          verified with raw bytes from Tx
           - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some
          human-readable textual representation on top of the binary
          representation

          from SIGN_MODE_DIRECT
           - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses
          Amino JSON and will be removed in the future
    title: |-
      Single is the mode info for a single signer. It is structured as a message
      to allow for additional fields such as locale for SIGN_MODE_TEXTUAL in the
      future
  cosmos.tx.v1beta1.OrderBy:
    type: string
    enum:
      - ORDER_BY_UNSPECIFIED
      - ORDER_BY_ASC
      - ORDER_BY_DESC
    default: ORDER_BY_UNSPECIFIED
    description: >-
      - ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting
      order. OrderBy defaults to ASC in this case.
       - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order
       - ORDER_BY_DESC: ORDER_BY_DESC defines descending order
    title: OrderBy defines the sorting order
  cosmos.tx.v1beta1.SignerInfo:
    type: object
    properties:
      public_key:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      mode_info:
        $ref: '#/definitions/cosmos.tx.v1beta1.ModeInfo'
        title: |-
          mode_info describes the signing mode of the signer and is a nested
          structure to support nested multisig pubkey's
      sequence:
        type: string
        format: uint64
        description: >-
          sequence is the sequence of the account, which describes the

          number of committed transactions signed by a given address. It is used
          to

          prevent replay attacks.
    description: |-
      SignerInfo describes the public key and signing mode of a single top-level
      signer.
  cosmos.tx.v1beta1.SimulateRequest:
    type: object
    properties:
      tx:
        $ref: '#/definitions/cosmos.tx.v1beta1.Tx'
        description: |-
          tx is the transaction to simulate.
          Deprecated. Send raw tx bytes instead.
      tx_bytes:
        type: string
        format: byte
        description: |-
          tx_bytes is the raw transaction.

          Since: cosmos-sdk 0.43
    description: |-
      SimulateRequest is the request type for the Service.Simulate
      RPC method.
  cosmos.tx.v1beta1.SimulateResponse:
    type: object
    properties:
      gas_info:
        description: gas_info is the information about gas used in the simulation.
        type: object
        properties:
          gas_wanted:
            type: string
            format: uint64
            description: >-
              GasWanted is the maximum units of work we allow this tx to
              perform.
          gas_used:
            type: string
            format: uint64
            description: GasUsed is the amount of gas actually consumed.
      result:
        description: result is the result of the simulation.
        type: object
        properties:
          data:
            type: string
            format: byte
            description: >-
              Data is any data returned from message or handler execution. It
              MUST be

              length prefixed in order to separate data from multiple message
              executions.
          log:
            type: string
            description: >-
              Log contains the log information from message or handler
              execution.
          events:
            type: array
            items:
              type: object
              properties:
                type:
                  type: string
                attributes:
                  type: array
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                        format: byte
                      value:
                        type: string
                        format: byte
                      index:
                        type: boolean
                    description: >-
                      EventAttribute is a single key-value pair, associated with
                      an event.
              description: >-
                Event allows application developers to attach additional
                information to

                ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and
                ResponseDeliverTx.

                Later, transactions may be queried using these events.
            description: >-
              Events contains a slice of Event objects that were emitted during
              message

              or handler execution.
    description: |-
      SimulateResponse is the response type for the
      Service.SimulateRPC method.
  cosmos.tx.v1beta1.Tx:
    type: object
    properties:
      body:
        title: body is the processable content of the transaction
        type: object
        properties:
          messages:
            type: array
            items:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            description: >-
              messages is a list of messages to be executed. The required
              signers of

              those messages define the number and order of elements in
              AuthInfo's

              signer_infos and Tx's signatures. Each required signer address is
              added to

              the list only the first time it occurs.

              By convention, the first required signer (usually from the first
              message)

              is referred to as the primary signer and pays the fee for the
              whole

              transaction.
          memo:
            type: string
            description: >-
              memo is any arbitrary note/comment to be added to the transaction.

              WARNING: in clients, any publicly exposed text should not be
              called memo,

              but should be called `note` instead (see
              https://github.com/cosmos/cosmos-sdk/issues/9122).
          timeout_height:
            type: string
            format: uint64
            title: |-
              timeout is the block height after which this transaction will not
              be processed by the chain
          extension_options:
            type: array
            items:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            title: >-
              extension_options are arbitrary options that can be added by
              chains

              when the default options are not sufficient. If any of these are
              present

              and can't be handled, the transaction will be rejected
          non_critical_extension_options:
            type: array
            items:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            title: >-
              extension_options are arbitrary options that can be added by
              chains

              when the default options are not sufficient. If any of these are
              present

              and can't be handled, they will be ignored
        description: TxBody is the body of a transaction that all signers sign over.
      auth_info:
        $ref: '#/definitions/cosmos.tx.v1beta1.AuthInfo'
        title: |-
          auth_info is the authorization related content of the transaction,
          specifically signers, signer modes and fee
      signatures:
        type: array
        items:
          type: string
          format: byte
        description: >-
          signatures is a list of signatures that matches the length and order
          of

          AuthInfo's signer_infos to allow connecting signature meta information
          like

          public key and signing mode by position.
    description: Tx is the standard type used for broadcasting transactions.
  cosmos.tx.v1beta1.TxBody:
    type: object
    properties:
      messages:
        type: array
        items:
          type: object
          properties:
            type_url:
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
            value:
              type: string
              format: byte
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
        description: >-
          messages is a list of messages to be executed. The required signers of

          those messages define the number and order of elements in AuthInfo's

          signer_infos and Tx's signatures. Each required signer address is
          added to

          the list only the first time it occurs.

          By convention, the first required signer (usually from the first
          message)

          is referred to as the primary signer and pays the fee for the whole

          transaction.
      memo:
        type: string
        description: >-
          memo is any arbitrary note/comment to be added to the transaction.

          WARNING: in clients, any publicly exposed text should not be called
          memo,

          but should be called `note` instead (see
          https://github.com/cosmos/cosmos-sdk/issues/9122).
      timeout_height:
        type: string
        format: uint64
        title: |-
          timeout is the block height after which this transaction will not
          be processed by the chain
      extension_options:
        type: array
        items:
          type: object
          properties:
            type_url:
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
            value:
              type: string
              format: byte
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
        title: >-
          extension_options are arbitrary options that can be added by chains

          when the default options are not sufficient. If any of these are
          present

          and can't be handled, the transaction will be rejected
      non_critical_extension_options:
        type: array
        items:
          type: object
          properties:
            type_url:
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
            value:
              type: string
              format: byte
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
        title: >-
          extension_options are arbitrary options that can be added by chains

          when the default options are not sufficient. If any of these are
          present

          and can't be handled, they will be ignored
    description: TxBody is the body of a transaction that all signers sign over.
  tendermint.abci.Event:
    type: object
    properties:
      type:
        type: string
      attributes:
        type: array
        items:
          type: object
          properties:
            key:
              type: string
              format: byte
            value:
              type: string
              format: byte
            index:
              type: boolean
          description: EventAttribute is a single key-value pair, associated with an event.
    description: >-
      Event allows application developers to attach additional information to

      ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and
      ResponseDeliverTx.

      Later, transactions may be queried using these events.
  tendermint.abci.EventAttribute:
    type: object
    properties:
      key:
        type: string
        format: byte
      value:
        type: string
        format: byte
      index:
        type: boolean
    description: EventAttribute is a single key-value pair, associated with an event.
  cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse:
    type: object
    properties:
      block_id:
        type: object
        properties:
          hash:
            type: string
            format: byte
          part_set_header:
            type: object
            properties:
              total:
                type: integer
                format: int64
              hash:
                type: string
                format: byte
            title: PartsetHeader
        title: BlockID
      block:
        type: object
        properties:
          header:
            type: object
            properties:
              version:
                title: basic block info
                type: object
                properties:
                  block:
                    type: string
                    format: uint64
                  app:
                    type: string
                    format: uint64
                description: >-
                  Consensus captures the consensus rules for processing a block
                  in the blockchain,

                  including all blockchain data structures and the rules of the
                  application's

                  state transition machine.
              chain_id:
                type: string
              height:
                type: string
                format: int64
              time:
                type: string
                format: date-time
              last_block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              last_commit_hash:
                type: string
                format: byte
                title: hashes of block data
              data_hash:
                type: string
                format: byte
              validators_hash:
                type: string
                format: byte
                title: hashes from the app output from the prev block
              next_validators_hash:
                type: string
                format: byte
              consensus_hash:
                type: string
                format: byte
              app_hash:
                type: string
                format: byte
              last_results_hash:
                type: string
                format: byte
              evidence_hash:
                type: string
                format: byte
                title: consensus info
              proposer_address:
                type: string
                format: byte
            description: Header defines the structure of a Tendermint block header.
          data:
            type: object
            properties:
              txs:
                type: array
                items:
                  type: string
                  format: byte
                description: >-
                  Txs that will be applied by state @ block.Height+1.

                  NOTE: not all txs here are valid.  We're just agreeing on the
                  order first.

                  This means that block.AppHash does not include these txs.
            title: Data contains the set of transactions included in the block
          evidence:
            type: object
            properties:
              evidence:
                type: array
                items:
                  type: object
                  properties:
                    duplicate_vote_evidence:
                      type: object
                      properties:
                        vote_a:
                          type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - SIGNED_MSG_TYPE_UNKNOWN
                                - SIGNED_MSG_TYPE_PREVOTE
                                - SIGNED_MSG_TYPE_PRECOMMIT
                                - SIGNED_MSG_TYPE_PROPOSAL
                              default: SIGNED_MSG_TYPE_UNKNOWN
                              description: >-
                                SignedMsgType is a type of signed message in the
                                consensus.

                                 - SIGNED_MSG_TYPE_PREVOTE: Votes
                                 - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                            height:
                              type: string
                              format: int64
                            round:
                              type: integer
                              format: int32
                            block_id:
                              type: object
                              properties:
                                hash:
                                  type: string
                                  format: byte
                                part_set_header:
                                  type: object
                                  properties:
                                    total:
                                      type: integer
                                      format: int64
                                    hash:
                                      type: string
                                      format: byte
                                  title: PartsetHeader
                              title: BlockID
                            timestamp:
                              type: string
                              format: date-time
                            validator_address:
                              type: string
                              format: byte
                            validator_index:
                              type: integer
                              format: int32
                            signature:
                              type: string
                              format: byte
                          description: >-
                            Vote represents a prevote, precommit, or commit vote
                            from validators for

                            consensus.
                        vote_b:
                          type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - SIGNED_MSG_TYPE_UNKNOWN
                                - SIGNED_MSG_TYPE_PREVOTE
                                - SIGNED_MSG_TYPE_PRECOMMIT
                                - SIGNED_MSG_TYPE_PROPOSAL
                              default: SIGNED_MSG_TYPE_UNKNOWN
                              description: >-
                                SignedMsgType is a type of signed message in the
                                consensus.

                                 - SIGNED_MSG_TYPE_PREVOTE: Votes
                                 - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                            height:
                              type: string
                              format: int64
                            round:
                              type: integer
                              format: int32
                            block_id:
                              type: object
                              properties:
                                hash:
                                  type: string
                                  format: byte
                                part_set_header:
                                  type: object
                                  properties:
                                    total:
                                      type: integer
                                      format: int64
                                    hash:
                                      type: string
                                      format: byte
                                  title: PartsetHeader
                              title: BlockID
                            timestamp:
                              type: string
                              format: date-time
                            validator_address:
                              type: string
                              format: byte
                            validator_index:
                              type: integer
                              format: int32
                            signature:
                              type: string
                              format: byte
                          description: >-
                            Vote represents a prevote, precommit, or commit vote
                            from validators for

                            consensus.
                        total_voting_power:
                          type: string
                          format: int64
                        validator_power:
                          type: string
                          format: int64
                        timestamp:
                          type: string
                          format: date-time
                      description: >-
                        DuplicateVoteEvidence contains evidence of a validator
                        signed two conflicting votes.
                    light_client_attack_evidence:
                      type: object
                      properties:
                        conflicting_block:
                          type: object
                          properties:
                            signed_header:
                              type: object
                              properties:
                                header:
                                  type: object
                                  properties:
                                    version:
                                      title: basic block info
                                      type: object
                                      properties:
                                        block:
                                          type: string
                                          format: uint64
                                        app:
                                          type: string
                                          format: uint64
                                      description: >-
                                        Consensus captures the consensus rules
                                        for processing a block in the
                                        blockchain,

                                        including all blockchain data structures
                                        and the rules of the application's

                                        state transition machine.
                                    chain_id:
                                      type: string
                                    height:
                                      type: string
                                      format: int64
                                    time:
                                      type: string
                                      format: date-time
                                    last_block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                    last_commit_hash:
                                      type: string
                                      format: byte
                                      title: hashes of block data
                                    data_hash:
                                      type: string
                                      format: byte
                                    validators_hash:
                                      type: string
                                      format: byte
                                      title: >-
                                        hashes from the app output from the prev
                                        block
                                    next_validators_hash:
                                      type: string
                                      format: byte
                                    consensus_hash:
                                      type: string
                                      format: byte
                                    app_hash:
                                      type: string
                                      format: byte
                                    last_results_hash:
                                      type: string
                                      format: byte
                                    evidence_hash:
                                      type: string
                                      format: byte
                                      title: consensus info
                                    proposer_address:
                                      type: string
                                      format: byte
                                  description: >-
                                    Header defines the structure of a Tendermint
                                    block header.
                                commit:
                                  type: object
                                  properties:
                                    height:
                                      type: string
                                      format: int64
                                    round:
                                      type: integer
                                      format: int32
                                    block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                    signatures:
                                      type: array
                                      items:
                                        type: object
                                        properties:
                                          block_id_flag:
                                            type: string
                                            enum:
                                              - BLOCK_ID_FLAG_UNKNOWN
                                              - BLOCK_ID_FLAG_ABSENT
                                              - BLOCK_ID_FLAG_COMMIT
                                              - BLOCK_ID_FLAG_NIL
                                            default: BLOCK_ID_FLAG_UNKNOWN
                                            title: >-
                                              BlockIdFlag indicates which BlcokID the
                                              signature is for
                                          validator_address:
                                            type: string
                                            format: byte
                                          timestamp:
                                            type: string
                                            format: date-time
                                          signature:
                                            type: string
                                            format: byte
                                        description: >-
                                          CommitSig is a part of the Vote included
                                          in a Commit.
                                  description: >-
                                    Commit contains the evidence that a block
                                    was committed by a set of validators.
                            validator_set:
                              type: object
                              properties:
                                validators:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      address:
                                        type: string
                                        format: byte
                                      pub_key:
                                        type: object
                                        properties:
                                          ed25519:
                                            type: string
                                            format: byte
                                          secp256k1:
                                            type: string
                                            format: byte
                                        title: >-
                                          PublicKey defines the keys available for
                                          use with Tendermint Validators
                                      voting_power:
                                        type: string
                                        format: int64
                                      proposer_priority:
                                        type: string
                                        format: int64
                                proposer:
                                  type: object
                                  properties:
                                    address:
                                      type: string
                                      format: byte
                                    pub_key:
                                      type: object
                                      properties:
                                        ed25519:
                                          type: string
                                          format: byte
                                        secp256k1:
                                          type: string
                                          format: byte
                                      title: >-
                                        PublicKey defines the keys available for
                                        use with Tendermint Validators
                                    voting_power:
                                      type: string
                                      format: int64
                                    proposer_priority:
                                      type: string
                                      format: int64
                                total_voting_power:
                                  type: string
                                  format: int64
                        common_height:
                          type: string
                          format: int64
                        byzantine_validators:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                format: byte
                              pub_key:
                                type: object
                                properties:
                                  ed25519:
                                    type: string
                                    format: byte
                                  secp256k1:
                                    type: string
                                    format: byte
                                title: >-
                                  PublicKey defines the keys available for use
                                  with Tendermint Validators
                              voting_power:
                                type: string
                                format: int64
                              proposer_priority:
                                type: string
                                format: int64
                        total_voting_power:
                          type: string
                          format: int64
                        timestamp:
                          type: string
                          format: date-time
                      description: >-
                        LightClientAttackEvidence contains evidence of a set of
                        validators attempting to mislead a light client.
          last_commit:
            type: object
            properties:
              height:
                type: string
                format: int64
              round:
                type: integer
                format: int32
              block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              signatures:
                type: array
                items:
                  type: object
                  properties:
                    block_id_flag:
                      type: string
                      enum:
                        - BLOCK_ID_FLAG_UNKNOWN
                        - BLOCK_ID_FLAG_ABSENT
                        - BLOCK_ID_FLAG_COMMIT
                        - BLOCK_ID_FLAG_NIL
                      default: BLOCK_ID_FLAG_UNKNOWN
                      title: BlockIdFlag indicates which BlcokID the signature is for
                    validator_address:
                      type: string
                      format: byte
                    timestamp:
                      type: string
                      format: date-time
                    signature:
                      type: string
                      format: byte
                  description: CommitSig is a part of the Vote included in a Commit.
            description: >-
              Commit contains the evidence that a block was committed by a set
              of validators.
    description: >-
      GetBlockByHeightResponse is the response type for the
      Query/GetBlockByHeight RPC method.
  cosmos.base.tendermint.v1beta1.GetLatestBlockResponse:
    type: object
    properties:
      block_id:
        type: object
        properties:
          hash:
            type: string
            format: byte
          part_set_header:
            type: object
            properties:
              total:
                type: integer
                format: int64
              hash:
                type: string
                format: byte
            title: PartsetHeader
        title: BlockID
      block:
        type: object
        properties:
          header:
            type: object
            properties:
              version:
                title: basic block info
                type: object
                properties:
                  block:
                    type: string
                    format: uint64
                  app:
                    type: string
                    format: uint64
                description: >-
                  Consensus captures the consensus rules for processing a block
                  in the blockchain,

                  including all blockchain data structures and the rules of the
                  application's

                  state transition machine.
              chain_id:
                type: string
              height:
                type: string
                format: int64
              time:
                type: string
                format: date-time
              last_block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              last_commit_hash:
                type: string
                format: byte
                title: hashes of block data
              data_hash:
                type: string
                format: byte
              validators_hash:
                type: string
                format: byte
                title: hashes from the app output from the prev block
              next_validators_hash:
                type: string
                format: byte
              consensus_hash:
                type: string
                format: byte
              app_hash:
                type: string
                format: byte
              last_results_hash:
                type: string
                format: byte
              evidence_hash:
                type: string
                format: byte
                title: consensus info
              proposer_address:
                type: string
                format: byte
            description: Header defines the structure of a Tendermint block header.
          data:
            type: object
            properties:
              txs:
                type: array
                items:
                  type: string
                  format: byte
                description: >-
                  Txs that will be applied by state @ block.Height+1.

                  NOTE: not all txs here are valid.  We're just agreeing on the
                  order first.

                  This means that block.AppHash does not include these txs.
            title: Data contains the set of transactions included in the block
          evidence:
            type: object
            properties:
              evidence:
                type: array
                items:
                  type: object
                  properties:
                    duplicate_vote_evidence:
                      type: object
                      properties:
                        vote_a:
                          type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - SIGNED_MSG_TYPE_UNKNOWN
                                - SIGNED_MSG_TYPE_PREVOTE
                                - SIGNED_MSG_TYPE_PRECOMMIT
                                - SIGNED_MSG_TYPE_PROPOSAL
                              default: SIGNED_MSG_TYPE_UNKNOWN
                              description: >-
                                SignedMsgType is a type of signed message in the
                                consensus.

                                 - SIGNED_MSG_TYPE_PREVOTE: Votes
                                 - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                            height:
                              type: string
                              format: int64
                            round:
                              type: integer
                              format: int32
                            block_id:
                              type: object
                              properties:
                                hash:
                                  type: string
                                  format: byte
                                part_set_header:
                                  type: object
                                  properties:
                                    total:
                                      type: integer
                                      format: int64
                                    hash:
                                      type: string
                                      format: byte
                                  title: PartsetHeader
                              title: BlockID
                            timestamp:
                              type: string
                              format: date-time
                            validator_address:
                              type: string
                              format: byte
                            validator_index:
                              type: integer
                              format: int32
                            signature:
                              type: string
                              format: byte
                          description: >-
                            Vote represents a prevote, precommit, or commit vote
                            from validators for

                            consensus.
                        vote_b:
                          type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - SIGNED_MSG_TYPE_UNKNOWN
                                - SIGNED_MSG_TYPE_PREVOTE
                                - SIGNED_MSG_TYPE_PRECOMMIT
                                - SIGNED_MSG_TYPE_PROPOSAL
                              default: SIGNED_MSG_TYPE_UNKNOWN
                              description: >-
                                SignedMsgType is a type of signed message in the
                                consensus.

                                 - SIGNED_MSG_TYPE_PREVOTE: Votes
                                 - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                            height:
                              type: string
                              format: int64
                            round:
                              type: integer
                              format: int32
                            block_id:
                              type: object
                              properties:
                                hash:
                                  type: string
                                  format: byte
                                part_set_header:
                                  type: object
                                  properties:
                                    total:
                                      type: integer
                                      format: int64
                                    hash:
                                      type: string
                                      format: byte
                                  title: PartsetHeader
                              title: BlockID
                            timestamp:
                              type: string
                              format: date-time
                            validator_address:
                              type: string
                              format: byte
                            validator_index:
                              type: integer
                              format: int32
                            signature:
                              type: string
                              format: byte
                          description: >-
                            Vote represents a prevote, precommit, or commit vote
                            from validators for

                            consensus.
                        total_voting_power:
                          type: string
                          format: int64
                        validator_power:
                          type: string
                          format: int64
                        timestamp:
                          type: string
                          format: date-time
                      description: >-
                        DuplicateVoteEvidence contains evidence of a validator
                        signed two conflicting votes.
                    light_client_attack_evidence:
                      type: object
                      properties:
                        conflicting_block:
                          type: object
                          properties:
                            signed_header:
                              type: object
                              properties:
                                header:
                                  type: object
                                  properties:
                                    version:
                                      title: basic block info
                                      type: object
                                      properties:
                                        block:
                                          type: string
                                          format: uint64
                                        app:
                                          type: string
                                          format: uint64
                                      description: >-
                                        Consensus captures the consensus rules
                                        for processing a block in the
                                        blockchain,

                                        including all blockchain data structures
                                        and the rules of the application's

                                        state transition machine.
                                    chain_id:
                                      type: string
                                    height:
                                      type: string
                                      format: int64
                                    time:
                                      type: string
                                      format: date-time
                                    last_block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                    last_commit_hash:
                                      type: string
                                      format: byte
                                      title: hashes of block data
                                    data_hash:
                                      type: string
                                      format: byte
                                    validators_hash:
                                      type: string
                                      format: byte
                                      title: >-
                                        hashes from the app output from the prev
                                        block
                                    next_validators_hash:
                                      type: string
                                      format: byte
                                    consensus_hash:
                                      type: string
                                      format: byte
                                    app_hash:
                                      type: string
                                      format: byte
                                    last_results_hash:
                                      type: string
                                      format: byte
                                    evidence_hash:
                                      type: string
                                      format: byte
                                      title: consensus info
                                    proposer_address:
                                      type: string
                                      format: byte
                                  description: >-
                                    Header defines the structure of a Tendermint
                                    block header.
                                commit:
                                  type: object
                                  properties:
                                    height:
                                      type: string
                                      format: int64
                                    round:
                                      type: integer
                                      format: int32
                                    block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                    signatures:
                                      type: array
                                      items:
                                        type: object
                                        properties:
                                          block_id_flag:
                                            type: string
                                            enum:
                                              - BLOCK_ID_FLAG_UNKNOWN
                                              - BLOCK_ID_FLAG_ABSENT
                                              - BLOCK_ID_FLAG_COMMIT
                                              - BLOCK_ID_FLAG_NIL
                                            default: BLOCK_ID_FLAG_UNKNOWN
                                            title: >-
                                              BlockIdFlag indicates which BlcokID the
                                              signature is for
                                          validator_address:
                                            type: string
                                            format: byte
                                          timestamp:
                                            type: string
                                            format: date-time
                                          signature:
                                            type: string
                                            format: byte
                                        description: >-
                                          CommitSig is a part of the Vote included
                                          in a Commit.
                                  description: >-
                                    Commit contains the evidence that a block
                                    was committed by a set of validators.
                            validator_set:
                              type: object
                              properties:
                                validators:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      address:
                                        type: string
                                        format: byte
                                      pub_key:
                                        type: object
                                        properties:
                                          ed25519:
                                            type: string
                                            format: byte
                                          secp256k1:
                                            type: string
                                            format: byte
                                        title: >-
                                          PublicKey defines the keys available for
                                          use with Tendermint Validators
                                      voting_power:
                                        type: string
                                        format: int64
                                      proposer_priority:
                                        type: string
                                        format: int64
                                proposer:
                                  type: object
                                  properties:
                                    address:
                                      type: string
                                      format: byte
                                    pub_key:
                                      type: object
                                      properties:
                                        ed25519:
                                          type: string
                                          format: byte
                                        secp256k1:
                                          type: string
                                          format: byte
                                      title: >-
                                        PublicKey defines the keys available for
                                        use with Tendermint Validators
                                    voting_power:
                                      type: string
                                      format: int64
                                    proposer_priority:
                                      type: string
                                      format: int64
                                total_voting_power:
                                  type: string
                                  format: int64
                        common_height:
                          type: string
                          format: int64
                        byzantine_validators:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                format: byte
                              pub_key:
                                type: object
                                properties:
                                  ed25519:
                                    type: string
                                    format: byte
                                  secp256k1:
                                    type: string
                                    format: byte
                                title: >-
                                  PublicKey defines the keys available for use
                                  with Tendermint Validators
                              voting_power:
                                type: string
                                format: int64
                              proposer_priority:
                                type: string
                                format: int64
                        total_voting_power:
                          type: string
                          format: int64
                        timestamp:
                          type: string
                          format: date-time
                      description: >-
                        LightClientAttackEvidence contains evidence of a set of
                        validators attempting to mislead a light client.
          last_commit:
            type: object
            properties:
              height:
                type: string
                format: int64
              round:
                type: integer
                format: int32
              block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              signatures:
                type: array
                items:
                  type: object
                  properties:
                    block_id_flag:
                      type: string
                      enum:
                        - BLOCK_ID_FLAG_UNKNOWN
                        - BLOCK_ID_FLAG_ABSENT
                        - BLOCK_ID_FLAG_COMMIT
                        - BLOCK_ID_FLAG_NIL
                      default: BLOCK_ID_FLAG_UNKNOWN
                      title: BlockIdFlag indicates which BlcokID the signature is for
                    validator_address:
                      type: string
                      format: byte
                    timestamp:
                      type: string
                      format: date-time
                    signature:
                      type: string
                      format: byte
                  description: CommitSig is a part of the Vote included in a Commit.
            description: >-
              Commit contains the evidence that a block was committed by a set
              of validators.
    description: >-
      GetLatestBlockResponse is the response type for the Query/GetLatestBlock
      RPC method.
  cosmos.base.tendermint.v1beta1.GetLatestValidatorSetResponse:
    type: object
    properties:
      block_height:
        type: string
        format: int64
      validators:
        type: array
        items:
          type: object
          properties:
            address:
              type: string
            pub_key:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            voting_power:
              type: string
              format: int64
            proposer_priority:
              type: string
              format: int64
          description: Validator is the type for the validator-set.
      pagination:
        description: pagination defines an pagination for the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      GetLatestValidatorSetResponse is the response type for the
      Query/GetValidatorSetByHeight RPC method.
  cosmos.base.tendermint.v1beta1.GetNodeInfoResponse:
    type: object
    properties:
      default_node_info:
        type: object
        properties:
          protocol_version:
            type: object
            properties:
              p2p:
                type: string
                format: uint64
              block:
                type: string
                format: uint64
              app:
                type: string
                format: uint64
          default_node_id:
            type: string
          listen_addr:
            type: string
          network:
            type: string
          version:
            type: string
          channels:
            type: string
            format: byte
          moniker:
            type: string
          other:
            type: object
            properties:
              tx_index:
                type: string
              rpc_address:
                type: string
      application_version:
        type: object
        properties:
          name:
            type: string
          app_name:
            type: string
          version:
            type: string
          git_commit:
            type: string
          build_tags:
            type: string
          go_version:
            type: string
          build_deps:
            type: array
            items:
              type: object
              properties:
                path:
                  type: string
                  title: module path
                version:
                  type: string
                  title: module version
                sum:
                  type: string
                  title: checksum
              title: Module is the type for VersionInfo
          cosmos_sdk_version:
            type: string
            title: 'Since: cosmos-sdk 0.43'
        description: VersionInfo is the type for the GetNodeInfoResponse message.
    description: >-
      GetNodeInfoResponse is the request type for the Query/GetNodeInfo RPC
      method.
  cosmos.base.tendermint.v1beta1.GetSyncingResponse:
    type: object
    properties:
      syncing:
        type: boolean
    description: >-
      GetSyncingResponse is the response type for the Query/GetSyncing RPC
      method.
  cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightResponse:
    type: object
    properties:
      block_height:
        type: string
        format: int64
      validators:
        type: array
        items:
          type: object
          properties:
            address:
              type: string
            pub_key:
              type: object
              properties:
                type_url:
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                value:
                  type: string
                  format: byte
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            voting_power:
              type: string
              format: int64
            proposer_priority:
              type: string
              format: int64
          description: Validator is the type for the validator-set.
      pagination:
        description: pagination defines an pagination for the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      GetValidatorSetByHeightResponse is the response type for the
      Query/GetValidatorSetByHeight RPC method.
  cosmos.base.tendermint.v1beta1.Module:
    type: object
    properties:
      path:
        type: string
        title: module path
      version:
        type: string
        title: module version
      sum:
        type: string
        title: checksum
    title: Module is the type for VersionInfo
  cosmos.base.tendermint.v1beta1.Validator:
    type: object
    properties:
      address:
        type: string
      pub_key:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      voting_power:
        type: string
        format: int64
      proposer_priority:
        type: string
        format: int64
    description: Validator is the type for the validator-set.
  cosmos.base.tendermint.v1beta1.VersionInfo:
    type: object
    properties:
      name:
        type: string
      app_name:
        type: string
      version:
        type: string
      git_commit:
        type: string
      build_tags:
        type: string
      go_version:
        type: string
      build_deps:
        type: array
        items:
          type: object
          properties:
            path:
              type: string
              title: module path
            version:
              type: string
              title: module version
            sum:
              type: string
              title: checksum
          title: Module is the type for VersionInfo
      cosmos_sdk_version:
        type: string
        title: 'Since: cosmos-sdk 0.43'
    description: VersionInfo is the type for the GetNodeInfoResponse message.
  tendermint.crypto.PublicKey:
    type: object
    properties:
      ed25519:
        type: string
        format: byte
      secp256k1:
        type: string
        format: byte
    title: PublicKey defines the keys available for use with Tendermint Validators
  tendermint.p2p.DefaultNodeInfo:
    type: object
    properties:
      protocol_version:
        type: object
        properties:
          p2p:
            type: string
            format: uint64
          block:
            type: string
            format: uint64
          app:
            type: string
            format: uint64
      default_node_id:
        type: string
      listen_addr:
        type: string
      network:
        type: string
      version:
        type: string
      channels:
        type: string
        format: byte
      moniker:
        type: string
      other:
        type: object
        properties:
          tx_index:
            type: string
          rpc_address:
            type: string
  tendermint.p2p.DefaultNodeInfoOther:
    type: object
    properties:
      tx_index:
        type: string
      rpc_address:
        type: string
  tendermint.p2p.ProtocolVersion:
    type: object
    properties:
      p2p:
        type: string
        format: uint64
      block:
        type: string
        format: uint64
      app:
        type: string
        format: uint64
  tendermint.types.Block:
    type: object
    properties:
      header:
        type: object
        properties:
          version:
            title: basic block info
            type: object
            properties:
              block:
                type: string
                format: uint64
              app:
                type: string
                format: uint64
            description: >-
              Consensus captures the consensus rules for processing a block in
              the blockchain,

              including all blockchain data structures and the rules of the
              application's

              state transition machine.
          chain_id:
            type: string
          height:
            type: string
            format: int64
          time:
            type: string
            format: date-time
          last_block_id:
            type: object
            properties:
              hash:
                type: string
                format: byte
              part_set_header:
                type: object
                properties:
                  total:
                    type: integer
                    format: int64
                  hash:
                    type: string
                    format: byte
                title: PartsetHeader
            title: BlockID
          last_commit_hash:
            type: string
            format: byte
            title: hashes of block data
          data_hash:
            type: string
            format: byte
          validators_hash:
            type: string
            format: byte
            title: hashes from the app output from the prev block
          next_validators_hash:
            type: string
            format: byte
          consensus_hash:
            type: string
            format: byte
          app_hash:
            type: string
            format: byte
          last_results_hash:
            type: string
            format: byte
          evidence_hash:
            type: string
            format: byte
            title: consensus info
          proposer_address:
            type: string
            format: byte
        description: Header defines the structure of a Tendermint block header.
      data:
        type: object
        properties:
          txs:
            type: array
            items:
              type: string
              format: byte
            description: >-
              Txs that will be applied by state @ block.Height+1.

              NOTE: not all txs here are valid.  We're just agreeing on the
              order first.

              This means that block.AppHash does not include these txs.
        title: Data contains the set of transactions included in the block
      evidence:
        type: object
        properties:
          evidence:
            type: array
            items:
              type: object
              properties:
                duplicate_vote_evidence:
                  type: object
                  properties:
                    vote_a:
                      type: object
                      properties:
                        type:
                          type: string
                          enum:
                            - SIGNED_MSG_TYPE_UNKNOWN
                            - SIGNED_MSG_TYPE_PREVOTE
                            - SIGNED_MSG_TYPE_PRECOMMIT
                            - SIGNED_MSG_TYPE_PROPOSAL
                          default: SIGNED_MSG_TYPE_UNKNOWN
                          description: >-
                            SignedMsgType is a type of signed message in the
                            consensus.

                             - SIGNED_MSG_TYPE_PREVOTE: Votes
                             - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                        height:
                          type: string
                          format: int64
                        round:
                          type: integer
                          format: int32
                        block_id:
                          type: object
                          properties:
                            hash:
                              type: string
                              format: byte
                            part_set_header:
                              type: object
                              properties:
                                total:
                                  type: integer
                                  format: int64
                                hash:
                                  type: string
                                  format: byte
                              title: PartsetHeader
                          title: BlockID
                        timestamp:
                          type: string
                          format: date-time
                        validator_address:
                          type: string
                          format: byte
                        validator_index:
                          type: integer
                          format: int32
                        signature:
                          type: string
                          format: byte
                      description: >-
                        Vote represents a prevote, precommit, or commit vote
                        from validators for

                        consensus.
                    vote_b:
                      type: object
                      properties:
                        type:
                          type: string
                          enum:
                            - SIGNED_MSG_TYPE_UNKNOWN
                            - SIGNED_MSG_TYPE_PREVOTE
                            - SIGNED_MSG_TYPE_PRECOMMIT
                            - SIGNED_MSG_TYPE_PROPOSAL
                          default: SIGNED_MSG_TYPE_UNKNOWN
                          description: >-
                            SignedMsgType is a type of signed message in the
                            consensus.

                             - SIGNED_MSG_TYPE_PREVOTE: Votes
                             - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                        height:
                          type: string
                          format: int64
                        round:
                          type: integer
                          format: int32
                        block_id:
                          type: object
                          properties:
                            hash:
                              type: string
                              format: byte
                            part_set_header:
                              type: object
                              properties:
                                total:
                                  type: integer
                                  format: int64
                                hash:
                                  type: string
                                  format: byte
                              title: PartsetHeader
                          title: BlockID
                        timestamp:
                          type: string
                          format: date-time
                        validator_address:
                          type: string
                          format: byte
                        validator_index:
                          type: integer
                          format: int32
                        signature:
                          type: string
                          format: byte
                      description: >-
                        Vote represents a prevote, precommit, or commit vote
                        from validators for

                        consensus.
                    total_voting_power:
                      type: string
                      format: int64
                    validator_power:
                      type: string
                      format: int64
                    timestamp:
                      type: string
                      format: date-time
                  description: >-
                    DuplicateVoteEvidence contains evidence of a validator
                    signed two conflicting votes.
                light_client_attack_evidence:
                  type: object
                  properties:
                    conflicting_block:
                      type: object
                      properties:
                        signed_header:
                          type: object
                          properties:
                            header:
                              type: object
                              properties:
                                version:
                                  title: basic block info
                                  type: object
                                  properties:
                                    block:
                                      type: string
                                      format: uint64
                                    app:
                                      type: string
                                      format: uint64
                                  description: >-
                                    Consensus captures the consensus rules for
                                    processing a block in the blockchain,

                                    including all blockchain data structures and
                                    the rules of the application's

                                    state transition machine.
                                chain_id:
                                  type: string
                                height:
                                  type: string
                                  format: int64
                                time:
                                  type: string
                                  format: date-time
                                last_block_id:
                                  type: object
                                  properties:
                                    hash:
                                      type: string
                                      format: byte
                                    part_set_header:
                                      type: object
                                      properties:
                                        total:
                                          type: integer
                                          format: int64
                                        hash:
                                          type: string
                                          format: byte
                                      title: PartsetHeader
                                  title: BlockID
                                last_commit_hash:
                                  type: string
                                  format: byte
                                  title: hashes of block data
                                data_hash:
                                  type: string
                                  format: byte
                                validators_hash:
                                  type: string
                                  format: byte
                                  title: >-
                                    hashes from the app output from the prev
                                    block
                                next_validators_hash:
                                  type: string
                                  format: byte
                                consensus_hash:
                                  type: string
                                  format: byte
                                app_hash:
                                  type: string
                                  format: byte
                                last_results_hash:
                                  type: string
                                  format: byte
                                evidence_hash:
                                  type: string
                                  format: byte
                                  title: consensus info
                                proposer_address:
                                  type: string
                                  format: byte
                              description: >-
                                Header defines the structure of a Tendermint
                                block header.
                            commit:
                              type: object
                              properties:
                                height:
                                  type: string
                                  format: int64
                                round:
                                  type: integer
                                  format: int32
                                block_id:
                                  type: object
                                  properties:
                                    hash:
                                      type: string
                                      format: byte
                                    part_set_header:
                                      type: object
                                      properties:
                                        total:
                                          type: integer
                                          format: int64
                                        hash:
                                          type: string
                                          format: byte
                                      title: PartsetHeader
                                  title: BlockID
                                signatures:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      block_id_flag:
                                        type: string
                                        enum:
                                          - BLOCK_ID_FLAG_UNKNOWN
                                          - BLOCK_ID_FLAG_ABSENT
                                          - BLOCK_ID_FLAG_COMMIT
                                          - BLOCK_ID_FLAG_NIL
                                        default: BLOCK_ID_FLAG_UNKNOWN
                                        title: >-
                                          BlockIdFlag indicates which BlcokID the
                                          signature is for
                                      validator_address:
                                        type: string
                                        format: byte
                                      timestamp:
                                        type: string
                                        format: date-time
                                      signature:
                                        type: string
                                        format: byte
                                    description: >-
                                      CommitSig is a part of the Vote included
                                      in a Commit.
                              description: >-
                                Commit contains the evidence that a block was
                                committed by a set of validators.
                        validator_set:
                          type: object
                          properties:
                            validators:
                              type: array
                              items:
                                type: object
                                properties:
                                  address:
                                    type: string
                                    format: byte
                                  pub_key:
                                    type: object
                                    properties:
                                      ed25519:
                                        type: string
                                        format: byte
                                      secp256k1:
                                        type: string
                                        format: byte
                                    title: >-
                                      PublicKey defines the keys available for
                                      use with Tendermint Validators
                                  voting_power:
                                    type: string
                                    format: int64
                                  proposer_priority:
                                    type: string
                                    format: int64
                            proposer:
                              type: object
                              properties:
                                address:
                                  type: string
                                  format: byte
                                pub_key:
                                  type: object
                                  properties:
                                    ed25519:
                                      type: string
                                      format: byte
                                    secp256k1:
                                      type: string
                                      format: byte
                                  title: >-
                                    PublicKey defines the keys available for use
                                    with Tendermint Validators
                                voting_power:
                                  type: string
                                  format: int64
                                proposer_priority:
                                  type: string
                                  format: int64
                            total_voting_power:
                              type: string
                              format: int64
                    common_height:
                      type: string
                      format: int64
                    byzantine_validators:
                      type: array
                      items:
                        type: object
                        properties:
                          address:
                            type: string
                            format: byte
                          pub_key:
                            type: object
                            properties:
                              ed25519:
                                type: string
                                format: byte
                              secp256k1:
                                type: string
                                format: byte
                            title: >-
                              PublicKey defines the keys available for use with
                              Tendermint Validators
                          voting_power:
                            type: string
                            format: int64
                          proposer_priority:
                            type: string
                            format: int64
                    total_voting_power:
                      type: string
                      format: int64
                    timestamp:
                      type: string
                      format: date-time
                  description: >-
                    LightClientAttackEvidence contains evidence of a set of
                    validators attempting to mislead a light client.
      last_commit:
        type: object
        properties:
          height:
            type: string
            format: int64
          round:
            type: integer
            format: int32
          block_id:
            type: object
            properties:
              hash:
                type: string
                format: byte
              part_set_header:
                type: object
                properties:
                  total:
                    type: integer
                    format: int64
                  hash:
                    type: string
                    format: byte
                title: PartsetHeader
            title: BlockID
          signatures:
            type: array
            items:
              type: object
              properties:
                block_id_flag:
                  type: string
                  enum:
                    - BLOCK_ID_FLAG_UNKNOWN
                    - BLOCK_ID_FLAG_ABSENT
                    - BLOCK_ID_FLAG_COMMIT
                    - BLOCK_ID_FLAG_NIL
                  default: BLOCK_ID_FLAG_UNKNOWN
                  title: BlockIdFlag indicates which BlcokID the signature is for
                validator_address:
                  type: string
                  format: byte
                timestamp:
                  type: string
                  format: date-time
                signature:
                  type: string
                  format: byte
              description: CommitSig is a part of the Vote included in a Commit.
        description: >-
          Commit contains the evidence that a block was committed by a set of
          validators.
  tendermint.types.BlockIDFlag:
    type: string
    enum:
      - BLOCK_ID_FLAG_UNKNOWN
      - BLOCK_ID_FLAG_ABSENT
      - BLOCK_ID_FLAG_COMMIT
      - BLOCK_ID_FLAG_NIL
    default: BLOCK_ID_FLAG_UNKNOWN
    title: BlockIdFlag indicates which BlcokID the signature is for
  tendermint.types.Commit:
    type: object
    properties:
      height:
        type: string
        format: int64
      round:
        type: integer
        format: int32
      block_id:
        type: object
        properties:
          hash:
            type: string
            format: byte
          part_set_header:
            type: object
            properties:
              total:
                type: integer
                format: int64
              hash:
                type: string
                format: byte
            title: PartsetHeader
        title: BlockID
      signatures:
        type: array
        items:
          type: object
          properties:
            block_id_flag:
              type: string
              enum:
                - BLOCK_ID_FLAG_UNKNOWN
                - BLOCK_ID_FLAG_ABSENT
                - BLOCK_ID_FLAG_COMMIT
                - BLOCK_ID_FLAG_NIL
              default: BLOCK_ID_FLAG_UNKNOWN
              title: BlockIdFlag indicates which BlcokID the signature is for
            validator_address:
              type: string
              format: byte
            timestamp:
              type: string
              format: date-time
            signature:
              type: string
              format: byte
          description: CommitSig is a part of the Vote included in a Commit.
    description: >-
      Commit contains the evidence that a block was committed by a set of
      validators.
  tendermint.types.CommitSig:
    type: object
    properties:
      block_id_flag:
        type: string
        enum:
          - BLOCK_ID_FLAG_UNKNOWN
          - BLOCK_ID_FLAG_ABSENT
          - BLOCK_ID_FLAG_COMMIT
          - BLOCK_ID_FLAG_NIL
        default: BLOCK_ID_FLAG_UNKNOWN
        title: BlockIdFlag indicates which BlcokID the signature is for
      validator_address:
        type: string
        format: byte
      timestamp:
        type: string
        format: date-time
      signature:
        type: string
        format: byte
    description: CommitSig is a part of the Vote included in a Commit.
  tendermint.types.Data:
    type: object
    properties:
      txs:
        type: array
        items:
          type: string
          format: byte
        description: >-
          Txs that will be applied by state @ block.Height+1.

          NOTE: not all txs here are valid.  We're just agreeing on the order
          first.

          This means that block.AppHash does not include these txs.
    title: Data contains the set of transactions included in the block
  tendermint.types.DuplicateVoteEvidence:
    type: object
    properties:
      vote_a:
        type: object
        properties:
          type:
            type: string
            enum:
              - SIGNED_MSG_TYPE_UNKNOWN
              - SIGNED_MSG_TYPE_PREVOTE
              - SIGNED_MSG_TYPE_PRECOMMIT
              - SIGNED_MSG_TYPE_PROPOSAL
            default: SIGNED_MSG_TYPE_UNKNOWN
            description: |-
              SignedMsgType is a type of signed message in the consensus.

               - SIGNED_MSG_TYPE_PREVOTE: Votes
               - SIGNED_MSG_TYPE_PROPOSAL: Proposals
          height:
            type: string
            format: int64
          round:
            type: integer
            format: int32
          block_id:
            type: object
            properties:
              hash:
                type: string
                format: byte
              part_set_header:
                type: object
                properties:
                  total:
                    type: integer
                    format: int64
                  hash:
                    type: string
                    format: byte
                title: PartsetHeader
            title: BlockID
          timestamp:
            type: string
            format: date-time
          validator_address:
            type: string
            format: byte
          validator_index:
            type: integer
            format: int32
          signature:
            type: string
            format: byte
        description: >-
          Vote represents a prevote, precommit, or commit vote from validators
          for

          consensus.
      vote_b:
        type: object
        properties:
          type:
            type: string
            enum:
              - SIGNED_MSG_TYPE_UNKNOWN
              - SIGNED_MSG_TYPE_PREVOTE
              - SIGNED_MSG_TYPE_PRECOMMIT
              - SIGNED_MSG_TYPE_PROPOSAL
            default: SIGNED_MSG_TYPE_UNKNOWN
            description: |-
              SignedMsgType is a type of signed message in the consensus.

               - SIGNED_MSG_TYPE_PREVOTE: Votes
               - SIGNED_MSG_TYPE_PROPOSAL: Proposals
          height:
            type: string
            format: int64
          round:
            type: integer
            format: int32
          block_id:
            type: object
            properties:
              hash:
                type: string
                format: byte
              part_set_header:
                type: object
                properties:
                  total:
                    type: integer
                    format: int64
                  hash:
                    type: string
                    format: byte
                title: PartsetHeader
            title: BlockID
          timestamp:
            type: string
            format: date-time
          validator_address:
            type: string
            format: byte
          validator_index:
            type: integer
            format: int32
          signature:
            type: string
            format: byte
        description: >-
          Vote represents a prevote, precommit, or commit vote from validators
          for

          consensus.
      total_voting_power:
        type: string
        format: int64
      validator_power:
        type: string
        format: int64
      timestamp:
        type: string
        format: date-time
    description: >-
      DuplicateVoteEvidence contains evidence of a validator signed two
      conflicting votes.
  tendermint.types.Evidence:
    type: object
    properties:
      duplicate_vote_evidence:
        type: object
        properties:
          vote_a:
            type: object
            properties:
              type:
                type: string
                enum:
                  - SIGNED_MSG_TYPE_UNKNOWN
                  - SIGNED_MSG_TYPE_PREVOTE
                  - SIGNED_MSG_TYPE_PRECOMMIT
                  - SIGNED_MSG_TYPE_PROPOSAL
                default: SIGNED_MSG_TYPE_UNKNOWN
                description: |-
                  SignedMsgType is a type of signed message in the consensus.

                   - SIGNED_MSG_TYPE_PREVOTE: Votes
                   - SIGNED_MSG_TYPE_PROPOSAL: Proposals
              height:
                type: string
                format: int64
              round:
                type: integer
                format: int32
              block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              timestamp:
                type: string
                format: date-time
              validator_address:
                type: string
                format: byte
              validator_index:
                type: integer
                format: int32
              signature:
                type: string
                format: byte
            description: >-
              Vote represents a prevote, precommit, or commit vote from
              validators for

              consensus.
          vote_b:
            type: object
            properties:
              type:
                type: string
                enum:
                  - SIGNED_MSG_TYPE_UNKNOWN
                  - SIGNED_MSG_TYPE_PREVOTE
                  - SIGNED_MSG_TYPE_PRECOMMIT
                  - SIGNED_MSG_TYPE_PROPOSAL
                default: SIGNED_MSG_TYPE_UNKNOWN
                description: |-
                  SignedMsgType is a type of signed message in the consensus.

                   - SIGNED_MSG_TYPE_PREVOTE: Votes
                   - SIGNED_MSG_TYPE_PROPOSAL: Proposals
              height:
                type: string
                format: int64
              round:
                type: integer
                format: int32
              block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              timestamp:
                type: string
                format: date-time
              validator_address:
                type: string
                format: byte
              validator_index:
                type: integer
                format: int32
              signature:
                type: string
                format: byte
            description: >-
              Vote represents a prevote, precommit, or commit vote from
              validators for

              consensus.
          total_voting_power:
            type: string
            format: int64
          validator_power:
            type: string
            format: int64
          timestamp:
            type: string
            format: date-time
        description: >-
          DuplicateVoteEvidence contains evidence of a validator signed two
          conflicting votes.
      light_client_attack_evidence:
        type: object
        properties:
          conflicting_block:
            type: object
            properties:
              signed_header:
                type: object
                properties:
                  header:
                    type: object
                    properties:
                      version:
                        title: basic block info
                        type: object
                        properties:
                          block:
                            type: string
                            format: uint64
                          app:
                            type: string
                            format: uint64
                        description: >-
                          Consensus captures the consensus rules for processing
                          a block in the blockchain,

                          including all blockchain data structures and the rules
                          of the application's

                          state transition machine.
                      chain_id:
                        type: string
                      height:
                        type: string
                        format: int64
                      time:
                        type: string
                        format: date-time
                      last_block_id:
                        type: object
                        properties:
                          hash:
                            type: string
                            format: byte
                          part_set_header:
                            type: object
                            properties:
                              total:
                                type: integer
                                format: int64
                              hash:
                                type: string
                                format: byte
                            title: PartsetHeader
                        title: BlockID
                      last_commit_hash:
                        type: string
                        format: byte
                        title: hashes of block data
                      data_hash:
                        type: string
                        format: byte
                      validators_hash:
                        type: string
                        format: byte
                        title: hashes from the app output from the prev block
                      next_validators_hash:
                        type: string
                        format: byte
                      consensus_hash:
                        type: string
                        format: byte
                      app_hash:
                        type: string
                        format: byte
                      last_results_hash:
                        type: string
                        format: byte
                      evidence_hash:
                        type: string
                        format: byte
                        title: consensus info
                      proposer_address:
                        type: string
                        format: byte
                    description: Header defines the structure of a Tendermint block header.
                  commit:
                    type: object
                    properties:
                      height:
                        type: string
                        format: int64
                      round:
                        type: integer
                        format: int32
                      block_id:
                        type: object
                        properties:
                          hash:
                            type: string
                            format: byte
                          part_set_header:
                            type: object
                            properties:
                              total:
                                type: integer
                                format: int64
                              hash:
                                type: string
                                format: byte
                            title: PartsetHeader
                        title: BlockID
                      signatures:
                        type: array
                        items:
                          type: object
                          properties:
                            block_id_flag:
                              type: string
                              enum:
                                - BLOCK_ID_FLAG_UNKNOWN
                                - BLOCK_ID_FLAG_ABSENT
                                - BLOCK_ID_FLAG_COMMIT
                                - BLOCK_ID_FLAG_NIL
                              default: BLOCK_ID_FLAG_UNKNOWN
                              title: >-
                                BlockIdFlag indicates which BlcokID the
                                signature is for
                            validator_address:
                              type: string
                              format: byte
                            timestamp:
                              type: string
                              format: date-time
                            signature:
                              type: string
                              format: byte
                          description: >-
                            CommitSig is a part of the Vote included in a
                            Commit.
                    description: >-
                      Commit contains the evidence that a block was committed by
                      a set of validators.
              validator_set:
                type: object
                properties:
                  validators:
                    type: array
                    items:
                      type: object
                      properties:
                        address:
                          type: string
                          format: byte
                        pub_key:
                          type: object
                          properties:
                            ed25519:
                              type: string
                              format: byte
                            secp256k1:
                              type: string
                              format: byte
                          title: >-
                            PublicKey defines the keys available for use with
                            Tendermint Validators
                        voting_power:
                          type: string
                          format: int64
                        proposer_priority:
                          type: string
                          format: int64
                  proposer:
                    type: object
                    properties:
                      address:
                        type: string
                        format: byte
                      pub_key:
                        type: object
                        properties:
                          ed25519:
                            type: string
                            format: byte
                          secp256k1:
                            type: string
                            format: byte
                        title: >-
                          PublicKey defines the keys available for use with
                          Tendermint Validators
                      voting_power:
                        type: string
                        format: int64
                      proposer_priority:
                        type: string
                        format: int64
                  total_voting_power:
                    type: string
                    format: int64
          common_height:
            type: string
            format: int64
          byzantine_validators:
            type: array
            items:
              type: object
              properties:
                address:
                  type: string
                  format: byte
                pub_key:
                  type: object
                  properties:
                    ed25519:
                      type: string
                      format: byte
                    secp256k1:
                      type: string
                      format: byte
                  title: >-
                    PublicKey defines the keys available for use with Tendermint
                    Validators
                voting_power:
                  type: string
                  format: int64
                proposer_priority:
                  type: string
                  format: int64
          total_voting_power:
            type: string
            format: int64
          timestamp:
            type: string
            format: date-time
        description: >-
          LightClientAttackEvidence contains evidence of a set of validators
          attempting to mislead a light client.
  tendermint.types.EvidenceList:
    type: object
    properties:
      evidence:
        type: array
        items:
          type: object
          properties:
            duplicate_vote_evidence:
              type: object
              properties:
                vote_a:
                  type: object
                  properties:
                    type:
                      type: string
                      enum:
                        - SIGNED_MSG_TYPE_UNKNOWN
                        - SIGNED_MSG_TYPE_PREVOTE
                        - SIGNED_MSG_TYPE_PRECOMMIT
                        - SIGNED_MSG_TYPE_PROPOSAL
                      default: SIGNED_MSG_TYPE_UNKNOWN
                      description: >-
                        SignedMsgType is a type of signed message in the
                        consensus.

                         - SIGNED_MSG_TYPE_PREVOTE: Votes
                         - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                    height:
                      type: string
                      format: int64
                    round:
                      type: integer
                      format: int32
                    block_id:
                      type: object
                      properties:
                        hash:
                          type: string
                          format: byte
                        part_set_header:
                          type: object
                          properties:
                            total:
                              type: integer
                              format: int64
                            hash:
                              type: string
                              format: byte
                          title: PartsetHeader
                      title: BlockID
                    timestamp:
                      type: string
                      format: date-time
                    validator_address:
                      type: string
                      format: byte
                    validator_index:
                      type: integer
                      format: int32
                    signature:
                      type: string
                      format: byte
                  description: >-
                    Vote represents a prevote, precommit, or commit vote from
                    validators for

                    consensus.
                vote_b:
                  type: object
                  properties:
                    type:
                      type: string
                      enum:
                        - SIGNED_MSG_TYPE_UNKNOWN
                        - SIGNED_MSG_TYPE_PREVOTE
                        - SIGNED_MSG_TYPE_PRECOMMIT
                        - SIGNED_MSG_TYPE_PROPOSAL
                      default: SIGNED_MSG_TYPE_UNKNOWN
                      description: >-
                        SignedMsgType is a type of signed message in the
                        consensus.

                         - SIGNED_MSG_TYPE_PREVOTE: Votes
                         - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                    height:
                      type: string
                      format: int64
                    round:
                      type: integer
                      format: int32
                    block_id:
                      type: object
                      properties:
                        hash:
                          type: string
                          format: byte
                        part_set_header:
                          type: object
                          properties:
                            total:
                              type: integer
                              format: int64
                            hash:
                              type: string
                              format: byte
                          title: PartsetHeader
                      title: BlockID
                    timestamp:
                      type: string
                      format: date-time
                    validator_address:
                      type: string
                      format: byte
                    validator_index:
                      type: integer
                      format: int32
                    signature:
                      type: string
                      format: byte
                  description: >-
                    Vote represents a prevote, precommit, or commit vote from
                    validators for

                    consensus.
                total_voting_power:
                  type: string
                  format: int64
                validator_power:
                  type: string
                  format: int64
                timestamp:
                  type: string
                  format: date-time
              description: >-
                DuplicateVoteEvidence contains evidence of a validator signed
                two conflicting votes.
            light_client_attack_evidence:
              type: object
              properties:
                conflicting_block:
                  type: object
                  properties:
                    signed_header:
                      type: object
                      properties:
                        header:
                          type: object
                          properties:
                            version:
                              title: basic block info
                              type: object
                              properties:
                                block:
                                  type: string
                                  format: uint64
                                app:
                                  type: string
                                  format: uint64
                              description: >-
                                Consensus captures the consensus rules for
                                processing a block in the blockchain,

                                including all blockchain data structures and the
                                rules of the application's

                                state transition machine.
                            chain_id:
                              type: string
                            height:
                              type: string
                              format: int64
                            time:
                              type: string
                              format: date-time
                            last_block_id:
                              type: object
                              properties:
                                hash:
                                  type: string
                                  format: byte
                                part_set_header:
                                  type: object
                                  properties:
                                    total:
                                      type: integer
                                      format: int64
                                    hash:
                                      type: string
                                      format: byte
                                  title: PartsetHeader
                              title: BlockID
                            last_commit_hash:
                              type: string
                              format: byte
                              title: hashes of block data
                            data_hash:
                              type: string
                              format: byte
                            validators_hash:
                              type: string
                              format: byte
                              title: hashes from the app output from the prev block
                            next_validators_hash:
                              type: string
                              format: byte
                            consensus_hash:
                              type: string
                              format: byte
                            app_hash:
                              type: string
                              format: byte
                            last_results_hash:
                              type: string
                              format: byte
                            evidence_hash:
                              type: string
                              format: byte
                              title: consensus info
                            proposer_address:
                              type: string
                              format: byte
                          description: >-
                            Header defines the structure of a Tendermint block
                            header.
                        commit:
                          type: object
                          properties:
                            height:
                              type: string
                              format: int64
                            round:
                              type: integer
                              format: int32
                            block_id:
                              type: object
                              properties:
                                hash:
                                  type: string
                                  format: byte
                                part_set_header:
                                  type: object
                                  properties:
                                    total:
                                      type: integer
                                      format: int64
                                    hash:
                                      type: string
                                      format: byte
                                  title: PartsetHeader
                              title: BlockID
                            signatures:
                              type: array
                              items:
                                type: object
                                properties:
                                  block_id_flag:
                                    type: string
                                    enum:
                                      - BLOCK_ID_FLAG_UNKNOWN
                                      - BLOCK_ID_FLAG_ABSENT
                                      - BLOCK_ID_FLAG_COMMIT
                                      - BLOCK_ID_FLAG_NIL
                                    default: BLOCK_ID_FLAG_UNKNOWN
                                    title: >-
                                      BlockIdFlag indicates which BlcokID the
                                      signature is for
                                  validator_address:
                                    type: string
                                    format: byte
                                  timestamp:
                                    type: string
                                    format: date-time
                                  signature:
                                    type: string
                                    format: byte
                                description: >-
                                  CommitSig is a part of the Vote included in a
                                  Commit.
                          description: >-
                            Commit contains the evidence that a block was
                            committed by a set of validators.
                    validator_set:
                      type: object
                      properties:
                        validators:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                format: byte
                              pub_key:
                                type: object
                                properties:
                                  ed25519:
                                    type: string
                                    format: byte
                                  secp256k1:
                                    type: string
                                    format: byte
                                title: >-
                                  PublicKey defines the keys available for use
                                  with Tendermint Validators
                              voting_power:
                                type: string
                                format: int64
                              proposer_priority:
                                type: string
                                format: int64
                        proposer:
                          type: object
                          properties:
                            address:
                              type: string
                              format: byte
                            pub_key:
                              type: object
                              properties:
                                ed25519:
                                  type: string
                                  format: byte
                                secp256k1:
                                  type: string
                                  format: byte
                              title: >-
                                PublicKey defines the keys available for use
                                with Tendermint Validators
                            voting_power:
                              type: string
                              format: int64
                            proposer_priority:
                              type: string
                              format: int64
                        total_voting_power:
                          type: string
                          format: int64
                common_height:
                  type: string
                  format: int64
                byzantine_validators:
                  type: array
                  items:
                    type: object
                    properties:
                      address:
                        type: string
                        format: byte
                      pub_key:
                        type: object
                        properties:
                          ed25519:
                            type: string
                            format: byte
                          secp256k1:
                            type: string
                            format: byte
                        title: >-
                          PublicKey defines the keys available for use with
                          Tendermint Validators
                      voting_power:
                        type: string
                        format: int64
                      proposer_priority:
                        type: string
                        format: int64
                total_voting_power:
                  type: string
                  format: int64
                timestamp:
                  type: string
                  format: date-time
              description: >-
                LightClientAttackEvidence contains evidence of a set of
                validators attempting to mislead a light client.
  tendermint.types.LightBlock:
    type: object
    properties:
      signed_header:
        type: object
        properties:
          header:
            type: object
            properties:
              version:
                title: basic block info
                type: object
                properties:
                  block:
                    type: string
                    format: uint64
                  app:
                    type: string
                    format: uint64
                description: >-
                  Consensus captures the consensus rules for processing a block
                  in the blockchain,

                  including all blockchain data structures and the rules of the
                  application's

                  state transition machine.
              chain_id:
                type: string
              height:
                type: string
                format: int64
              time:
                type: string
                format: date-time
              last_block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              last_commit_hash:
                type: string
                format: byte
                title: hashes of block data
              data_hash:
                type: string
                format: byte
              validators_hash:
                type: string
                format: byte
                title: hashes from the app output from the prev block
              next_validators_hash:
                type: string
                format: byte
              consensus_hash:
                type: string
                format: byte
              app_hash:
                type: string
                format: byte
              last_results_hash:
                type: string
                format: byte
              evidence_hash:
                type: string
                format: byte
                title: consensus info
              proposer_address:
                type: string
                format: byte
            description: Header defines the structure of a Tendermint block header.
          commit:
            type: object
            properties:
              height:
                type: string
                format: int64
              round:
                type: integer
                format: int32
              block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              signatures:
                type: array
                items:
                  type: object
                  properties:
                    block_id_flag:
                      type: string
                      enum:
                        - BLOCK_ID_FLAG_UNKNOWN
                        - BLOCK_ID_FLAG_ABSENT
                        - BLOCK_ID_FLAG_COMMIT
                        - BLOCK_ID_FLAG_NIL
                      default: BLOCK_ID_FLAG_UNKNOWN
                      title: BlockIdFlag indicates which BlcokID the signature is for
                    validator_address:
                      type: string
                      format: byte
                    timestamp:
                      type: string
                      format: date-time
                    signature:
                      type: string
                      format: byte
                  description: CommitSig is a part of the Vote included in a Commit.
            description: >-
              Commit contains the evidence that a block was committed by a set
              of validators.
      validator_set:
        type: object
        properties:
          validators:
            type: array
            items:
              type: object
              properties:
                address:
                  type: string
                  format: byte
                pub_key:
                  type: object
                  properties:
                    ed25519:
                      type: string
                      format: byte
                    secp256k1:
                      type: string
                      format: byte
                  title: >-
                    PublicKey defines the keys available for use with Tendermint
                    Validators
                voting_power:
                  type: string
                  format: int64
                proposer_priority:
                  type: string
                  format: int64
          proposer:
            type: object
            properties:
              address:
                type: string
                format: byte
              pub_key:
                type: object
                properties:
                  ed25519:
                    type: string
                    format: byte
                  secp256k1:
                    type: string
                    format: byte
                title: >-
                  PublicKey defines the keys available for use with Tendermint
                  Validators
              voting_power:
                type: string
                format: int64
              proposer_priority:
                type: string
                format: int64
          total_voting_power:
            type: string
            format: int64
  tendermint.types.LightClientAttackEvidence:
    type: object
    properties:
      conflicting_block:
        type: object
        properties:
          signed_header:
            type: object
            properties:
              header:
                type: object
                properties:
                  version:
                    title: basic block info
                    type: object
                    properties:
                      block:
                        type: string
                        format: uint64
                      app:
                        type: string
                        format: uint64
                    description: >-
                      Consensus captures the consensus rules for processing a
                      block in the blockchain,

                      including all blockchain data structures and the rules of
                      the application's

                      state transition machine.
                  chain_id:
                    type: string
                  height:
                    type: string
                    format: int64
                  time:
                    type: string
                    format: date-time
                  last_block_id:
                    type: object
                    properties:
                      hash:
                        type: string
                        format: byte
                      part_set_header:
                        type: object
                        properties:
                          total:
                            type: integer
                            format: int64
                          hash:
                            type: string
                            format: byte
                        title: PartsetHeader
                    title: BlockID
                  last_commit_hash:
                    type: string
                    format: byte
                    title: hashes of block data
                  data_hash:
                    type: string
                    format: byte
                  validators_hash:
                    type: string
                    format: byte
                    title: hashes from the app output from the prev block
                  next_validators_hash:
                    type: string
                    format: byte
                  consensus_hash:
                    type: string
                    format: byte
                  app_hash:
                    type: string
                    format: byte
                  last_results_hash:
                    type: string
                    format: byte
                  evidence_hash:
                    type: string
                    format: byte
                    title: consensus info
                  proposer_address:
                    type: string
                    format: byte
                description: Header defines the structure of a Tendermint block header.
              commit:
                type: object
                properties:
                  height:
                    type: string
                    format: int64
                  round:
                    type: integer
                    format: int32
                  block_id:
                    type: object
                    properties:
                      hash:
                        type: string
                        format: byte
                      part_set_header:
                        type: object
                        properties:
                          total:
                            type: integer
                            format: int64
                          hash:
                            type: string
                            format: byte
                        title: PartsetHeader
                    title: BlockID
                  signatures:
                    type: array
                    items:
                      type: object
                      properties:
                        block_id_flag:
                          type: string
                          enum:
                            - BLOCK_ID_FLAG_UNKNOWN
                            - BLOCK_ID_FLAG_ABSENT
                            - BLOCK_ID_FLAG_COMMIT
                            - BLOCK_ID_FLAG_NIL
                          default: BLOCK_ID_FLAG_UNKNOWN
                          title: >-
                            BlockIdFlag indicates which BlcokID the signature is
                            for
                        validator_address:
                          type: string
                          format: byte
                        timestamp:
                          type: string
                          format: date-time
                        signature:
                          type: string
                          format: byte
                      description: CommitSig is a part of the Vote included in a Commit.
                description: >-
                  Commit contains the evidence that a block was committed by a
                  set of validators.
          validator_set:
            type: object
            properties:
              validators:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: string
                      format: byte
                    pub_key:
                      type: object
                      properties:
                        ed25519:
                          type: string
                          format: byte
                        secp256k1:
                          type: string
                          format: byte
                      title: >-
                        PublicKey defines the keys available for use with
                        Tendermint Validators
                    voting_power:
                      type: string
                      format: int64
                    proposer_priority:
                      type: string
                      format: int64
              proposer:
                type: object
                properties:
                  address:
                    type: string
                    format: byte
                  pub_key:
                    type: object
                    properties:
                      ed25519:
                        type: string
                        format: byte
                      secp256k1:
                        type: string
                        format: byte
                    title: >-
                      PublicKey defines the keys available for use with
                      Tendermint Validators
                  voting_power:
                    type: string
                    format: int64
                  proposer_priority:
                    type: string
                    format: int64
              total_voting_power:
                type: string
                format: int64
      common_height:
        type: string
        format: int64
      byzantine_validators:
        type: array
        items:
          type: object
          properties:
            address:
              type: string
              format: byte
            pub_key:
              type: object
              properties:
                ed25519:
                  type: string
                  format: byte
                secp256k1:
                  type: string
                  format: byte
              title: >-
                PublicKey defines the keys available for use with Tendermint
                Validators
            voting_power:
              type: string
              format: int64
            proposer_priority:
              type: string
              format: int64
      total_voting_power:
        type: string
        format: int64
      timestamp:
        type: string
        format: date-time
    description: >-
      LightClientAttackEvidence contains evidence of a set of validators
      attempting to mislead a light client.
  tendermint.types.SignedHeader:
    type: object
    properties:
      header:
        type: object
        properties:
          version:
            title: basic block info
            type: object
            properties:
              block:
                type: string
                format: uint64
              app:
                type: string
                format: uint64
            description: >-
              Consensus captures the consensus rules for processing a block in
              the blockchain,

              including all blockchain data structures and the rules of the
              application's

              state transition machine.
          chain_id:
            type: string
          height:
            type: string
            format: int64
          time:
            type: string
            format: date-time
          last_block_id:
            type: object
            properties:
              hash:
                type: string
                format: byte
              part_set_header:
                type: object
                properties:
                  total:
                    type: integer
                    format: int64
                  hash:
                    type: string
                    format: byte
                title: PartsetHeader
            title: BlockID
          last_commit_hash:
            type: string
            format: byte
            title: hashes of block data
          data_hash:
            type: string
            format: byte
          validators_hash:
            type: string
            format: byte
            title: hashes from the app output from the prev block
          next_validators_hash:
            type: string
            format: byte
          consensus_hash:
            type: string
            format: byte
          app_hash:
            type: string
            format: byte
          last_results_hash:
            type: string
            format: byte
          evidence_hash:
            type: string
            format: byte
            title: consensus info
          proposer_address:
            type: string
            format: byte
        description: Header defines the structure of a Tendermint block header.
      commit:
        type: object
        properties:
          height:
            type: string
            format: int64
          round:
            type: integer
            format: int32
          block_id:
            type: object
            properties:
              hash:
                type: string
                format: byte
              part_set_header:
                type: object
                properties:
                  total:
                    type: integer
                    format: int64
                  hash:
                    type: string
                    format: byte
                title: PartsetHeader
            title: BlockID
          signatures:
            type: array
            items:
              type: object
              properties:
                block_id_flag:
                  type: string
                  enum:
                    - BLOCK_ID_FLAG_UNKNOWN
                    - BLOCK_ID_FLAG_ABSENT
                    - BLOCK_ID_FLAG_COMMIT
                    - BLOCK_ID_FLAG_NIL
                  default: BLOCK_ID_FLAG_UNKNOWN
                  title: BlockIdFlag indicates which BlcokID the signature is for
                validator_address:
                  type: string
                  format: byte
                timestamp:
                  type: string
                  format: date-time
                signature:
                  type: string
                  format: byte
              description: CommitSig is a part of the Vote included in a Commit.
        description: >-
          Commit contains the evidence that a block was committed by a set of
          validators.
  tendermint.types.SignedMsgType:
    type: string
    enum:
      - SIGNED_MSG_TYPE_UNKNOWN
      - SIGNED_MSG_TYPE_PREVOTE
      - SIGNED_MSG_TYPE_PRECOMMIT
      - SIGNED_MSG_TYPE_PROPOSAL
    default: SIGNED_MSG_TYPE_UNKNOWN
    description: |-
      SignedMsgType is a type of signed message in the consensus.

       - SIGNED_MSG_TYPE_PREVOTE: Votes
       - SIGNED_MSG_TYPE_PROPOSAL: Proposals
  tendermint.types.Validator:
    type: object
    properties:
      address:
        type: string
        format: byte
      pub_key:
        type: object
        properties:
          ed25519:
            type: string
            format: byte
          secp256k1:
            type: string
            format: byte
        title: >-
          PublicKey defines the keys available for use with Tendermint
          Validators
      voting_power:
        type: string
        format: int64
      proposer_priority:
        type: string
        format: int64
  tendermint.types.ValidatorSet:
    type: object
    properties:
      validators:
        type: array
        items:
          type: object
          properties:
            address:
              type: string
              format: byte
            pub_key:
              type: object
              properties:
                ed25519:
                  type: string
                  format: byte
                secp256k1:
                  type: string
                  format: byte
              title: >-
                PublicKey defines the keys available for use with Tendermint
                Validators
            voting_power:
              type: string
              format: int64
            proposer_priority:
              type: string
              format: int64
      proposer:
        type: object
        properties:
          address:
            type: string
            format: byte
          pub_key:
            type: object
            properties:
              ed25519:
                type: string
                format: byte
              secp256k1:
                type: string
                format: byte
            title: >-
              PublicKey defines the keys available for use with Tendermint
              Validators
          voting_power:
            type: string
            format: int64
          proposer_priority:
            type: string
            format: int64
      total_voting_power:
        type: string
        format: int64
  tendermint.types.Vote:
    type: object
    properties:
      type:
        type: string
        enum:
          - SIGNED_MSG_TYPE_UNKNOWN
          - SIGNED_MSG_TYPE_PREVOTE
          - SIGNED_MSG_TYPE_PRECOMMIT
          - SIGNED_MSG_TYPE_PROPOSAL
        default: SIGNED_MSG_TYPE_UNKNOWN
        description: |-
          SignedMsgType is a type of signed message in the consensus.

           - SIGNED_MSG_TYPE_PREVOTE: Votes
           - SIGNED_MSG_TYPE_PROPOSAL: Proposals
      height:
        type: string
        format: int64
      round:
        type: integer
        format: int32
      block_id:
        type: object
        properties:
          hash:
            type: string
            format: byte
          part_set_header:
            type: object
            properties:
              total:
                type: integer
                format: int64
              hash:
                type: string
                format: byte
            title: PartsetHeader
        title: BlockID
      timestamp:
        type: string
        format: date-time
      validator_address:
        type: string
        format: byte
      validator_index:
        type: integer
        format: int32
      signature:
        type: string
        format: byte
    description: |-
      Vote represents a prevote, precommit, or commit vote from validators for
      consensus.
  plugchain.prc10.Params:
    type: object
    properties:
      issue_token_base_fee:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
      operate_token_fee_ratio:
        type: string
  plugchain.prc10.QueryFeesResponse:
    type: object
    properties:
      exist:
        type: boolean
      issue_fee:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
      operate_fee:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
  plugchain.prc10.QueryParamsResponse:
    type: object
    properties:
      params:
        type: object
        properties:
          issue_token_base_fee:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom
              method

              signatures required by gogoproto.
          operate_token_fee_ratio:
            type: string
      res:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
  plugchain.prc10.QueryTokenResponse:
    type: object
    properties:
      Token:
        type: object
        properties:
          type_url:
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
          value:
            type: string
            format: byte
            description: >-
              Must be a valid serialized protocol buffer of the above specified
              type.
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := ptypes.MarshalAny(foo)
               ...
               foo := &pb.Foo{}
               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
  plugchain.prc10.QueryTokensResponse:
    type: object
    properties:
      Tokens:
        type: array
        items:
          type: object
          properties:
            type_url:
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
            value:
              type: string
              format: byte
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
  tendermint.liquidity.v1beta1.DepositMsgState:
    type: object
    properties:
      msg_height:
        type: string
        format: int64
        example: '1000'
        title: height where this message is appended to the batch
      msg_index:
        type: string
        format: uint64
        example: '1'
        title: index of this deposit message in this liquidity pool
      executed:
        type: boolean
        example: true
        title: true if executed on this batch, false if not executed
      succeeded:
        type: boolean
        example: true
        title: true if executed successfully on this batch, false if failed
      to_be_deleted:
        type: boolean
        example: true
        title: >-
          true if ready to be deleted on kvstore, false if not ready to be
          deleted
      msg:
        title: MsgDepositWithinBatch
        type: object
        properties:
          depositor_address:
            type: string
            format: sdk.AccAddress
            example: gx1sltcyjm5k0edlg59t47lsyw8gtgc3nudklntcq
            description: account address of the origin of this message
          pool_id:
            type: string
            format: uint64
            example: '1'
            title: id of the target pool
          deposit_coins:
            type: array
            format: sdk.Coins
            example:
              - denom: denomX
                amount: '1000000'
              - denom: denomY
                amount: '2000000'
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            title: reserve coin pair of the pool to deposit
        description: >-
          `MsgDepositWithinBatch defines` an `sdk.Msg` type that supports
          submitting 

          a deposit request to the batch of the liquidity pool.

          Deposit is submitted to the batch of the Liquidity pool with the
          specified 

          `pool_id`, `deposit_coins` for reserve.

          This request is stacked in the batch of the liquidity pool, is not
          processed 

          immediately, and is processed in the `endblock` at the same time as
          other requests.


          See:
          https://github.com/oracleNetworkProtocol/liquidity/blob/develop/x/liquidity/spec/04_messages.md
    description: >-
      DepositMsgState defines the state of deposit message that contains state
      information as it is processed in the next batch or batches.
  tendermint.liquidity.v1beta1.MsgDepositWithinBatch:
    type: object
    properties:
      depositor_address:
        type: string
        format: sdk.AccAddress
        example: gx1sltcyjm5k0edlg59t47lsyw8gtgc3nudklntcq
        description: account address of the origin of this message
      pool_id:
        type: string
        format: uint64
        example: '1'
        title: id of the target pool
      deposit_coins:
        type: array
        format: sdk.Coins
        example:
          - denom: denomX
            amount: '1000000'
          - denom: denomY
            amount: '2000000'
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        title: reserve coin pair of the pool to deposit
    description: >-
      `MsgDepositWithinBatch defines` an `sdk.Msg` type that supports
      submitting 

      a deposit request to the batch of the liquidity pool.

      Deposit is submitted to the batch of the Liquidity pool with the
      specified 

      `pool_id`, `deposit_coins` for reserve.

      This request is stacked in the batch of the liquidity pool, is not
      processed 

      immediately, and is processed in the `endblock` at the same time as other
      requests.


      See:
      https://github.com/oracleNetworkProtocol/liquidity/blob/develop/x/liquidity/spec/04_messages.md
  tendermint.liquidity.v1beta1.MsgSwapWithinBatch:
    type: object
    properties:
      swap_requester_address:
        type: string
        format: sdk.AccAddress
        example: gx1sltcyjm5k0edlg59t47lsyw8gtgc3nudklntcq
        description: account address of the origin of this message
        title: address of swap requester
      pool_id:
        type: string
        format: uint64
        example: '1'
        description: >-
          id of swap type, must match the value in the pool. Only `swap_type_id`
          1 is supported.
      swap_type_id:
        type: integer
        format: uint32
        example: '1'
        description: id of swap type. Must match the value in the pool.
      offer_coin:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
        format: sdk.Coin
        example:
          denom: denomX
          amount: '1000000'
      demand_coin_denom:
        type: string
        example: denomB
        description: >-
          denom of demand coin to be exchanged on the swap request, must match
          the denom in the pool.
      offer_coin_fee:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
        format: sdk.Coin
        example:
          denom: denomX
          amount: '5000'
      order_price:
        type: string
        format: sdk.Dec
        example: '1.1'
        description: >-
          limit order price for the order, the price is the exchange ratio of
          X/Y

          where X is the amount of the first coin and Y is the amount 

          of the second coin when their denoms are sorted alphabetically.
    description: >-
      `MsgSwapWithinBatch` defines an sdk.Msg type that supports submitting a
      swap offer request to the batch of the liquidity pool.

      Submit swap offer to the liquidity pool batch with the specified the
      `pool_id`, `swap_type_id`,

      `demand_coin_denom` with the coin and the price you're offering

      and `offer_coin_fee` must be half of offer coin amount * current
      `params.swap_fee_rate` and ceil for reservation to pay fees.

      This request is stacked in the batch of the liquidity pool, is not
      processed 

      immediately, and is processed in the `endblock` at the same time as other
      requests.

      You must request the same fields as the pool.

      Only the default `swap_type_id` 1 is supported.


      See: https://github.com/oracleNetworkProtocol/liquidity/tree/develop/doc

      https://github.com/oracleNetworkProtocol/liquidity/blob/develop/x/liquidity/spec/04_messages.md
  tendermint.liquidity.v1beta1.MsgWithdrawWithinBatch:
    type: object
    properties:
      withdrawer_address:
        type: string
        format: sdk.AccAddress
        example: gx1sltcyjm5k0edlg59t47lsyw8gtgc3nudklntcq
        description: account address of the origin of this message
      pool_id:
        type: string
        format: uint64
        example: '1'
        title: id of the target pool
      pool_coin:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
        format: sdk.Coin
        example:
          denom: poolD35A0CC16EE598F90B044CE296A405BA9C381E38837599D96F2F70C2F02A23A4
          amount: '1000'
    description: >-
      `MsgWithdrawWithinBatch` defines an `sdk.Msg` type that supports
      submitting 

      a withdraw request to the batch of the liquidity pool.

      Withdraw is submitted to the batch from the Liquidity pool with the 

      specified `pool_id`, `pool_coin` of the pool.

      This request is stacked in the batch of the liquidity pool, is not
      processed 

      immediately, and is processed in the `endblock` at the same time as other
      requests.


      See:
      https://github.com/oracleNetworkProtocol/liquidity/blob/develop/x/liquidity/spec/04_messages.md
  tendermint.liquidity.v1beta1.Params:
    type: object
    properties:
      pool_types:
        type: array
        items:
          type: object
          properties:
            id:
              type: integer
              format: uint32
              example: '1'
              title: >-
                This is the id of the pool_type that is used as pool_type_id for
                pool creation.

                In this version, only pool-type-id 1 is supported.

                {"id":1,"name":"ConstantProductLiquidityPool","min_reserve_coin_num":2,"max_reserve_coin_num":2,"description":""}
            name:
              type: string
              example: ConstantProductLiquidityPool
              description: name of the pool type.
            min_reserve_coin_num:
              type: integer
              format: uint32
              example: '2'
              description: >-
                minimum number of reserveCoins for LiquidityPoolType, only 2
                reserve coins are supported.
            max_reserve_coin_num:
              type: integer
              format: uint32
              example: '2'
              description: >-
                maximum number of reserveCoins for LiquidityPoolType, only 2
                reserve coins are supported.
            description:
              type: string
              description: description of the pool type.
          description: >-
            Structure for the pool type to distinguish the characteristics of
            the reserve pools.
        title: list of available pool types
      min_init_deposit_amount:
        type: string
        format: sdk.Int
        example: '1000000'
        description: >-
          Minimum number of coins to be deposited to the liquidity pool on pool
          creation.
      init_pool_coin_mint_amount:
        type: string
        format: sdk.Int
        example: '1000000'
        description: Initial mint amount of pool coins upon pool creation.
      max_reserve_coin_amount:
        type: string
        format: sdk.Int
        example: '1000000000000'
        description: >-
          Limit the size of each liquidity pool to minimize risk. In
          development, set to 0 for no limit. In production, set a limit.
      pool_creation_fee:
        type: array
        format: sdk.Coins
        example:
          - denom: uplugcn
            amount: '100000000'
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        description: Fee paid to create a Liquidity Pool. Set a fee to prevent spamming.
      swap_fee_rate:
        type: string
        format: sdk.Dec
        example: '0.003'
        description: Swap fee rate for every executed swap.
      withdraw_fee_rate:
        type: string
        format: sdk.Dec
        example: '0.003'
        description: Reserve coin withdrawal with less proportion by withdrawFeeRate.
      max_order_amount_ratio:
        type: string
        format: sdk.Dec
        example: '0.003'
        description: Maximum ratio of reserve coins that can be ordered at a swap order.
      unit_batch_height:
        type: integer
        format: uint32
        example: '1'
        description: The smallest unit batch height for every liquidity pool.
      circuit_breaker_enabled:
        type: boolean
        format: bool
        example: 'false'
        description: >-
          Circuit breaker enables or disables transaction messages in liquidity
          module.
    description: Params defines the parameters for the liquidity module.
  tendermint.liquidity.v1beta1.Pool:
    type: object
    properties:
      id:
        type: string
        format: uint64
        example: '1'
        title: id of the pool
      type_id:
        type: integer
        format: uint32
        example: '1'
        title: id of the pool_type
      reserve_coin_denoms:
        type: array
        example:
          - denomX
          - denomY
        items:
          type: string
        title: denoms of reserve coin pair of the pool
      reserve_account_address:
        type: string
        format: sdk.AccAddress
        example: gx1sltcyjm5k0edlg59t47lsyw8gtgc3nudklntcq
        title: reserve account address of the pool
      pool_coin_denom:
        type: string
        example: poolD35A0CC16EE598F90B044CE296A405BA9C381E38837599D96F2F70C2F02A23A4
        title: denom of pool coin of the pool
    description: Pool defines the liquidity pool that contains pool information.
  tendermint.liquidity.v1beta1.PoolBatch:
    type: object
    properties:
      pool_id:
        type: string
        format: uint64
        example: '1'
        title: id of the pool
      index:
        type: string
        format: uint64
        example: '1'
        title: index of this batch
      begin_height:
        type: string
        format: int64
        example: '1000'
        title: height where this batch is started
      deposit_msg_index:
        type: string
        format: uint64
        example: '1'
        title: last index of DepositMsgStates
      withdraw_msg_index:
        type: string
        format: uint64
        example: '1'
        title: last index of WithdrawMsgStates
      swap_msg_index:
        type: string
        format: uint64
        example: '1'
        title: last index of SwapMsgStates
      executed:
        type: boolean
        example: true
        title: true if executed, false if not executed
    description: >-
      PoolBatch defines the batch or batches of a given liquidity pool that
      contains indexes of deposit, withdraw, and swap messages. 

      Index param increments by 1 if the pool id is same.
  tendermint.liquidity.v1beta1.PoolType:
    type: object
    properties:
      id:
        type: integer
        format: uint32
        example: '1'
        title: >-
          This is the id of the pool_type that is used as pool_type_id for pool
          creation.

          In this version, only pool-type-id 1 is supported.

          {"id":1,"name":"ConstantProductLiquidityPool","min_reserve_coin_num":2,"max_reserve_coin_num":2,"description":""}
      name:
        type: string
        example: ConstantProductLiquidityPool
        description: name of the pool type.
      min_reserve_coin_num:
        type: integer
        format: uint32
        example: '2'
        description: >-
          minimum number of reserveCoins for LiquidityPoolType, only 2 reserve
          coins are supported.
      max_reserve_coin_num:
        type: integer
        format: uint32
        example: '2'
        description: >-
          maximum number of reserveCoins for LiquidityPoolType, only 2 reserve
          coins are supported.
      description:
        type: string
        description: description of the pool type.
    description: >-
      Structure for the pool type to distinguish the characteristics of the
      reserve pools.
  tendermint.liquidity.v1beta1.QueryLiquidityPoolBatchResponse:
    type: object
    properties:
      batch:
        type: object
        properties:
          pool_id:
            type: string
            format: uint64
            example: '1'
            title: id of the pool
          index:
            type: string
            format: uint64
            example: '1'
            title: index of this batch
          begin_height:
            type: string
            format: int64
            example: '1000'
            title: height where this batch is started
          deposit_msg_index:
            type: string
            format: uint64
            example: '1'
            title: last index of DepositMsgStates
          withdraw_msg_index:
            type: string
            format: uint64
            example: '1'
            title: last index of WithdrawMsgStates
          swap_msg_index:
            type: string
            format: uint64
            example: '1'
            title: last index of SwapMsgStates
          executed:
            type: boolean
            example: true
            title: true if executed, false if not executed
        description: >-
          PoolBatch defines the batch or batches of a given liquidity pool that
          contains indexes of deposit, withdraw, and swap messages. 

          Index param increments by 1 if the pool id is same.
    description: >-
      the response type for the QueryLiquidityPoolBatchResponse RPC method.
      Returns the liquidity pool batch that corresponds to the requested
      pool_id.
  tendermint.liquidity.v1beta1.QueryLiquidityPoolResponse:
    type: object
    properties:
      pool:
        type: object
        properties:
          id:
            type: string
            format: uint64
            example: '1'
            title: id of the pool
          type_id:
            type: integer
            format: uint32
            example: '1'
            title: id of the pool_type
          reserve_coin_denoms:
            type: array
            example:
              - denomX
              - denomY
            items:
              type: string
            title: denoms of reserve coin pair of the pool
          reserve_account_address:
            type: string
            format: sdk.AccAddress
            example: gx1sltcyjm5k0edlg59t47lsyw8gtgc3nudklntcq
            title: reserve account address of the pool
          pool_coin_denom:
            type: string
            example: >-
              poolD35A0CC16EE598F90B044CE296A405BA9C381E38837599D96F2F70C2F02A23A4
            title: denom of pool coin of the pool
        description: Pool defines the liquidity pool that contains pool information.
    description: >-
      the response type for the QueryLiquidityPoolResponse RPC method. Returns
      the liquidity pool that corresponds to the requested pool_id.
  tendermint.liquidity.v1beta1.QueryLiquidityPoolsResponse:
    type: object
    properties:
      pools:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
              format: uint64
              example: '1'
              title: id of the pool
            type_id:
              type: integer
              format: uint32
              example: '1'
              title: id of the pool_type
            reserve_coin_denoms:
              type: array
              example:
                - denomX
                - denomY
              items:
                type: string
              title: denoms of reserve coin pair of the pool
            reserve_account_address:
              type: string
              format: sdk.AccAddress
              example: gx1sltcyjm5k0edlg59t47lsyw8gtgc3nudklntcq
              title: reserve account address of the pool
            pool_coin_denom:
              type: string
              example: >-
                poolD35A0CC16EE598F90B044CE296A405BA9C381E38837599D96F2F70C2F02A23A4
              title: denom of pool coin of the pool
          description: Pool defines the liquidity pool that contains pool information.
      pagination:
        description: >-
          pagination defines the pagination in the response. not working on this
          version.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      the response type for the QueryLiquidityPoolsResponse RPC method. This
      includes a list of all existing liquidity pools and paging results that
      contain next_key and total count.
  tendermint.liquidity.v1beta1.QueryParamsResponse:
    type: object
    properties:
      params:
        description: params holds all the parameters of this module.
        type: object
        properties:
          pool_types:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  format: uint32
                  example: '1'
                  title: >-
                    This is the id of the pool_type that is used as pool_type_id
                    for pool creation.

                    In this version, only pool-type-id 1 is supported.

                    {"id":1,"name":"ConstantProductLiquidityPool","min_reserve_coin_num":2,"max_reserve_coin_num":2,"description":""}
                name:
                  type: string
                  example: ConstantProductLiquidityPool
                  description: name of the pool type.
                min_reserve_coin_num:
                  type: integer
                  format: uint32
                  example: '2'
                  description: >-
                    minimum number of reserveCoins for LiquidityPoolType, only 2
                    reserve coins are supported.
                max_reserve_coin_num:
                  type: integer
                  format: uint32
                  example: '2'
                  description: >-
                    maximum number of reserveCoins for LiquidityPoolType, only 2
                    reserve coins are supported.
                description:
                  type: string
                  description: description of the pool type.
              description: >-
                Structure for the pool type to distinguish the characteristics
                of the reserve pools.
            title: list of available pool types
          min_init_deposit_amount:
            type: string
            format: sdk.Int
            example: '1000000'
            description: >-
              Minimum number of coins to be deposited to the liquidity pool on
              pool creation.
          init_pool_coin_mint_amount:
            type: string
            format: sdk.Int
            example: '1000000'
            description: Initial mint amount of pool coins upon pool creation.
          max_reserve_coin_amount:
            type: string
            format: sdk.Int
            example: '1000000000000'
            description: >-
              Limit the size of each liquidity pool to minimize risk. In
              development, set to 0 for no limit. In production, set a limit.
          pool_creation_fee:
            type: array
            format: sdk.Coins
            example:
              - denom: uplugcn
                amount: '100000000'
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            description: >-
              Fee paid to create a Liquidity Pool. Set a fee to prevent
              spamming.
          swap_fee_rate:
            type: string
            format: sdk.Dec
            example: '0.003'
            description: Swap fee rate for every executed swap.
          withdraw_fee_rate:
            type: string
            format: sdk.Dec
            example: '0.003'
            description: Reserve coin withdrawal with less proportion by withdrawFeeRate.
          max_order_amount_ratio:
            type: string
            format: sdk.Dec
            example: '0.003'
            description: >-
              Maximum ratio of reserve coins that can be ordered at a swap
              order.
          unit_batch_height:
            type: integer
            format: uint32
            example: '1'
            description: The smallest unit batch height for every liquidity pool.
          circuit_breaker_enabled:
            type: boolean
            format: bool
            example: 'false'
            description: >-
              Circuit breaker enables or disables transaction messages in
              liquidity module.
    description: >-
      the response type for the QueryParamsResponse RPC method. This includes
      current parameter of the liquidity module.
  tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgResponse:
    type: object
    properties:
      deposit:
        type: object
        properties:
          msg_height:
            type: string
            format: int64
            example: '1000'
            title: height where this message is appended to the batch
          msg_index:
            type: string
            format: uint64
            example: '1'
            title: index of this deposit message in this liquidity pool
          executed:
            type: boolean
            example: true
            title: true if executed on this batch, false if not executed
          succeeded:
            type: boolean
            example: true
            title: true if executed successfully on this batch, false if failed
          to_be_deleted:
            type: boolean
            example: true
            title: >-
              true if ready to be deleted on kvstore, false if not ready to be
              deleted
          msg:
            title: MsgDepositWithinBatch
            type: object
            properties:
              depositor_address:
                type: string
                format: sdk.AccAddress
                example: gx1sltcyjm5k0edlg59t47lsyw8gtgc3nudklntcq
                description: account address of the origin of this message
              pool_id:
                type: string
                format: uint64
                example: '1'
                title: id of the target pool
              deposit_coins:
                type: array
                format: sdk.Coins
                example:
                  - denom: denomX
                    amount: '1000000'
                  - denom: denomY
                    amount: '2000000'
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                title: reserve coin pair of the pool to deposit
            description: >-
              `MsgDepositWithinBatch defines` an `sdk.Msg` type that supports
              submitting 

              a deposit request to the batch of the liquidity pool.

              Deposit is submitted to the batch of the Liquidity pool with the
              specified 

              `pool_id`, `deposit_coins` for reserve.

              This request is stacked in the batch of the liquidity pool, is not
              processed 

              immediately, and is processed in the `endblock` at the same time
              as other requests.


              See:
              https://github.com/oracleNetworkProtocol/liquidity/blob/develop/x/liquidity/spec/04_messages.md
        description: >-
          DepositMsgState defines the state of deposit message that contains
          state information as it is processed in the next batch or batches.
    description: >-
      the response type for the QueryPoolBatchDepositMsg RPC method. This
      includes a batch swap message of the batch.
  tendermint.liquidity.v1beta1.QueryPoolBatchDepositMsgsResponse:
    type: object
    properties:
      deposits:
        type: array
        items:
          type: object
          properties:
            msg_height:
              type: string
              format: int64
              example: '1000'
              title: height where this message is appended to the batch
            msg_index:
              type: string
              format: uint64
              example: '1'
              title: index of this deposit message in this liquidity pool
            executed:
              type: boolean
              example: true
              title: true if executed on this batch, false if not executed
            succeeded:
              type: boolean
              example: true
              title: true if executed successfully on this batch, false if failed
            to_be_deleted:
              type: boolean
              example: true
              title: >-
                true if ready to be deleted on kvstore, false if not ready to be
                deleted
            msg:
              title: MsgDepositWithinBatch
              type: object
              properties:
                depositor_address:
                  type: string
                  format: sdk.AccAddress
                  example: gx1sltcyjm5k0edlg59t47lsyw8gtgc3nudklntcq
                  description: account address of the origin of this message
                pool_id:
                  type: string
                  format: uint64
                  example: '1'
                  title: id of the target pool
                deposit_coins:
                  type: array
                  format: sdk.Coins
                  example:
                    - denom: denomX
                      amount: '1000000'
                    - denom: denomY
                      amount: '2000000'
                  items:
                    type: object
                    properties:
                      denom:
                        type: string
                      amount:
                        type: string
                    description: >-
                      Coin defines a token with a denomination and an amount.


                      NOTE: The amount field is an Int which implements the
                      custom method

                      signatures required by gogoproto.
                  title: reserve coin pair of the pool to deposit
              description: >-
                `MsgDepositWithinBatch defines` an `sdk.Msg` type that supports
                submitting 

                a deposit request to the batch of the liquidity pool.

                Deposit is submitted to the batch of the Liquidity pool with the
                specified 

                `pool_id`, `deposit_coins` for reserve.

                This request is stacked in the batch of the liquidity pool, is
                not processed 

                immediately, and is processed in the `endblock` at the same time
                as other requests.


                See:
                https://github.com/oracleNetworkProtocol/liquidity/blob/develop/x/liquidity/spec/04_messages.md
          description: >-
            DepositMsgState defines the state of deposit message that contains
            state information as it is processed in the next batch or batches.
      pagination:
        description: >-
          pagination defines the pagination in the response. not working on this
          version.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      the response type for the QueryPoolBatchDeposit RPC method. This includes
      a list of all currently existing deposit messages of the batch and paging
      results that contain next_key and total count.
  tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgResponse:
    type: object
    properties:
      swap:
        type: object
        properties:
          msg_height:
            type: string
            format: int64
            example: '1000'
            title: height where this message is appended to the batch
          msg_index:
            type: string
            format: uint64
            example: '1'
            title: index of this swap message in this liquidity pool
          executed:
            type: boolean
            example: true
            title: true if executed on this batch, false if not executed
          succeeded:
            type: boolean
            example: true
            title: true if executed successfully on this batch, false if failed
          to_be_deleted:
            type: boolean
            example: true
            title: >-
              true if ready to be deleted on kvstore, false if not ready to be
              deleted
          order_expiry_height:
            type: string
            format: int64
            example: '1000'
            title: >-
              swap orders are cancelled when current height is equal to or
              higher than ExpiryHeight
          exchanged_offer_coin:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom
              method

              signatures required by gogoproto.
            format: sdk.Coin
            example:
              denom: denomX
              amount: '600000'
            title: offer coin exchanged until now
          remaining_offer_coin:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom
              method

              signatures required by gogoproto.
            format: sdk.Coin
            example:
              denom: denomX
              amount: '400000'
            title: offer coin currently remaining to be exchanged
          reserved_offer_coin_fee:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom
              method

              signatures required by gogoproto.
            format: sdk.Coin
            example:
              denom: denomX
              amount: '5000'
            title: reserve fee for pays fee in half offer coin
          msg:
            title: MsgSwapWithinBatch
            type: object
            properties:
              swap_requester_address:
                type: string
                format: sdk.AccAddress
                example: gx1sltcyjm5k0edlg59t47lsyw8gtgc3nudklntcq
                description: account address of the origin of this message
                title: address of swap requester
              pool_id:
                type: string
                format: uint64
                example: '1'
                description: >-
                  id of swap type, must match the value in the pool. Only
                  `swap_type_id` 1 is supported.
              swap_type_id:
                type: integer
                format: uint32
                example: '1'
                description: id of swap type. Must match the value in the pool.
              offer_coin:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
                format: sdk.Coin
                example:
                  denom: denomX
                  amount: '1000000'
              demand_coin_denom:
                type: string
                example: denomB
                description: >-
                  denom of demand coin to be exchanged on the swap request, must
                  match the denom in the pool.
              offer_coin_fee:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
                format: sdk.Coin
                example:
                  denom: denomX
                  amount: '5000'
              order_price:
                type: string
                format: sdk.Dec
                example: '1.1'
                description: >-
                  limit order price for the order, the price is the exchange
                  ratio of X/Y

                  where X is the amount of the first coin and Y is the amount 

                  of the second coin when their denoms are sorted
                  alphabetically.
            description: >-
              `MsgSwapWithinBatch` defines an sdk.Msg type that supports
              submitting a swap offer request to the batch of the liquidity
              pool.

              Submit swap offer to the liquidity pool batch with the specified
              the `pool_id`, `swap_type_id`,

              `demand_coin_denom` with the coin and the price you're offering

              and `offer_coin_fee` must be half of offer coin amount * current
              `params.swap_fee_rate` and ceil for reservation to pay fees.

              This request is stacked in the batch of the liquidity pool, is not
              processed 

              immediately, and is processed in the `endblock` at the same time
              as other requests.

              You must request the same fields as the pool.

              Only the default `swap_type_id` 1 is supported.


              See:
              https://github.com/oracleNetworkProtocol/liquidity/tree/develop/doc

              https://github.com/oracleNetworkProtocol/liquidity/blob/develop/x/liquidity/spec/04_messages.md
        description: >-
          SwapMsgState defines the state of the swap message that contains state
          information as the message is processed in the next batch or batches.
    description: >-
      the response type for the QueryPoolBatchSwapMsg RPC method. This includes
      a batch swap message of the batch.
  tendermint.liquidity.v1beta1.QueryPoolBatchSwapMsgsResponse:
    type: object
    properties:
      swaps:
        type: array
        items:
          type: object
          properties:
            msg_height:
              type: string
              format: int64
              example: '1000'
              title: height where this message is appended to the batch
            msg_index:
              type: string
              format: uint64
              example: '1'
              title: index of this swap message in this liquidity pool
            executed:
              type: boolean
              example: true
              title: true if executed on this batch, false if not executed
            succeeded:
              type: boolean
              example: true
              title: true if executed successfully on this batch, false if failed
            to_be_deleted:
              type: boolean
              example: true
              title: >-
                true if ready to be deleted on kvstore, false if not ready to be
                deleted
            order_expiry_height:
              type: string
              format: int64
              example: '1000'
              title: >-
                swap orders are cancelled when current height is equal to or
                higher than ExpiryHeight
            exchanged_offer_coin:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
              format: sdk.Coin
              example:
                denom: denomX
                amount: '600000'
              title: offer coin exchanged until now
            remaining_offer_coin:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
              format: sdk.Coin
              example:
                denom: denomX
                amount: '400000'
              title: offer coin currently remaining to be exchanged
            reserved_offer_coin_fee:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
              format: sdk.Coin
              example:
                denom: denomX
                amount: '5000'
              title: reserve fee for pays fee in half offer coin
            msg:
              title: MsgSwapWithinBatch
              type: object
              properties:
                swap_requester_address:
                  type: string
                  format: sdk.AccAddress
                  example: gx1sltcyjm5k0edlg59t47lsyw8gtgc3nudklntcq
                  description: account address of the origin of this message
                  title: address of swap requester
                pool_id:
                  type: string
                  format: uint64
                  example: '1'
                  description: >-
                    id of swap type, must match the value in the pool. Only
                    `swap_type_id` 1 is supported.
                swap_type_id:
                  type: integer
                  format: uint32
                  example: '1'
                  description: id of swap type. Must match the value in the pool.
                offer_coin:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                  format: sdk.Coin
                  example:
                    denom: denomX
                    amount: '1000000'
                demand_coin_denom:
                  type: string
                  example: denomB
                  description: >-
                    denom of demand coin to be exchanged on the swap request,
                    must match the denom in the pool.
                offer_coin_fee:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                  format: sdk.Coin
                  example:
                    denom: denomX
                    amount: '5000'
                order_price:
                  type: string
                  format: sdk.Dec
                  example: '1.1'
                  description: >-
                    limit order price for the order, the price is the exchange
                    ratio of X/Y

                    where X is the amount of the first coin and Y is the amount 

                    of the second coin when their denoms are sorted
                    alphabetically.
              description: >-
                `MsgSwapWithinBatch` defines an sdk.Msg type that supports
                submitting a swap offer request to the batch of the liquidity
                pool.

                Submit swap offer to the liquidity pool batch with the specified
                the `pool_id`, `swap_type_id`,

                `demand_coin_denom` with the coin and the price you're offering

                and `offer_coin_fee` must be half of offer coin amount * current
                `params.swap_fee_rate` and ceil for reservation to pay fees.

                This request is stacked in the batch of the liquidity pool, is
                not processed 

                immediately, and is processed in the `endblock` at the same time
                as other requests.

                You must request the same fields as the pool.

                Only the default `swap_type_id` 1 is supported.


                See:
                https://github.com/oracleNetworkProtocol/liquidity/tree/develop/doc

                https://github.com/oracleNetworkProtocol/liquidity/blob/develop/x/liquidity/spec/04_messages.md
          description: >-
            SwapMsgState defines the state of the swap message that contains
            state information as the message is processed in the next batch or
            batches.
      pagination:
        description: >-
          pagination defines the pagination in the response. not working on this
          version.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      the response type for the QueryPoolBatchSwapMsgs RPC method. This includes
      list of all currently existing swap messages of the batch and paging
      results that contain next_key and total count.
  tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgResponse:
    type: object
    properties:
      withdraw:
        type: object
        properties:
          msg_height:
            type: string
            format: int64
            example: '1000'
            title: height where this message is appended to the batch
          msg_index:
            type: string
            format: uint64
            example: '1'
            title: index of this withdraw message in this liquidity pool
          executed:
            type: boolean
            example: true
            title: true if executed on this batch, false if not executed
          succeeded:
            type: boolean
            example: true
            title: true if executed successfully on this batch, false if failed
          to_be_deleted:
            type: boolean
            example: true
            title: >-
              true if ready to be deleted on kvstore, false if not ready to be
              deleted
          msg:
            title: MsgWithdrawWithinBatch
            type: object
            properties:
              withdrawer_address:
                type: string
                format: sdk.AccAddress
                example: gx1sltcyjm5k0edlg59t47lsyw8gtgc3nudklntcq
                description: account address of the origin of this message
              pool_id:
                type: string
                format: uint64
                example: '1'
                title: id of the target pool
              pool_coin:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
                format: sdk.Coin
                example:
                  denom: >-
                    poolD35A0CC16EE598F90B044CE296A405BA9C381E38837599D96F2F70C2F02A23A4
                  amount: '1000'
            description: >-
              `MsgWithdrawWithinBatch` defines an `sdk.Msg` type that supports
              submitting 

              a withdraw request to the batch of the liquidity pool.

              Withdraw is submitted to the batch from the Liquidity pool with
              the 

              specified `pool_id`, `pool_coin` of the pool.

              This request is stacked in the batch of the liquidity pool, is not
              processed 

              immediately, and is processed in the `endblock` at the same time
              as other requests.


              See:
              https://github.com/oracleNetworkProtocol/liquidity/blob/develop/x/liquidity/spec/04_messages.md
        description: >-
          WithdrawMsgState defines the state of the withdraw message that
          contains state information as the message is processed in the next
          batch or batches.
    description: >-
      the response type for the QueryPoolBatchWithdrawMsg RPC method. This
      includes a batch swap message of the batch.
  tendermint.liquidity.v1beta1.QueryPoolBatchWithdrawMsgsResponse:
    type: object
    properties:
      withdraws:
        type: array
        items:
          type: object
          properties:
            msg_height:
              type: string
              format: int64
              example: '1000'
              title: height where this message is appended to the batch
            msg_index:
              type: string
              format: uint64
              example: '1'
              title: index of this withdraw message in this liquidity pool
            executed:
              type: boolean
              example: true
              title: true if executed on this batch, false if not executed
            succeeded:
              type: boolean
              example: true
              title: true if executed successfully on this batch, false if failed
            to_be_deleted:
              type: boolean
              example: true
              title: >-
                true if ready to be deleted on kvstore, false if not ready to be
                deleted
            msg:
              title: MsgWithdrawWithinBatch
              type: object
              properties:
                withdrawer_address:
                  type: string
                  format: sdk.AccAddress
                  example: gx1sltcyjm5k0edlg59t47lsyw8gtgc3nudklntcq
                  description: account address of the origin of this message
                pool_id:
                  type: string
                  format: uint64
                  example: '1'
                  title: id of the target pool
                pool_coin:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                  format: sdk.Coin
                  example:
                    denom: >-
                      poolD35A0CC16EE598F90B044CE296A405BA9C381E38837599D96F2F70C2F02A23A4
                    amount: '1000'
              description: >-
                `MsgWithdrawWithinBatch` defines an `sdk.Msg` type that supports
                submitting 

                a withdraw request to the batch of the liquidity pool.

                Withdraw is submitted to the batch from the Liquidity pool with
                the 

                specified `pool_id`, `pool_coin` of the pool.

                This request is stacked in the batch of the liquidity pool, is
                not processed 

                immediately, and is processed in the `endblock` at the same time
                as other requests.


                See:
                https://github.com/oracleNetworkProtocol/liquidity/blob/develop/x/liquidity/spec/04_messages.md
          description: >-
            WithdrawMsgState defines the state of the withdraw message that
            contains state information as the message is processed in the next
            batch or batches.
      pagination:
        description: >-
          pagination defines the pagination in the response. Not supported on
          this version.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      the response type for the QueryPoolBatchWithdraw RPC method. This includes
      a list of all currently existing withdraw messages of the batch and paging
      results that contain next_key and total count.
  tendermint.liquidity.v1beta1.SwapMsgState:
    type: object
    properties:
      msg_height:
        type: string
        format: int64
        example: '1000'
        title: height where this message is appended to the batch
      msg_index:
        type: string
        format: uint64
        example: '1'
        title: index of this swap message in this liquidity pool
      executed:
        type: boolean
        example: true
        title: true if executed on this batch, false if not executed
      succeeded:
        type: boolean
        example: true
        title: true if executed successfully on this batch, false if failed
      to_be_deleted:
        type: boolean
        example: true
        title: >-
          true if ready to be deleted on kvstore, false if not ready to be
          deleted
      order_expiry_height:
        type: string
        format: int64
        example: '1000'
        title: >-
          swap orders are cancelled when current height is equal to or higher
          than ExpiryHeight
      exchanged_offer_coin:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
        format: sdk.Coin
        example:
          denom: denomX
          amount: '600000'
        title: offer coin exchanged until now
      remaining_offer_coin:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
        format: sdk.Coin
        example:
          denom: denomX
          amount: '400000'
        title: offer coin currently remaining to be exchanged
      reserved_offer_coin_fee:
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
        description: |-
          Coin defines a token with a denomination and an amount.

          NOTE: The amount field is an Int which implements the custom method
          signatures required by gogoproto.
        format: sdk.Coin
        example:
          denom: denomX
          amount: '5000'
        title: reserve fee for pays fee in half offer coin
      msg:
        title: MsgSwapWithinBatch
        type: object
        properties:
          swap_requester_address:
            type: string
            format: sdk.AccAddress
            example: gx1sltcyjm5k0edlg59t47lsyw8gtgc3nudklntcq
            description: account address of the origin of this message
            title: address of swap requester
          pool_id:
            type: string
            format: uint64
            example: '1'
            description: >-
              id of swap type, must match the value in the pool. Only
              `swap_type_id` 1 is supported.
          swap_type_id:
            type: integer
            format: uint32
            example: '1'
            description: id of swap type. Must match the value in the pool.
          offer_coin:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom
              method

              signatures required by gogoproto.
            format: sdk.Coin
            example:
              denom: denomX
              amount: '1000000'
          demand_coin_denom:
            type: string
            example: denomB
            description: >-
              denom of demand coin to be exchanged on the swap request, must
              match the denom in the pool.
          offer_coin_fee:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom
              method

              signatures required by gogoproto.
            format: sdk.Coin
            example:
              denom: denomX
              amount: '5000'
          order_price:
            type: string
            format: sdk.Dec
            example: '1.1'
            description: >-
              limit order price for the order, the price is the exchange ratio
              of X/Y

              where X is the amount of the first coin and Y is the amount 

              of the second coin when their denoms are sorted alphabetically.
        description: >-
          `MsgSwapWithinBatch` defines an sdk.Msg type that supports submitting
          a swap offer request to the batch of the liquidity pool.

          Submit swap offer to the liquidity pool batch with the specified the
          `pool_id`, `swap_type_id`,

          `demand_coin_denom` with the coin and the price you're offering

          and `offer_coin_fee` must be half of offer coin amount * current
          `params.swap_fee_rate` and ceil for reservation to pay fees.

          This request is stacked in the batch of the liquidity pool, is not
          processed 

          immediately, and is processed in the `endblock` at the same time as
          other requests.

          You must request the same fields as the pool.

          Only the default `swap_type_id` 1 is supported.


          See:
          https://github.com/oracleNetworkProtocol/liquidity/tree/develop/doc

          https://github.com/oracleNetworkProtocol/liquidity/blob/develop/x/liquidity/spec/04_messages.md
    description: >-
      SwapMsgState defines the state of the swap message that contains state
      information as the message is processed in the next batch or batches.
  tendermint.liquidity.v1beta1.WithdrawMsgState:
    type: object
    properties:
      msg_height:
        type: string
        format: int64
        example: '1000'
        title: height where this message is appended to the batch
      msg_index:
        type: string
        format: uint64
        example: '1'
        title: index of this withdraw message in this liquidity pool
      executed:
        type: boolean
        example: true
        title: true if executed on this batch, false if not executed
      succeeded:
        type: boolean
        example: true
        title: true if executed successfully on this batch, false if failed
      to_be_deleted:
        type: boolean
        example: true
        title: >-
          true if ready to be deleted on kvstore, false if not ready to be
          deleted
      msg:
        title: MsgWithdrawWithinBatch
        type: object
        properties:
          withdrawer_address:
            type: string
            format: sdk.AccAddress
            example: gx1sltcyjm5k0edlg59t47lsyw8gtgc3nudklntcq
            description: account address of the origin of this message
          pool_id:
            type: string
            format: uint64
            example: '1'
            title: id of the target pool
          pool_coin:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom
              method

              signatures required by gogoproto.
            format: sdk.Coin
            example:
              denom: >-
                poolD35A0CC16EE598F90B044CE296A405BA9C381E38837599D96F2F70C2F02A23A4
              amount: '1000'
        description: >-
          `MsgWithdrawWithinBatch` defines an `sdk.Msg` type that supports
          submitting 

          a withdraw request to the batch of the liquidity pool.

          Withdraw is submitted to the batch from the Liquidity pool with the 

          specified `pool_id`, `pool_coin` of the pool.

          This request is stacked in the batch of the liquidity pool, is not
          processed 

          immediately, and is processed in the `endblock` at the same time as
          other requests.


          See:
          https://github.com/oracleNetworkProtocol/liquidity/blob/develop/x/liquidity/spec/04_messages.md
    description: >-
      WithdrawMsgState defines the state of the withdraw message that contains
      state information as the message is processed in the next batch or
      batches.
