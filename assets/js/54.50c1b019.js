(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{375:function(a,t,e){"use strict";e.r(t);var s=e(15),n=Object(s.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"local-testnet"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#local-testnet"}},[a._v("#")]),a._v(" Local Testnet")]),a._v(" "),t("p",[a._v("For testing or developing purpose, you may want to setup a local testnet.")]),a._v(" "),t("h2",{attrs:{id:"single-node-testnet"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#single-node-testnet"}},[a._v("#")]),a._v(" Single Node Testnet")]),a._v(" "),t("p",[t("strong",[a._v("Requirements:")])]),a._v(" "),t("ul",[t("li",[t("RouterLink",{attrs:{to:"/get-started/install.html"}},[a._v("Install plug")])],1)]),a._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("TIP")]),a._v(" "),t("p",[a._v("We use the default "),t("RouterLink",{attrs:{to:"/daemon/intro.html#home-directory"}},[a._v("home directory")]),a._v(" for all the following examples")],1)]),a._v(" "),t("h3",{attrs:{id:"plugchaind-init"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#plugchaind-init"}},[a._v("#")]),a._v(" plugchaind init")]),a._v(" "),t("p",[a._v("Initialize the genesis.json file that will help you to bootstrap the network")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("plugchaind init testing --chain-id"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("plugchain_521-1\n")])])]),t("h3",{attrs:{id:"create-a-key"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#create-a-key"}},[a._v("#")]),a._v(" create a key")]),a._v(" "),t("p",[a._v("Create a key to hold your validator account")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("plugchaind keys "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" MyValidator\n")])])]),t("h3",{attrs:{id:"plugchaind-add-genesis-account"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#plugchaind-add-genesis-account"}},[a._v("#")]),a._v(" plugchaind add-genesis-account")]),a._v(" "),t("p",[a._v("Add that key into the genesis.app_state.accounts array in the genesis file")]),a._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[a._v("TIP")]),a._v(" "),t("p",[a._v("this command lets you set the number of coins. Make sure this account has some plugchaind which is the only staking coin on Plug Chain Hub")])]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("plugchaind add-genesis-account "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("plugchaind keys show MyValidator "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--address")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v(" 150000000uplugcn\n")])])]),t("h3",{attrs:{id:"plugchaind-gentx"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#plugchaind-gentx"}},[a._v("#")]),a._v(" plugchaind gentx")]),a._v(" "),t("p",[a._v("Generate the transaction that creates your validator. The gentxs are stored in "),t("code",[a._v("~/.plugchain/config/gentx/")])]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("plugchaind gentx MyValidator 100000000plugchaind --chain-id"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("plugchain_521-1 \n")])])]),t("h3",{attrs:{id:"plugchaind-collect-gentxs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#plugchaind-collect-gentxs"}},[a._v("#")]),a._v(" plugchaind collect-gentxs")]),a._v(" "),t("p",[a._v("Add the generated staking transactions to the genesis file")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("plugchaind collect-gentxs\n")])])]),t("h3",{attrs:{id:"plugchaind-start"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#plugchaind-start"}},[a._v("#")]),a._v(" plugchaind start")]),a._v(" "),t("p",[a._v("Change the default token denom to "),t("code",[a._v("pc")])]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sed")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-i")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'s/stake/pc/g'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$HOME")]),a._v("/.plugchain/config/genesis.json\n")])])]),t("p",[a._v("Now itâ€˜s ready to start "),t("code",[a._v("plugchaind")])]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("plugchaind start\n")])])]),t("h3",{attrs:{id:"plugchaind-unsafe-reset-all"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#plugchaind-unsafe-reset-all"}},[a._v("#")]),a._v(" plugchaind unsafe-reset-all")]),a._v(" "),t("p",[a._v("You can use this command to reset your node, including the local blockchain database, address book file, and resets priv_validator.json to the genesis state.")]),a._v(" "),t("p",[a._v("This is useful when your local blockchain database somehow breaks and you are not able to sync or participate in the consensus.")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("plugchaind unsafe-reset-all\n")])])]),t("h3",{attrs:{id:"plugchaind-tendermint"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#plugchaind-tendermint"}},[a._v("#")]),a._v(" plugchaind tendermint")]),a._v(" "),t("p",[a._v("Query the unique node id which can be used in p2p connection, e.g. the "),t("code",[a._v("seeds")]),a._v(" and "),t("code",[a._v("persistent_peers")]),a._v(" in the "),t("RouterLink",{attrs:{to:"/daemon/intro.html#cnofig-toml"}},[a._v("config.toml")]),a._v(" are formatted as "),t("code",[a._v("<node-id>@ip:26656")]),a._v(".")],1),a._v(" "),t("p",[a._v("The node id is stored in the "),t("RouterLink",{attrs:{to:"/daemon/intro.html#node_key-json"}},[a._v("node_key.json")]),a._v(".")],1),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("plugchaind tendermint show-node-id\n")])])]),t("p",[a._v("Query the "),t("RouterLink",{attrs:{to:"/concepts/validator-faq.html#tendermint-key"}},[a._v("Tendermint Pubkey")]),a._v(" which is used to "),t("RouterLink",{attrs:{to:"/cli-client/stake/create-validator.html"}},[a._v("identify your validator")]),a._v(", and the corresponding private key will be used to sign the Pre-vote/Pre-commit in the consensus.")],1),a._v(" "),t("p",[a._v("The "),t("RouterLink",{attrs:{to:"/concepts/validator-faq.html#tendermint-key"}},[a._v("Tendermint Key")]),a._v(" is stored in the "),t("RouterLink",{attrs:{to:"/daemon/intro.html#priv_validator-json"}},[a._v("priv_validator.json")]),a._v(" which is "),t("RouterLink",{attrs:{to:"/concepts/validator-faq.html#how-to-backup-the-validator"}},[a._v("required to be backed up")]),a._v(" once you become a validator.")],1),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("plugchaind tendermint show-validator\n")])])]),t("p",[a._v("Query the bech32 prefixed validator address")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("plugchaind tendermint show-address\n")])])]),t("h3",{attrs:{id:"plugchaind-export"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#plugchaind-export"}},[a._v("#")]),a._v(" plugchaind export")]),a._v(" "),t("p",[a._v("Please refer to "),t("RouterLink",{attrs:{to:"/daemon/export.html"}},[a._v("Export Blockchain State")])],1)])}),[],!1,null,null,null);t.default=n.exports}}]);