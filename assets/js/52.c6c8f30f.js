(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{373:function(t,a,e){"use strict";e.r(a);var s=e(15),r=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"export-blockchain-state"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#export-blockchain-state"}},[t._v("#")]),t._v(" Export Blockchain State")]),t._v(" "),a("h2",{attrs:{id:"introduction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[t._v("#")]),t._v(" Introduction")]),t._v(" "),a("p",[t._v("plugchaind can export the blockchain state and output to a json-format string which can be used as the genesis file of a new blockchain.")]),t._v(" "),a("p",[t._v("By default, plugchaind stores snapshots of every 10,000 blocks and the last 100 blocks. You can export the blockchain state from any existing snapshot height.")]),t._v(" "),a("p",[t._v("If you want to export the state from a nonexisting snapshot height, you need to "),a("RouterLink",{attrs:{to:"/daemon/local-testnet.html#plugchaind-reset"}},[t._v("reset")]),t._v(" the blockchain state to the specified height first.")],1),t._v(" "),a("h2",{attrs:{id:"usage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("plugchaind "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("h2",{attrs:{id:"flags"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flags"}},[t._v("#")]),t._v(" Flags")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Name, shorthand")]),t._v(" "),a("th",[t._v("type")]),t._v(" "),a("th",[t._v("Required")]),t._v(" "),a("th",[t._v("Default")]),t._v(" "),a("th",[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("--for-zero-height")]),t._v(" "),a("td",[t._v("bool")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("false")]),t._v(" "),a("td",[t._v("Do some clean up work before exporting state. If you want to use the exported state to start a new blockchain, please add this flag. Otherwise, just leave out it")])]),t._v(" "),a("tr",[a("td",[t._v("--height")]),t._v(" "),a("td",[t._v("uint")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("0")]),t._v(" "),a("td",[t._v("Export state from a particular height, default value is 0 which means to export the latest state")])]),t._v(" "),a("tr",[a("td",[t._v("--home")]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("$HOME/.plugchain")]),t._v(" "),a("td",[t._v("Specify the directory which stores node config and blockchain data")])]),t._v(" "),a("tr",[a("td",[t._v("--output-file")]),t._v(" "),a("td",[t._v("string")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("genesis.json")]),t._v(" "),a("td",[t._v("Target file to save exported state")])])])]),t._v(" "),a("h2",{attrs:{id:"examples"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples"}},[t._v("#")]),t._v(" Examples")]),t._v(" "),a("p",[t._v("Export the current blockchain state")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("plugchaind "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--home")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("path-to-your-home"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("Export blockchain state from a particular height, the height must be an existing snapshot height")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("plugchaind "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--height")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--home")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("path-to-your-home"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("If you want to export the blockchain state from a particular height and use the exported state as genesis state of another blockchain")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("plugchaind "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--height")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),t._v(" --for-zero-height "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--home")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("path-to-your-home"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);