(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{352:function(a,e,t){"use strict";t.r(e);var s=t(15),r=Object(s.a)({},(function(){var a=this,e=a._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"keys"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#keys"}},[a._v("#")]),a._v(" Keys")]),a._v(" "),e("p",[a._v("Keys allows you to manage your local tendermint keystore (wallets) for plug.")]),a._v(" "),e("h2",{attrs:{id:"available-commands"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#available-commands"}},[a._v("#")]),a._v(" Available Commands")]),a._v(" "),e("table",[e("thead",[e("tr",[e("th",[a._v("Name")]),a._v(" "),e("th",[a._v("Description")])])]),a._v(" "),e("tbody",[e("tr",[e("td",[e("a",{attrs:{href:"#plugchaind-keys-add"}},[a._v("add")])]),a._v(" "),e("td",[a._v("Add an encrypted private key (either newly generated or recovered), encrypt it, and save to disk")])]),a._v(" "),e("tr",[e("td",[e("a",{attrs:{href:"#plugchaind-keys-delete"}},[a._v("delete")])]),a._v(" "),e("td",[a._v("Delete the given key")])]),a._v(" "),e("tr",[e("td",[e("a",{attrs:{href:"#plugchaind-keys-export"}},[a._v("export")])]),a._v(" "),e("td",[a._v("Export private keys")])]),a._v(" "),e("tr",[e("td",[e("a",{attrs:{href:"#plugchaind-keys-import"}},[a._v("import")])]),a._v(" "),e("td",[a._v("Import private keys into the local keybase")])]),a._v(" "),e("tr",[e("td",[e("a",{attrs:{href:"#plugchaind-keys-list"}},[a._v("list")])]),a._v(" "),e("td",[a._v("List all keys")])]),a._v(" "),e("tr",[e("td",[e("a",{attrs:{href:"#plugchaind-keys-migrate"}},[a._v("migrate")])]),a._v(" "),e("td",[a._v("Migrate keys from the legacy (db-based) Keybase")])]),a._v(" "),e("tr",[e("td",[e("a",{attrs:{href:"#plugchaind-keys-mnemonic"}},[a._v("mnemonic")])]),a._v(" "),e("td",[a._v("Compute the bip39 mnemonic for some input entropy")])]),a._v(" "),e("tr",[e("td",[e("a",{attrs:{href:"#plugchaind-keys-parse"}},[a._v("parse")])]),a._v(" "),e("td",[a._v("Parse address from hex to bech32 and vice versa")])]),a._v(" "),e("tr",[e("td",[e("a",{attrs:{href:"#plugchaind-keys-show"}},[a._v("show")])]),a._v(" "),e("td",[a._v("Retrieve key information by name or address")])])])]),a._v(" "),e("h2",{attrs:{id:"plugchaind-keys-add"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#plugchaind-keys-add"}},[a._v("#")]),a._v(" plugchaind keys add")]),a._v(" "),e("p",[a._v("Derive a new private key and encrypt to disk.")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("plugchaind keys "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("key-name"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("flags"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),e("p",[e("strong",[a._v("Flags:")])]),a._v(" "),e("table",[e("thead",[e("tr",[e("th",[a._v("Name, shorthand")]),a._v(" "),e("th",[a._v("Default")]),a._v(" "),e("th",[a._v("Description")]),a._v(" "),e("th",[a._v("Required")])])]),a._v(" "),e("tbody",[e("tr",[e("td",[a._v("--multisig")]),a._v(" "),e("td"),a._v(" "),e("td",[a._v("Construct and store a multisig public key")]),a._v(" "),e("td")]),a._v(" "),e("tr",[e("td",[a._v("--multisig-threshold")]),a._v(" "),e("td",[a._v("1")]),a._v(" "),e("td",[a._v("K out of N required signatures")]),a._v(" "),e("td")]),a._v(" "),e("tr",[e("td",[a._v("--nosort")]),a._v(" "),e("td",[a._v("false")]),a._v(" "),e("td",[a._v("Keys passed to --multisig are taken in the order they're supplied")]),a._v(" "),e("td")]),a._v(" "),e("tr",[e("td",[a._v("--pubkey")]),a._v(" "),e("td"),a._v(" "),e("td",[a._v("Parse a public key in bech32 format and save it to disk")]),a._v(" "),e("td")]),a._v(" "),e("tr",[e("td",[a._v("--interactive")]),a._v(" "),e("td",[a._v("false")]),a._v(" "),e("td",[a._v("Interactively prompt user for BIP39 passphrase and mnemonic")]),a._v(" "),e("td")]),a._v(" "),e("tr",[e("td",[a._v("--ledger")]),a._v(" "),e("td",[a._v("false")]),a._v(" "),e("td",[a._v("Store a local reference to a private key on a Ledger device")]),a._v(" "),e("td")]),a._v(" "),e("tr",[e("td",[a._v("--recover")]),a._v(" "),e("td",[a._v("false")]),a._v(" "),e("td",[a._v("Provide seed phrase to recover existing key instead of creating")]),a._v(" "),e("td")]),a._v(" "),e("tr",[e("td",[a._v("--no-backup")]),a._v(" "),e("td",[a._v("false")]),a._v(" "),e("td",[a._v("Don't print out seed phrase (if others are watching the terminal)")]),a._v(" "),e("td")]),a._v(" "),e("tr",[e("td",[a._v("--dry-run")]),a._v(" "),e("td",[a._v("false")]),a._v(" "),e("td",[a._v("Perform action, but don't add key to local keystore")]),a._v(" "),e("td")]),a._v(" "),e("tr",[e("td",[a._v("--hd-path")]),a._v(" "),e("td"),a._v(" "),e("td",[a._v("Manual HD Path derivation (overrides BIP44 config)")]),a._v(" "),e("td")]),a._v(" "),e("tr",[e("td",[a._v("--coin-type")]),a._v(" "),e("td",[a._v("118")]),a._v(" "),e("td",[a._v("coin type number for HD derivation")]),a._v(" "),e("td")]),a._v(" "),e("tr",[e("td",[a._v("--account")]),a._v(" "),e("td",[a._v("0")]),a._v(" "),e("td",[a._v("Account number for HD derivation")]),a._v(" "),e("td")]),a._v(" "),e("tr",[e("td",[a._v("--index")]),a._v(" "),e("td",[a._v("0")]),a._v(" "),e("td",[a._v("Address index number for HD derivation")]),a._v(" "),e("td")]),a._v(" "),e("tr",[e("td",[a._v("--algo")]),a._v(" "),e("td",[a._v("secp256k")]),a._v(" "),e("td",[a._v("Key signing algorithm to generate keys for")]),a._v(" "),e("td")])])]),a._v(" "),e("h3",{attrs:{id:"create-a-new-key"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#create-a-new-key"}},[a._v("#")]),a._v(" Create a new key")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("plugchaind keys "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" MyKey\n")])])]),e("p",[a._v("Enter and repeat the password, at least 8 characters, then you will get a new key.")]),a._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[a._v("WARNING")]),a._v(" "),e("p",[e("strong",[a._v("Important")])]),a._v(" "),e("p",[a._v("write the seed phrase in a safe place! It is the only way to recover your account if you ever forget your password.")])]),a._v(" "),e("h3",{attrs:{id:"recover-an-existing-key-from-seed-phrase"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#recover-an-existing-key-from-seed-phrase"}},[a._v("#")]),a._v(" Recover an existing key from seed phrase")]),a._v(" "),e("p",[a._v("If you forget your password or lose your key, or you wanna use your key in another place, you can recover your key by your seed phrase.")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("plugchaind keys "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" MyKey "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--recover")]),a._v("\n")])])]),e("p",[a._v("You'll be asked to enter and repeat the new password for your key, and enter the seed phrase. Then you get your key back.")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("Enter a passphrase "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" your key:\nRepeat the passphrase:\nEnter your recovery seed phrase:\n")])])]),e("h3",{attrs:{id:"create-a-multisig-key"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#create-a-multisig-key"}},[a._v("#")]),a._v(" Create a multisig key")]),a._v(" "),e("p",[a._v("The following example creates a multisig key with 3 sub-keys, and specify the minimum number of signatures as 2. The tx could be broadcast only when the number of signatures is greater than or equal to 2.")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("plugchaind keys "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("multisig-keyname"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" --multisig-threshold"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--multisig")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("signer-keyname-"),e("span",{pre:!0,attrs:{class:"token operator"}},[e("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[a._v("1")]),a._v(">")]),a._v(","),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("signer-keyname-"),e("span",{pre:!0,attrs:{class:"token operator"}},[e("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[a._v("2")]),a._v(">")]),a._v(","),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("signer-keyname-"),e("span",{pre:!0,attrs:{class:"token operator"}},[e("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[a._v("3")]),a._v(">")]),a._v("\n")])])]),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[a._v("TIP")]),a._v(" "),e("p",[e("code",[a._v("<signer-keyname>")]),a._v(' can be the type of "local/offline/ledger", but not "multi" type.')]),a._v(" "),e("p",[a._v("If you don't have all the permission of sub-keys, you can ask for the pubkeys to create the offline keys first, then you will be able to create the multisig key.")]),a._v(" "),e("p",[a._v('Offline key can be created by "plugchaind keys add --pubkey".')])]),a._v(" "),e("p",[a._v("How to use multisig key to sign and broadcast a transaction,  please refer to "),e("RouterLink",{attrs:{to:"/cli-client/tx.html#plugchaind-tx-multisign"}},[a._v("multisign")])],1),a._v(" "),e("h2",{attrs:{id:"plugchaind-keys-delete"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#plugchaind-keys-delete"}},[a._v("#")]),a._v(" plugchaind keys delete")]),a._v(" "),e("p",[a._v("Delete a local key by the given name.")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("plugchaind keys delete "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("key-name"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("flags"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),e("p",[e("strong",[a._v("Flags:")])]),a._v(" "),e("table",[e("thead",[e("tr",[e("th",[a._v("Name, shorthand")]),a._v(" "),e("th",[a._v("Default")]),a._v(" "),e("th",[a._v("Description")]),a._v(" "),e("th",[a._v("Required")])])]),a._v(" "),e("tbody",[e("tr",[e("td",[a._v("--force, -f")]),a._v(" "),e("td",[a._v("false")]),a._v(" "),e("td",[a._v("Remove the key unconditionally without asking for the passphrase")]),a._v(" "),e("td")]),a._v(" "),e("tr",[e("td",[a._v("--yes, -y")]),a._v(" "),e("td",[a._v("false")]),a._v(" "),e("td",[a._v("Skip confirmation prompt when deleting offline or ledger key references")]),a._v(" "),e("td")])])]),a._v(" "),e("h3",{attrs:{id:"delete-a-local-key"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#delete-a-local-key"}},[a._v("#")]),a._v(" Delete a local key")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("plugchaind keys delete MyKey\n")])])]),e("h2",{attrs:{id:"plugchaind-keys-export"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#plugchaind-keys-export"}},[a._v("#")]),a._v(" plugchaind keys export")]),a._v(" "),e("p",[a._v("Export the keystore of a key to a json file")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("plugchaind keys "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("export")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("key-name"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("flags"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),e("h3",{attrs:{id:"export-keystore"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#export-keystore"}},[a._v("#")]),a._v(" Export keystore")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("plugchaind keys "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("export")]),a._v(" Mykey --output-file"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("path-to-keystore"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])])]),e("h2",{attrs:{id:"plugchaind-keys-import"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#plugchaind-keys-import"}},[a._v("#")]),a._v(" plugchaind keys import")]),a._v(" "),e("p",[a._v("Import a ASCII armored private key into the local keybase.")]),a._v(" "),e("h3",{attrs:{id:"import-a-ascii-armored-private-key"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#import-a-ascii-armored-private-key"}},[a._v("#")]),a._v(" Import a ASCII armored private key")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("plugchaind keys "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("import")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("name"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("keyfile"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("flags"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),e("h2",{attrs:{id:"plugchaind-keys-list"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#plugchaind-keys-list"}},[a._v("#")]),a._v(" plugchaind keys list")]),a._v(" "),e("p",[a._v("List all the keys stored by this key manager along with their associated name, type, address and pubkey.")]),a._v(" "),e("p",[e("strong",[a._v("Flags:")])]),a._v(" "),e("table",[e("thead",[e("tr",[e("th",[a._v("Name, shorthand")]),a._v(" "),e("th",[a._v("Default")]),a._v(" "),e("th",[a._v("Description")]),a._v(" "),e("th",[a._v("Required")])])]),a._v(" "),e("tbody",[e("tr",[e("td",[a._v("--list-name")]),a._v(" "),e("td"),a._v(" "),e("td",[a._v("List names only")]),a._v(" "),e("td")])])]),a._v(" "),e("h3",{attrs:{id:"list-all-keys"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#list-all-keys"}},[a._v("#")]),a._v(" List all keys")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("plugchaind keys list\n")])])]),e("h2",{attrs:{id:"plugchaind-keys-migrate"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#plugchaind-keys-migrate"}},[a._v("#")]),a._v(" plugchaind keys migrate")]),a._v(" "),e("p",[a._v("Migrate key information from the legacy (db-based) Keybase to the new keyring-based Keybase.")]),a._v(" "),e("p",[e("strong",[a._v("Flags:")])]),a._v(" "),e("table",[e("thead",[e("tr",[e("th",[a._v("Name, shorthand")]),a._v(" "),e("th",[a._v("Default")]),a._v(" "),e("th",[a._v("Description")]),a._v(" "),e("th",[a._v("Required")])])]),a._v(" "),e("tbody",[e("tr",[e("td",[a._v("--dry-run")]),a._v(" "),e("td"),a._v(" "),e("td",[a._v("Run migration without actually persisting any changes to the new Keybase")]),a._v(" "),e("td")])])]),a._v(" "),e("h3",{attrs:{id:"migrate-key-information"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#migrate-key-information"}},[a._v("#")]),a._v(" Migrate key information")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("plugchaind keys migrate "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("flags"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),e("h2",{attrs:{id:"plugchaind-keys-mnemonic"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#plugchaind-keys-mnemonic"}},[a._v("#")]),a._v(" plugchaind keys mnemonic")]),a._v(" "),e("p",[a._v("Create a bip39 mnemonic, sometimes called a seed phrase, by reading from the system entropy. To pass your own entropy, use "),e("code",[a._v("unsafe-entropy")]),a._v(" mode.")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("plugchaind keys mnemonic "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("flags"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),e("p",[e("strong",[a._v("Flags:")])]),a._v(" "),e("table",[e("thead",[e("tr",[e("th",[a._v("Name, shorthand")]),a._v(" "),e("th",[a._v("Default")]),a._v(" "),e("th",[a._v("Description")]),a._v(" "),e("th",[a._v("Required")])])]),a._v(" "),e("tbody",[e("tr",[e("td",[a._v("--unsafe-entropy")]),a._v(" "),e("td"),a._v(" "),e("td",[a._v("Prompt the user to supply their own entropy, instead of relying on the system")]),a._v(" "),e("td")])])]),a._v(" "),e("h3",{attrs:{id:"create-a-bip39-mnemonic"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#create-a-bip39-mnemonic"}},[a._v("#")]),a._v(" Create a bip39 mnemonic")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("plugchaind keys mnemonic\n")])])]),e("p",[a._v("You'll get a bip39 mnemonic with 24 words, e.g.:")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("beauty entire blue tape ordinary fix rotate learn smart tiger dolphin cycle cigar dish alcohol slab bachelor vital design consider paper panther mad eternal\n")])])]),e("h2",{attrs:{id:"plugchaind-keys-parse"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#plugchaind-keys-parse"}},[a._v("#")]),a._v(" plugchaind keys parse")]),a._v(" "),e("p",[a._v("Convert and print to stdout key addresses and fingerprints from hexadecimal into bech32 cosmos prefixed format and vice versa.")]),a._v(" "),e("h3",{attrs:{id:"convert-and-print-to-stdout-key-addresses-and-fingerprints"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#convert-and-print-to-stdout-key-addresses-and-fingerprints"}},[a._v("#")]),a._v(" Convert and print to stdout key addresses and fingerprints")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("plugchaind keys parse "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("hex-or-bech32-address"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("flags"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),e("h2",{attrs:{id:"plugchaind-keys-show"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#plugchaind-keys-show"}},[a._v("#")]),a._v(" plugchaind keys show")]),a._v(" "),e("p",[a._v("Get details of a local key.")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("plugchaind keys show "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("key-name"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("flags"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),e("p",[e("strong",[a._v("Flags:")])]),a._v(" "),e("table",[e("thead",[e("tr",[e("th",[a._v("Name, shorthand")]),a._v(" "),e("th",[a._v("Default")]),a._v(" "),e("th",[a._v("Description")]),a._v(" "),e("th",[a._v("Required")])])]),a._v(" "),e("tbody",[e("tr",[e("td",[a._v("--address")]),a._v(" "),e("td",[a._v("false")]),a._v(" "),e("td",[a._v("Output the address only (overrides --output)")]),a._v(" "),e("td")]),a._v(" "),e("tr",[e("td",[a._v("--bech")]),a._v(" "),e("td",[a._v("acc")]),a._v(" "),e("td",[a._v("The Bech32 prefix encoding for a key (acc/val/cons)")]),a._v(" "),e("td")]),a._v(" "),e("tr",[e("td",[a._v("--device")]),a._v(" "),e("td",[a._v("false")]),a._v(" "),e("td",[a._v("Output the address in a ledger device")]),a._v(" "),e("td")]),a._v(" "),e("tr",[e("td",[a._v("--multisig-threshold")]),a._v(" "),e("td",[a._v("1")]),a._v(" "),e("td",[a._v("K out of N required signatures")]),a._v(" "),e("td")]),a._v(" "),e("tr",[e("td",[a._v("--pubkey")]),a._v(" "),e("td",[a._v("false")]),a._v(" "),e("td",[a._v("Output the public key only (overrides --output)")]),a._v(" "),e("td")])])]),a._v(" "),e("h3",{attrs:{id:"get-details-of-a-local-key"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#get-details-of-a-local-key"}},[a._v("#")]),a._v(" Get details of a local key")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("plugchaind keys show MyKey\n")])])]),e("p",[a._v("The following infos will be shown:")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("- name: Mykey\n  type: "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("local")]),a._v("\n  address: gx1tulwx2hwz4dv8te6cflhda64dn0984harlzegw\n  pubkey: gxpub1addwnpepq24rufap6u0sysqcpgsfzqhw3x8nfkhqhtmpgqt0369rlyqcg0vkgwzc4k0\n  mnemonic: "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('""')]),a._v("\n  threshold: "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\n  pubkeys: "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),e("h3",{attrs:{id:"get-validator-operator-address"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#get-validator-operator-address"}},[a._v("#")]),a._v(" Get validator operator address")]),a._v(" "),e("p",[a._v("If an address has been bonded to be a validator operator (which the address you used to create a validator), then you can use "),e("code",[a._v("--bech val")]),a._v(" to get the operator's address prefixed by "),e("code",[a._v("gxvaloper")]),a._v(" and the pubkey prefixed by "),e("code",[a._v("gxvaloperpub")]),a._v(":")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("plugchaind keys show MyKey "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--bech")]),a._v(" val\n")])])]),e("p",[a._v("Example Output:")]),a._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[a._v("- name: Mykey\n  type: "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("local")]),a._v("\n  address: gxvaloper1tulwx2hwz4dv8te6cflhda64dn0984hakwgk4f\n  pubkey: gxvaloperpub1addwnpepq24rufap6u0sysqcpgsfzqhw3x8nfkhqhtmpgqt0369rlyqcg0vkgd8e6zy\n  mnemonic: "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('""')]),a._v("\n  threshold: "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("\n  pubkeys: "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);